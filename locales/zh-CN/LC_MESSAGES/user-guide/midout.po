# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, The MegEngine Open Source Team
# This file is distributed under the same license as the MegEngine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine 1.3.0.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-09 13:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/user-guide/midout.rst:5
msgid "使用 midout 进行端上裁剪"
msgstr ""

#: ../../source/user-guide/midout.rst:8
msgid "如何在端上裁剪MegEngine库"
msgstr ""

#: ../../source/user-guide/midout.rst:9
msgid ""
"`midout `_ "
"是MegEngine中用来减小生成的二进制文件体积的工具，有助于在空间受限的设备上部署应用。midout通过记录模型推理时用到的opr和执行流，使用if(0)关闭未被记录的代码段后重新编译，利用"
" ``-flto`` 链接参数，可以大幅度减少静态链接的可执行文件的大小。其原理请参考 `midout原理 `_。 "
"现在基于MegEngine提供模型验证工具 `load-and-run "
"`_，展示怎样在某Aarch64架构的Android端上裁剪MegEngine库。"
msgstr ""

#: ../../source/user-guide/midout.rst:13
msgid "编译静态链接的load_and_run"
msgstr ""

#: ../../source/user-guide/midout.rst:14
msgid ""
"端上裁剪MegEngine库需要一个静态连接MegEngine的可执行程序，编译方法详见 `load-and-run的编译 `_。 "
"稍有不同的是编译时需要先设置load_and_run静态链接MegEngine。"
msgstr ""

#: ../../source/user-guide/midout.rst:21
msgid "否则，MegEngine会自动编译成动态库。然后执行："
msgstr ""

#: ../../source/user-guide/midout.rst:27
msgid "查看一下load_and_run的大小："
msgstr ""

#: ../../source/user-guide/midout.rst:34
msgid "此时load_and_run大小超过20MB。load_and_run的执行，请参考 `代码执行 `_。"
msgstr ""

#: ../../source/user-guide/midout.rst:37
msgid "裁剪load_and_run"
msgstr ""

#: ../../source/user-guide/midout.rst:38
msgid "MegEngine的裁剪可以从两方面进行："
msgstr ""

#: ../../source/user-guide/midout.rst:40
msgid "1、通过opr裁剪。在dump模型时，可以同时将模型用到的opr信息以json文件的形式输出，midout在编译期裁掉没有被模型使用到的所有opr。"
msgstr ""

#: ../../source/user-guide/midout.rst:42
msgid "2、通过trace流裁剪。运行一次模型推理，根据代码的执行流生成trace文件，通过trace文件，在二次编译时将没有执行的代码段裁剪掉。"
msgstr ""

#: ../../source/user-guide/midout.rst:44
msgid ""
"整个裁剪过程分为两个步骤。第一步，dump模型，获得模型opr信息；通过一次推理，获得trace文件。第二步，使用MegEngine的头文件生成工具"
" `gen_header_for_bin_reduce.py `_ 将opr信息和trace文件作为输入，生成 "
"bin_reduce.h并将该头文件加入编译Release版的应用程序。当然，也可以单独使用模型opr信息或是trace文件来生成bin_reduce.h，单独使用opr信息时，默认保留所有kernel，单独使用trace文件时，默认保留所有opr。"
msgstr ""

#: ../../source/user-guide/midout.rst:48
msgid "dump模型获得opr类型名称"
msgstr ""

#: ../../source/user-guide/midout.rst:50
msgid ""
"一个模型通常不会用到所有的opr，根据模型使用的opr，可以裁掉那些模型没有使用的opr。在转换模型时，我们可以通过如下方式获得模型的opr信息。"
" 使用 `dump_with_testcase_mge.py `_ 准备模型时，加上--output-strip-info参数。"
msgstr ""

#: ../../source/user-guide/midout.rst:57
msgid "执行完毕后，会生成resnet50.mge和resnet50.mge.json。查看这个json文件，它记录了模型用到的opr名称。"
msgstr ""

#: ../../source/user-guide/midout.rst:65
msgid "执行模型获得trace文件"
msgstr ""

#: ../../source/user-guide/midout.rst:67
msgid "基于trace的裁剪需要通过一次推理获得模型的执行trace文件。具体步骤如下："
msgstr ""

#: ../../source/user-guide/midout.rst:69
msgid "1、CMake构建时，打开MGE_WITH_MIDOUT_PROFILE开关，编译load_and_run："
msgstr ""

#: ../../source/user-guide/midout.rst:76
msgid "编译完成后，将build_dir/android/arm64-v8a/Release/install/bin下的load_and_run推至设备并执行："
msgstr ""

#: ../../source/user-guide/midout.rst:82
msgid "得到如下输出："
msgstr ""

#: ../../source/user-guide/midout.rst:107
msgid "注意到执行模型后，生成了midout_trace.20717文件，该文件记录了模型在底层执行了哪些kernel。"
msgstr ""

#: ../../source/user-guide/midout.rst:109
msgid "2、生成bin_recude.h并再次编译load_and_run："
msgstr ""

#: ../../source/user-guide/midout.rst:111
msgid ""
"将生成的midout_trace.20717拷贝至本地，使用上文提到的头文件生成工具 `gen_header_for_bin_reduce.py "
"`_ 生成bin_reduce.h。"
msgstr ""

#: ../../source/user-guide/midout.rst:117
msgid "再次编译load_and_run，注意要将bin_reduce.h加入并编译Release版本。设置CMAKE编译选项："
msgstr ""

#: ../../source/user-guide/midout.rst:127
msgid "编译完成后，检查load_and_run的大小："
msgstr ""

#: ../../source/user-guide/midout.rst:134
msgid "此时load_and_run的大小减小到2MB多。推到设备上运行，得到如下输出："
msgstr ""

#: ../../source/user-guide/midout.rst:159
msgid "可以看到模型依然正常运行，并且运行速度正常。"
msgstr ""

#: ../../source/user-guide/midout.rst:162
msgid "使用裁剪后的load_and_run"
msgstr ""

#: ../../source/user-guide/midout.rst:163
msgid ""
"想要裁剪前后的应用能够正常运行，需要保证裁剪前后两次推理使用同样的命令行参数。如果使用上文裁剪的load_and_fun的fast-"
"run功能(详见 :ref:`how_to_use_load_and_run`)。"
msgstr ""

#: ../../source/user-guide/midout.rst:169
msgid "可能得到如下输出："
msgstr ""

#: ../../source/user-guide/midout.rst:180
msgid ""
"这是因为程序运行到了已经被裁剪掉的函数中，未被记录在trace文件中的函数的实现已经被替换成trap()，详见 `midout原理 `_"
"。如果想要裁剪与fast-run配合使用，需要按如下流程获得trace文件："
msgstr ""

#: ../../source/user-guide/midout.rst:182
msgid "1、开启fast-run模式，执行未裁剪的load_and_run获得.cache文件，注意本次执行生成的trace应该被丢弃："
msgstr ""

#: ../../source/user-guide/midout.rst:188
msgid "2、使用.cache文件，执行load_and_run获得trace文件："
msgstr ""

#: ../../source/user-guide/midout.rst:194
msgid "3、如上节，将trace文件拷贝回本机，生成bin_reduce.h，再次编译load_and_run并推至设备。"
msgstr ""

#: ../../source/user-guide/midout.rst:196
msgid "4、使用裁剪后的load_and_run的fast-run功能，执行同2的命令，得到如下输出："
msgstr ""

#: ../../source/user-guide/midout.rst:222
msgid "使用其他load_and_run提供的功能也是如此，想要裁剪前后的应用能够正常运行，需要保证裁剪前后两次推理使用同样的命令行参数。"
msgstr ""

#: ../../source/user-guide/midout.rst:225
msgid "多个模型合并裁剪"
msgstr ""

#: ../../source/user-guide/midout.rst:226
msgid ""
"多个模型的合并裁剪与单个模型流程相同。 `gen_header_for_bin_reduce.py `_ 接受多个输入。 "
"假设有模型A与模型B。已经获得A.mge.json,B.mge.json以及A.trace,B.trace。执行："
msgstr ""

#: ../../source/user-guide/midout.rst:234
msgid "编译选项"
msgstr ""

#: ../../source/user-guide/midout.rst:235
msgid "MegEngine的cmake中有一些开关是默认打开的，它们提供了RTTI、异常抛出等特性，可以在第二次构建时关闭它们，以获得体积更小的load_and_run。它们是："
msgstr ""

#: ../../source/user-guide/midout.rst:237
msgid "`MGB_WITH_FLATBUFFERS` : FLABUFFERS格式支持"
msgstr ""

#: ../../source/user-guide/midout.rst:239
msgid "`MGE_ENABLE_RTTI` : C++ RTTI特性"
msgstr ""

#: ../../source/user-guide/midout.rst:241
msgid "`MGE_ENABLE_LOGGING` : 日志功能"
msgstr ""

#: ../../source/user-guide/midout.rst:243
msgid "`MGE_ENABLE_EXCEPTIONS` : 异常功能"
msgstr ""

#: ../../source/user-guide/midout.rst:245
msgid ""
"MegEngine提供一个总开关 `MGE_WITH_MINIMUM_SIZE` "
"来关闭上述特性。需要注意的是，只有在MGE_BIN_REDUCE被设置时，此开关才会被检查并生效。"
msgstr ""

#: ../../source/user-guide/midout.rst:248
msgid "裁剪基于MegEngine的应用"
msgstr ""

#: ../../source/user-guide/midout.rst:249
msgid "可以通过如下几种方式集成MegEngine，对应的裁剪方法相差无几："
msgstr ""

#: ../../source/user-guide/midout.rst:251
msgid ""
"1、参照 `CMakeLists.txt `_，将应用集成到整个MegEngine的工程。 "
"假设已经将app.cpp集成到MegEngine，那么会编译出静态链接MegEngine的可执行程序 "
"`app`。只需要按照上文中裁剪load_and_run的流程裁剪 `app` 即可。"
msgstr ""

#: ../../source/user-guide/midout.rst:254
msgid ""
"2、可能一个应用想要通过静态库集成MegEngine。此时需要获得一个裁剪过的libmegengine.a。可以依然使用load_and_run运行模型获得trace文件，生成bin_reduce.h，并二次编译获得裁剪过的libmegengine.a。"
" 此时，用户使用自己编写的构建脚本构建应用程序，并静态链接libmegengine.a，加上链接参数 "
"``-flto=full``。即可得到裁剪过的基于MegEngine的应用。"
msgstr ""

#: ../../source/user-guide/midout.rst:257
msgid "3、上述流程亦可以用于libmegengine.so的裁剪，但是动态库的裁剪效果远不及静态库。原因在于动态库并不知道某段代码是否会被调用，因此链接器不会进行激进的优化。"
msgstr ""

