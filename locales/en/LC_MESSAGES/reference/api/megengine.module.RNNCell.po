
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-21 10:50+0000\n"
"PO-Revision-Date: 2023-04-21 09:27+0000\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/reference/api/megengine.module.RNNCell.rst:5
msgid "RNNCell"
msgstr ""

#: megengine.module.rnn.RNNCell:1 of
msgid "An Elman RNN cell with tanh or ReLU non-linearity."
msgstr ""

#: megengine.module.rnn.RNNCell:3 of
msgid "h' = \\tanh(W_{ih} x + b_{ih}  +  W_{hh} h + b_{hh})"
msgstr ""

#: megengine.module.rnn.RNNCell:7 of
msgid "If :attr:`nonlinearity` is `'relu'`, then ReLU is used in place of tanh."
msgstr ""

#: megengine.module.rnn.RNNCell of
msgid "参数"
msgstr ""

#: megengine.module.rnn.RNNCell:10 of
msgid "The number of expected features in the input `x`."
msgstr ""

#: megengine.module.rnn.RNNCell:13 of
msgid "The number of features in the hidden state `h`."
msgstr ""

#: megengine.module.rnn.RNNCell:16 of
msgid ""
"If ``False``, then the layer does not use bias weights `b_ih` and `b_hh`."
" Default: ``True``."
msgstr ""

#: megengine.module.rnn.RNNCell:19 of
msgid ""
"The non-linearity to use. Can be either ``'tanh'`` or ``'relu'``. "
"Default: ``'tanh'``"
msgstr ""

#: megengine.module.rnn.RNNCell:27 of
msgid "Shape:"
msgstr ""

#: megengine.module.rnn.RNNCell:24 of
msgid "Inputs: input, hidden"
msgstr ""

#: megengine.module.rnn.RNNCell:24 of
msgid ""
"input: `(batch, input_size)`. Tensor containing input features. hidden: "
"`(batch, hidden_size)`. Tensor containing the initial hidden state for "
"each element in the batch. Defaults to zero if not provided."
msgstr ""

#: megengine.module.rnn.RNNCell:27 of
msgid "Outputs: h'"
msgstr ""

#: megengine.module.rnn.RNNCell:27 of
msgid ""
"h': `(batch, hidden_size)`. Tensor containing the next hidden state for "
"each element in the batch."
msgstr ""

#: megengine.module.rnn.RNNCell:30 of
msgid "实际案例"
msgstr ""

#: megengine.module.rnn.RNNCell:43 of
msgid "Outputs:"
msgstr ""

#~ msgid "The number of expected features in the input `x`"
#~ msgstr ""

#~ msgid "The number of features in the hidden state `h`"
#~ msgstr ""

#~ msgid ""
#~ "If ``False``, then the layer does "
#~ "not use bias weights `b_ih` and "
#~ "`b_hh`. Default: ``True``"
#~ msgstr ""

#~ msgid ""
#~ "**input** of shape `(batch, input_size)`: "
#~ "tensor containing input features"
#~ msgstr ""

#~ msgid ""
#~ "**hidden** of shape `(batch, hidden_size)`:"
#~ " tensor containing the initial hidden "
#~ "state for each element in the "
#~ "batch. Defaults to zero if not "
#~ "provided."
#~ msgstr ""

#~ msgid ""
#~ "**h'** of shape `(batch, hidden_size)`: "
#~ "tensor containing the next hidden state"
#~ " for each element in the batch"
#~ msgstr ""

#~ msgid ""
#~ "Input1: :math:`(N, H_{in})` tensor containing"
#~ " input features where :math:`H_{in}` = "
#~ "`input_size`"
#~ msgstr ""

#~ msgid ""
#~ "Input2: :math:`(N, H_{out})` tensor containing"
#~ " the initial hidden state for each"
#~ " element in the batch where "
#~ ":math:`H_{out}` = `hidden_size` Defaults to"
#~ " zero if not provided."
#~ msgstr ""

#~ msgid ""
#~ "Output: :math:`(N, H_{out})` tensor containing"
#~ " the next hidden state for each "
#~ "element in the batch"
#~ msgstr ""

