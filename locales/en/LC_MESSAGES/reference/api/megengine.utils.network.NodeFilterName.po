# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, The MegEngine Open Source Team
# This file is distributed under the same license as the MegEngine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine 1.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-09 17:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:2
msgid "megengine.utils.network.NodeFilterName"
msgstr ""

#: megengine.utils.network.NodeFilterName:1 of
msgid "基类：:class:`megengine.utils.network.NodeFilter`"
msgstr ""

#: megengine.utils.network.NodeFilterName:1 of
msgid "see :meth:`NodeFilter.name`"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:11
msgid "Methods"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`__init__ <megengine.utils.network.NodeFilterName.__init__>`\\ "
"\\(node\\_iter\\, pattern\\, ignorecase\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>
msgid "param node_iter"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "iterator to :class:`.NetworkNode`, or a"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ":obj:`as_count <megengine.utils.network.NodeFilterName.as_count>`\\ \\(\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "consume this iterator and get the number of elements"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ":obj:`as_dict <megengine.utils.network.NodeFilterName.as_dict>`\\ \\(\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
"construct an ordered dict to map from node names to objects in this "
"iterator"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ":obj:`as_list <megengine.utils.network.NodeFilterName.as_list>`\\ \\(\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "consume this iterator and return its content as a list"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`as_unique <megengine.utils.network.NodeFilterName.as_unique>`\\ "
"\\(\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "assert that this iterator yields only one node and return it"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`check_type <megengine.utils.network.NodeFilterName.check_type>`\\ "
"\\(node\\_type\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
"assert that all oprs produced by this iterator are instances of certain "
"type"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`data_provider "
"<megengine.utils.network.NodeFilterName.data_provider>`\\ \\(\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "get :class:`.DataProvider` oprs; shorthand for ``.type(DataProvider)``"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`has_input <megengine.utils.network.NodeFilterName.has_input>`\\ "
"\\(var\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "an opr is kept if it has given var as one of its inputs"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`make_all_deps "
"<megengine.utils.network.NodeFilterName.make_all_deps>`\\ "
"\\(\\*dest\\_vars\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "make a :class:`NodeFilter` that contains all deps of given vars"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`make_re <megengine.utils.network.NodeFilterName.make_re>`\\ "
"\\(pattern\\[\\, ignorecase\\]\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`name <megengine.utils.network.NodeFilterName.name>`\\ "
"\\(pattern\\[\\, ignorecase\\]\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "filter by node name"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`not_type <megengine.utils.network.NodeFilterName.not_type>`\\ "
"\\(node\\_type\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "remove oprs of specific type"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`param_provider "
"<megengine.utils.network.NodeFilterName.param_provider>`\\ \\(\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "get :class:`.ParamProvider` oprs; shorthand for ``.type(ParamProvider)``"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid ""
":obj:`type <megengine.utils.network.NodeFilterName.type>`\\ "
"\\(node\\_type\\)"
msgstr ""

#: ../../source/reference/api/megengine.utils.network.NodeFilterName.rst:27:<autosummary>:1
msgid "filter by specific node type"
msgstr ""

