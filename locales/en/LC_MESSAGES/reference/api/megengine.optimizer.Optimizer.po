
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 09:14+0000\n"
"PO-Revision-Date: 2021-06-03 10:20+0000\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/reference/api/megengine.optimizer.Optimizer.rst:5
msgid "Optimizer"
msgstr ""

#: megengine.optimizer.optimizer.Optimizer:1 of
msgid "Base class for all optimizers."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer
#: megengine.optimizer.optimizer.Optimizer.add_param_group
#: megengine.optimizer.optimizer.Optimizer.load_state_dict of
msgid "参数"
msgstr ""

#: megengine.optimizer.optimizer.Optimizer:4 of
msgid "specifies what Tensors should be optimized."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer:6 of
msgid "a dict of default parameters of Optimizer, like learning rate or momentum."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.add_param_group:1 of
msgid ""
"Add a param group to ``param_groups`` of the "
":class:`~megengine.optim.optimizer.Optimizer`."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.add_param_group:3 of
msgid ""
"This can be useful when fine tuning a pre-trained network as frozen "
"layers can be made trainable and added to the "
":class:`~megengine.optim.optimizer.Optimizer` as training progresses."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.add_param_group:7 of
msgid "specifies what tensors should be optimized along with group."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.clear_grad:1 of
msgid "Set the grad attribute to None for all parameters."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.load_state_dict:1 of
msgid "Loads the optimizer state."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.load_state_dict:4 of
msgid ""
"optimizer state. Should be an object returned from a call to "
":meth:`state_dict`."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.state_dict:1 of
msgid "Export the optimizer state."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.state_dict of
msgid "返回类型"
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.state_dict:3 of
msgid ":py:class:`~typing.Dict`"
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.state_dict of
msgid "返回"
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.state_dict:4 of
msgid "optimizer state. Can be loaded by :meth:`load_state_dict`."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.step:1 of
msgid "Performs a single optimization step."
msgstr ""

#: megengine.optimizer.optimizer.Optimizer.zero_grad:1 of
msgid "use clear_grad instead"
msgstr ""

#~ msgid "基类：:class:`object`"
#~ msgstr "基类：:class:`object`"

#~ msgid ""
#~ ":obj:`__init__ <megengine.optimizer.Optimizer.__init__>`\\ "
#~ "\\(params\\, defaults\\)"
#~ msgstr ""
#~ ":obj:`__init__ <megengine.optimizer.Optimizer.__init__>`\\ "
#~ "\\(params\\, defaults\\)"

#~ msgid "Initialize self."
#~ msgstr "初始化方法。"

#~ msgid "megengine.optimizer.Optimizer"
#~ msgstr ""

#~ msgid "Methods"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`add_param_group "
#~ "<megengine.optimizer.Optimizer.add_param_group>`\\ "
#~ "\\(param\\_group\\)"
#~ msgstr ""

#~ msgid ":obj:`backward <megengine.optimizer.Optimizer.backward>`\\ \\(loss\\)"
#~ msgstr ""

#~ msgid ":obj:`bcast_param <megengine.optimizer.Optimizer.bcast_param>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ":obj:`clear_grad <megengine.optimizer.Optimizer.clear_grad>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.optimizer.Optimizer.load_state_dict>`\\ \\(state\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`state_dict <megengine.optimizer.Optimizer.state_dict>`\\"
#~ " \\(\\[keep\\_var\\]\\)"
#~ msgstr ""

#~ msgid ":obj:`step <megengine.optimizer.Optimizer.step>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ":obj:`zero_grad <megengine.optimizer.Optimizer.zero_grad>`\\ \\(\\)"
#~ msgstr ""

