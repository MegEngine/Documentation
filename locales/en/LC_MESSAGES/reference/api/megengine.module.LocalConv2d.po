msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 09:14+0000\n"
"PO-Revision-Date: 2021-12-28 10:06\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/zh_CN/LC_MESSAGES/reference/api/megengine.module.LocalConv2d.po\n"
"X-Crowdin-File-ID: 2410\n"

#: ../../source/reference/api/megengine.module.LocalConv2d.rst:5
msgid "LocalConv2d"
msgstr ""

#: megengine.module.conv.LocalConv2d:1 of
msgid "Applies a spatial convolution with untied kernels over an groupped channeled input 4D tensor. It is also known as the locally connected layer."
msgstr ""

#: megengine.module.conv.LocalConv2d of
msgid "参数"
msgstr ""

#: megengine.module.conv.LocalConv2d:5 of
msgid "number of input channels."
msgstr ""

#: megengine.module.conv.LocalConv2d:7 of
msgid "number of output channels."
msgstr ""

#: megengine.module.conv.LocalConv2d:9 of
msgid "the height of the input images."
msgstr ""

#: megengine.module.conv.LocalConv2d:11 of
msgid "the width of the input images."
msgstr ""

#: megengine.module.conv.LocalConv2d:13 of
msgid "size of weight on spatial dimensions. If kernel_size is an :class:`int`, the actual kernel size would be ``(kernel_size, kernel_size)``."
msgstr ""

#: megengine.module.conv.LocalConv2d:17 of
msgid "stride of the 2D convolution operation. Default: 1"
msgstr ""

#: megengine.module.conv.LocalConv2d:19 of
msgid "size of the paddings added to the input on both sides of its spatial dimensions. Only zero-padding is supported. Default: 0"
msgstr ""

#: megengine.module.conv.LocalConv2d:22 of
msgid "dilation of the 2D convolution operation. Default: 1"
msgstr ""

#: megengine.module.conv.LocalConv2d:24 of
msgid "number of groups into which the input and output channels are divided, so as to perform a \"grouped convolution\". When ``groups`` is not 1, ``in_channels`` and ``out_channels`` must be divisible by ``groups``. Default: 1"
msgstr ""

#: megengine.module.conv.LocalConv2d:30 of
msgid "``weight`` usually has shape ``(out_height, out_width, in_channels, height, width, in_channels)`` , if groups is not 1, shape will be ``(groups, out_height, out_width, in_channels // groups, height, width, out_channels // groups)``"
msgstr ""

#: megengine.module.conv.LocalConv2d:32 of
msgid "``bias`` usually has shape ``(1, out_channels, *1)``"
msgstr ""

#~ msgid "基类：:class:`megengine.module.conv.Conv2d`"
#~ msgstr "基类：:class:`megengine.module.conv.Conv2d`"

#~ msgid ""
#~ ":obj:`__init__ <megengine.module.LocalConv2d.__init__>`\\ "
#~ "\\(in\\_channels\\, out\\_channels\\, ...\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""
#~ ":obj:`__init__ <megengine.module.LocalConv2d.__init__>`\\ "
#~ "\\(in\\_channels\\, out\\_channels\\, ...\\[\\, "
#~ "...\\]\\)"

#~ msgid "param name"
#~ msgstr "参数名称"

#~ msgid "module's name, can be initialized by the ``kwargs`` parameter"
#~ msgstr "模块名称，子类的 ``kwargs`` 将会保存和传递此关键字参数。"

#~ msgid "rtype"
#~ msgstr ""

#~ msgid ":py:obj:`None`"
#~ msgstr ""

#~ msgid ""
#~ ":attr:`weight` usually has shape "
#~ "``(out_height, out_width, in_channels, height, "
#~ "width, in_channels)``,"
#~ msgstr ""

#~ msgid ""
#~ "if groups is not 1, shape will "
#~ "be ``(groups, out_height, out_width, "
#~ "in_channels // groups, height, width, "
#~ "out_channels // groups)``"
#~ msgstr ""

#~ msgid ":attr:`bias` usually has shape ``(1, out_channels, *1)``"
#~ msgstr ""

#~ msgid "megengine.module.LocalConv2d"
#~ msgstr "megengine.module.LocalConv2d"

#~ msgid "Methods"
#~ msgstr "方法"

#~ msgid ":obj:`apply <megengine.module.LocalConv2d.apply>`\\ \\(fn\\)"
#~ msgstr ":obj:`apply <megengine.module.LocalConv2d.apply>`\\ \\(fn\\)"

#~ msgid ""
#~ "Applies function ``fn`` to all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "对当前模块中的所有模块应用函数 ``fn``，包括当前模块本身。"

#~ msgid ""
#~ ":obj:`buffers <megengine.module.LocalConv2d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`buffers <megengine.module.LocalConv2d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"

#~ msgid "Returns an iterable for the buffers of the module."
#~ msgstr "返回该模块中对于buffers的一个可迭代对象。"

#~ msgid ""
#~ ":obj:`calc_conv <megengine.module.LocalConv2d.calc_conv>`\\ "
#~ "\\(inp\\, weight\\, bias\\)"
#~ msgstr ""
#~ ":obj:`calc_conv <megengine.module.LocalConv2d.calc_conv>`\\ "
#~ "\\(inp\\, weight\\, bias\\)"

#~ msgid ""
#~ ":obj:`children <megengine.module.LocalConv2d.children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`children <megengine.module.LocalConv2d.children>`\\ "
#~ "\\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "submodules that are direct attributes of"
#~ " this module."
#~ msgstr "返回一个可迭代对象，可遍历所有属于当前模块的直接属性的子模块。"

#~ msgid ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.LocalConv2d.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"
#~ msgstr ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.LocalConv2d.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"

#~ msgid ""
#~ "Sets ``module``'s ``quantize_disabled`` attribute"
#~ " and return ``module``."
#~ msgstr "设置 ``module`` 的 ``quantize_diabled`` 属性，并返回 ``module`` 。"

#~ msgid ":obj:`eval <megengine.module.LocalConv2d.eval>`\\ \\(\\)"
#~ msgstr ":obj:`eval <megengine.module.LocalConv2d.eval>`\\ \\(\\)"

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``False``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``False`` ，并将其切换为推理模式。"

#~ msgid ":obj:`forward <megengine.module.LocalConv2d.forward>`\\ \\(inp\\)"
#~ msgstr ":obj:`forward <megengine.module.LocalConv2d.forward>`\\ \\(inp\\)"

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.LocalConv2d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"
#~ msgstr ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.LocalConv2d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"

#~ msgid ""
#~ "Loads a given dictionary created by "
#~ ":func:`state_dict` into this module."
#~ msgstr "加载一个参数字典，这个字典通常使用 :func:`state_dict` 得到。"

#~ msgid ""
#~ ":obj:`modules <megengine.module.LocalConv2d.modules>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`modules <megengine.module.LocalConv2d.modules>`\\ "
#~ "\\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "返回一个可迭代对象，可以遍历当前模块中的所有模块，包括其本身。"

#~ msgid ""
#~ ":obj:`named_buffers "
#~ "<megengine.module.LocalConv2d.named_buffers>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`named_buffers "
#~ "<megengine.module.LocalConv2d.named_buffers>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"

#~ msgid ""
#~ "Returns an iterable for key buffer "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the buffer."
#~ msgstr ""
#~ "返回可遍历模块中 key 与 buffer 的键值对的可迭代对象，其中 "
#~ "``key`` 为从该模块至 buffer 的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_children "
#~ "<megengine.module.LocalConv2d.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`named_children "
#~ "<megengine.module.LocalConv2d.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable of key-submodule "
#~ "pairs for all the submodules that "
#~ "are direct attributes of this module,"
#~ " where 'key' is the attribute name"
#~ " of submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历属于当前模块的直接属性的所有子模块（submodule）与键（key）组成的”key-"
#~ "submodule”对，其中'key'是子模块对应的属性名。"

#~ msgid ""
#~ ":obj:`named_modules "
#~ "<megengine.module.LocalConv2d.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"
#~ msgstr ""
#~ ":obj:`named_modules "
#~ "<megengine.module.LocalConv2d.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"

#~ msgid ""
#~ "Returns an iterable of key-module "
#~ "pairs for all the modules within "
#~ "this module, including itself, where "
#~ "'key' is the dotted path from this"
#~ " module to the submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历当前模块包括自身在内的所有其内部模块所组成的key-"
#~ "module键-模块对，其中'key'是从当前模块到各子模块的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.LocalConv2d.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.LocalConv2d.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"

#~ msgid ""
#~ "Returns an iterable for key "
#~ ":class:`~.Parameter` pairs of the module, "
#~ "where ``key`` is the dotted path "
#~ "from this module to the "
#~ ":class:`~.Parameter`."
#~ msgstr ""
#~ "返回一个可迭代对象，可以遍历当前模块中key与 :class:`~.Parameter` 组成的键值对。其中"
#~ "  ``key`` 是从模块到 :class:`~.Parameter` 的点路径（dotted"
#~ " path）。"

#~ msgid ""
#~ ":obj:`named_tensors "
#~ "<megengine.module.LocalConv2d.named_tensors>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key tensor "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the tensor."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`parameters <megengine.module.LocalConv2d.parameters>`\\"
#~ " \\(\\[recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`parameters <megengine.module.LocalConv2d.parameters>`\\"
#~ " \\(\\[recursive\\]\\)"

#~ msgid "Returns an iterable for the :class:`~.Parameter` of the module."
#~ msgstr "返回一个可迭代对象，遍历当前模块中的所有 :class:`~.Parameter`"

#~ msgid ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.LocalConv2d.register_forward_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.LocalConv2d.register_forward_hook>`\\ "
#~ "\\(hook\\)"

#~ msgid "Registers a hook to handle forward results."
#~ msgstr "给模块输出注册一个回调函数。"

#~ msgid ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.LocalConv2d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.LocalConv2d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"

#~ msgid "Registers a hook to handle forward inputs."
#~ msgstr "给模块输入注册一个回调函数。"

#~ msgid ""
#~ ":obj:`replace_param "
#~ "<megengine.module.LocalConv2d.replace_param>`\\ \\(params\\, "
#~ "start\\_pos\\[\\, seen\\]\\)"
#~ msgstr ""
#~ ":obj:`replace_param "
#~ "<megengine.module.LocalConv2d.replace_param>`\\ \\(params\\, "
#~ "start\\_pos\\[\\, seen\\]\\)"

#~ msgid ""
#~ "Replaces module's parameters with ``params``,"
#~ " used by :class:`~.ParamPack` to"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.LocalConv2d.reset_parameters>`\\ \\(\\)"
#~ msgstr ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.LocalConv2d.reset_parameters>`\\ \\(\\)"

#~ msgid ""
#~ ":obj:`state_dict <megengine.module.LocalConv2d.state_dict>`\\"
#~ " \\(\\[rst\\, prefix\\, keep\\_var\\]\\)"
#~ msgstr ""
#~ ":obj:`state_dict <megengine.module.LocalConv2d.state_dict>`\\"
#~ " \\(\\[rst\\, prefix\\, keep\\_var\\]\\)"

#~ msgid ""
#~ ":obj:`tensors <megengine.module.LocalConv2d.tensors>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Tensor` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`train <megengine.module.LocalConv2d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`train <megengine.module.LocalConv2d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``mode``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``mode``。"

#~ msgid ":obj:`zero_grad <megengine.module.LocalConv2d.zero_grad>`\\ \\(\\)"
#~ msgstr ":obj:`zero_grad <megengine.module.LocalConv2d.zero_grad>`\\ \\(\\)"

#~ msgid "Sets all parameters' grads to zero"
#~ msgstr "将所有参数的梯度置0。"

