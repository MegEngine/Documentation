
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-21 10:50+0000\n"
"PO-Revision-Date: 2023-04-21 09:26+0000\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/reference/api/megengine.module.ConvTranspose3d.rst:5
msgid "ConvTranspose3d"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:1 of
msgid "Applies a 3D transposed convolution over an input tensor."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:3 of
msgid ""
"Only support the case that groups = 1 and conv_mode = "
"\"cross_correlation\"."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:5 of
msgid ""
":class:`ConvTranspose3d` can be seen as the gradient of :class:`Conv3d` "
"operation with respect to its input."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:8 of
msgid ""
"Convolution3D usually reduces the size of input, while transposed "
"convolution3d works the opposite way, transforming a smaller input to a "
"larger output while preserving the connectivity pattern."
msgstr ""

#: megengine.module.conv.ConvTranspose3d of
msgid "参数"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:13 of
msgid "number of input channels."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:16 of
msgid "number of output channels."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:19 of
msgid ""
"size of weight on spatial dimensions. If ``kernel_size`` is an "
":class:`int`, the actual kernel size would be ``(kernel_size, "
"kernel_size, kernel_size)``."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:24 of
msgid "stride of the 3D convolution operation. Default: 1."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:27 of
msgid ""
"size of the paddings added to the input on all sides of its spatial "
"dimensions. Only zero-padding is supported. Default: 0."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:31 of
msgid "size of paddings appended to output. Default: 0."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:34 of
msgid "dilation of the 3D convolution operation. Default: 1."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:37 of
msgid ""
"number of groups into which the input and output channels are divided, so"
" as to perform a ``grouped convolution``. When ``groups`` is not 1, "
"``in_channels`` and ``out_channels`` must be divisible by groups, and the"
" shape of weight should be ``(groups, in_channels // groups, out_channels"
" // groups, depth, height, width)``. Default: 1."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:44 of
msgid "wether to add a bias onto the result of convolution. Default: True."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:59 of
msgid "Shape:"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:48 of
msgid ""
"Input: :math:`(N, C_{in}, D_{in}, H_{in}, W_{in})` or :math:`(C_{in}, "
"D_{in}, H_{in}, W_{in})`"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:49 of
msgid ""
"Output: :math:`(N, C_{out}, D_{out}, H_{out}, W_{out})` or "
":math:`(C_{out}, D_{out}, H_{out}, W_{out})`, where"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:52 of
msgid ""
"D_{out} = (D_{in} - 1) \\times \\text{stride}[0] - 2 \\times "
"\\text{padding}[0] + \\text{dilation}[0]\n"
"          \\times (\\text{kernel\\_size}[0] - 1) + "
"\\text{output\\_padding}[0] + 1\n"
"\n"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:55 of
msgid ""
"H_{out} = (H_{in} - 1) \\times \\text{stride}[1] - 2 \\times "
"\\text{padding}[1] + \\text{dilation}[1]\n"
"          \\times (\\text{kernel\\_size}[1] - 1) + "
"\\text{output\\_padding}[1] + 1\n"
"\n"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:58 of
msgid ""
"W_{out} = (W_{in} - 1) \\times \\text{stride}[2] - 2 \\times "
"\\text{padding}[2] + \\text{dilation}[2]\n"
"          \\times (\\text{kernel\\_size}[2] - 1) + "
"\\text{output\\_padding}[2] + 1\n"
"\n"
msgstr ""

#: megengine.module.conv.ConvTranspose3d of
msgid "返回"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:61 of
msgid "module. The instance of the ``ConvTranspose3d`` module."
msgstr ""

#: megengine.module.conv.ConvTranspose3d of
msgid "返回类型"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:65 of
msgid "实际案例"
msgstr ""

#: megengine.module.conv.ConvTranspose3d:76 of
msgid ""
"``weight`` usually has shape ``(in_channels, out_channels, depth, height,"
" width)`` ."
msgstr ""

#: megengine.module.conv.ConvTranspose3d:77 of
msgid "``bias`` usually has shape ``(1, out_channels, *1)``"
msgstr ""

#~ msgid ""
#~ ":attr:`weight` usually has shape "
#~ "``(in_channels, out_channels, depth, height, "
#~ "width)``. :attr:`bias` usually has shape "
#~ "``(1, out_channels, *1)``"
#~ msgstr ""

#~ msgid "megengine.module.ConvTranspose3d"
#~ msgstr ""

#~ msgid "Methods"
#~ msgstr "方法"

#~ msgid ":obj:`apply <megengine.module.ConvTranspose3d.apply>`\\ \\(fn\\)"
#~ msgstr ""

#~ msgid ""
#~ "Applies function ``fn`` to all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "对当前模块中的所有模块应用函数 ``fn``，包括当前模块本身。"

#~ msgid ""
#~ ":obj:`buffers <megengine.module.ConvTranspose3d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the buffers of the module."
#~ msgstr "返回该模块中对于buffers的一个可迭代对象。"

#~ msgid ""
#~ ":obj:`children <megengine.module.ConvTranspose3d.children>`\\"
#~ " \\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "submodules that are direct attributes of"
#~ " this module."
#~ msgstr "返回一个可迭代对象，可遍历所有属于当前模块的直接属性的子模块。"

#~ msgid ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.ConvTranspose3d.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets ``module``'s ``quantize_disabled`` attribute"
#~ " and return ``module``."
#~ msgstr "设置 ``module`` 的 ``quantize_diabled`` 属性，并返回 ``module`` 。"

#~ msgid ":obj:`eval <megengine.module.ConvTranspose3d.eval>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``False``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``False`` ，并将其切换为推理模式。"

#~ msgid ":obj:`forward <megengine.module.ConvTranspose3d.forward>`\\ \\(inp\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.ConvTranspose3d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Loads a given dictionary created by "
#~ ":func:`state_dict` into this module."
#~ msgstr "加载一个参数字典，这个字典通常使用 :func:`state_dict` 得到。"

#~ msgid ""
#~ ":obj:`modules <megengine.module.ConvTranspose3d.modules>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "返回一个可迭代对象，可以遍历当前模块中的所有模块，包括其本身。"

#~ msgid ""
#~ ":obj:`named_buffers "
#~ "<megengine.module.ConvTranspose3d.named_buffers>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key buffer "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the buffer."
#~ msgstr ""
#~ "返回可遍历模块中 key 与 buffer 的键值对的可迭代对象，其中 "
#~ "``key`` 为从该模块至 buffer 的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_children "
#~ "<megengine.module.ConvTranspose3d.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable of key-submodule "
#~ "pairs for all the submodules that "
#~ "are direct attributes of this module,"
#~ " where 'key' is the attribute name"
#~ " of submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历属于当前模块的直接属性的所有子模块（submodule）与键（key）组成的”key-"
#~ "submodule”对，其中'key'是子模块对应的属性名。"

#~ msgid ""
#~ ":obj:`named_modules "
#~ "<megengine.module.ConvTranspose3d.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable of key-module "
#~ "pairs for all the modules within "
#~ "this module, including itself, where "
#~ "'key' is the dotted path from this"
#~ " module to the submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历当前模块包括自身在内的所有其内部模块所组成的key-"
#~ "module键-模块对，其中'key'是从当前模块到各子模块的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.ConvTranspose3d.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key "
#~ ":class:`~.Parameter` pairs of the module, "
#~ "where ``key`` is the dotted path "
#~ "from this module to the "
#~ ":class:`~.Parameter`."
#~ msgstr ""
#~ "返回一个可迭代对象，可以遍历当前模块中key与 :class:`~.Parameter` 组成的键值对。其中"
#~ "  ``key`` 是从模块到 :class:`~.Parameter` 的点路径（dotted"
#~ " path）。"

#~ msgid ""
#~ ":obj:`named_tensors "
#~ "<megengine.module.ConvTranspose3d.named_tensors>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key tensor "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the tensor."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`parameters "
#~ "<megengine.module.ConvTranspose3d.parameters>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Parameter` of the module."
#~ msgstr "返回一个可迭代对象，遍历当前模块中的所有 :class:`~.Parameter`"

#~ msgid ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.ConvTranspose3d.register_forward_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""

#~ msgid "Registers a hook to handle forward results."
#~ msgstr "给模块输出注册一个回调函数。"

#~ msgid ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.ConvTranspose3d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""

#~ msgid "Registers a hook to handle forward inputs."
#~ msgstr "给模块输入注册一个回调函数。"

#~ msgid ""
#~ ":obj:`replace_param "
#~ "<megengine.module.ConvTranspose3d.replace_param>`\\ \\(params\\,"
#~ " start\\_pos\\[\\, seen\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Replaces module's parameters with ``params``,"
#~ " used by :class:`~.ParamPack` to"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.ConvTranspose3d.reset_parameters>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "rtype"
#~ msgstr ""

#~ msgid ":py:obj:`None`"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`state_dict "
#~ "<megengine.module.ConvTranspose3d.state_dict>`\\ \\(\\[rst\\,"
#~ " prefix\\, keep\\_var\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`tensors <megengine.module.ConvTranspose3d.tensors>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Tensor` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`train <megengine.module.ConvTranspose3d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``mode``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``mode``。"

#~ msgid ":obj:`zero_grad <megengine.module.ConvTranspose3d.zero_grad>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Sets all parameters' grads to zero"
#~ msgstr "将所有参数的梯度置0。"

#~ msgid "stride of the 3D convolution operation. Default: 1"
#~ msgstr ""

#~ msgid ""
#~ "size of the paddings added to the"
#~ " input on all sides of its "
#~ "spatial dimensions. Only zero-padding is"
#~ " supported. Default: 0"
#~ msgstr ""

#~ msgid "size of paddings appended to output. Default: 0"
#~ msgstr ""

#~ msgid "dilation of the 3D convolution operation. Default: 1"
#~ msgstr ""

#~ msgid ""
#~ "number of groups into which the "
#~ "input and output channels are divided,"
#~ " so as to perform a ``grouped "
#~ "convolution``. When ``groups`` is not 1,"
#~ " ``in_channels`` and ``out_channels`` must "
#~ "be divisible by groups, and the "
#~ "shape of weight should be ``(groups, "
#~ "in_channels // groups, out_channels // "
#~ "groups, depth, height, width)``. Default: "
#~ "1"
#~ msgstr ""

#~ msgid "wether to add a bias onto the result of convolution. Default: True"
#~ msgstr ""

