msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-19 16:51+0800\n"
"PO-Revision-Date: 2022-04-19 12:34\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/zh_CN/LC_MESSAGES/reference/api/megengine.module.Conv2d.po\n"
"X-Crowdin-File-ID: 2376\n"

#: ../../source/reference/api/megengine.module.Conv2d.rst:5
msgid "Conv2d"
msgstr ""

#: megengine.module.conv.Conv2d:1 of
msgid "Applies a 2D convolution over an input tensor."
msgstr ""

#: megengine.module.conv.Conv2d:3 of
msgid "For instance, given an input of the size :math:`(N, C_{\\text{in}}, H, W)`, this layer generates an output of the size :math:`(N, C_{\\text{out}}, H_{\\text{out}}, W_{\\text{out}})` through the process described as below:"
msgstr ""

#: megengine.module.conv.Conv2d:8 of
msgid "\\text{out}(N_i, C_{\\text{out}_j}) = \\text{bias}(C_{\\text{out}_j}) +\n"
"\\sum_{k = 0}^{C_{\\text{in}} - 1} \\text{weight}(C_{\\text{out}_j}, k) \\star \\text{input}(N_i, k)\n\n"
msgstr ""

#: megengine.module.conv.Conv2d:12 of
msgid "where :math:`\\star` is the valid 2D cross-correlation operator, :math:`N` is batch size, :math:`C` denotes number of channels, :math:`H` is height of input planes in pixels, and :math:`W` is width in pixels."
msgstr ""

#: megengine.module.conv.Conv2d:17 of
msgid "In general, output feature maps' shapes can be inferred as follows:"
msgstr ""

#: megengine.module.conv.Conv2d:19 of
msgid "input: :math:`(N, C_{\\text{in}}, H_{\\text{in}}, W_{\\text{in}})`"
msgstr ""

#: megengine.module.conv.Conv2d:21 of
msgid "output: :math:`(N, C_{\\text{out}}, H_{\\text{out}}, W_{\\text{out}})` where"
msgstr ""

#: megengine.module.conv.Conv2d:23 of
msgid "\\text{H}_{out} = \\lfloor \\frac{\\text{H}_{in} + 2 * \\text{padding[0]} -\n"
"\\text{dilation[0]} * (\\text{kernel_size[0]} - 1) - 1}{\\text{stride[0]}} + 1 \\rfloor\n\n"
msgstr ""

#: megengine.module.conv.Conv2d:27 of
msgid "\\text{W}_{out} = \\lfloor \\frac{\\text{W}_{in} + 2 * \\text{padding[1]} -\n"
"\\text{dilation[1]} * (\\text{kernel_size[1]} - 1) - 1}{\\text{stride[1]}} + 1 \\rfloor\n\n"
msgstr ""

#: megengine.module.conv.Conv2d:31 of
msgid "When `groups == in_channels` and `out_channels == K * in_channels`, where K is a positive integer, this operation is also known as depthwise convolution."
msgstr ""

#: megengine.module.conv.Conv2d:35 of
msgid "In other words, for an input of size :math:`(N, C_{in}, H_{in}, W_{in})`, a depthwise convolution with a depthwise multiplier `K`, can be constructed by arguments :math:`(in\\_channels=C_{in}, out\\_channels=C_{in} \\times K, ..., groups=C_{in})`."
msgstr ""

#: megengine.module.conv.Conv2d of
msgid "参数"
msgstr ""

#: megengine.module.conv.Conv2d:40 of
msgid "number of input channels."
msgstr ""

#: megengine.module.conv.Conv2d:42 of
msgid "number of output channels."
msgstr ""

#: megengine.module.conv.Conv2d:44 of
msgid "size of weight on spatial dimensions. If kernel_size is an :class:`int`, the actual kernel size would be ``(kernel_size, kernel_size)``."
msgstr ""

#: megengine.module.conv.Conv2d:48 of
msgid "stride of the 2D convolution operation. Default: 1"
msgstr ""

#: megengine.module.conv.Conv2d:50 of
msgid "size of the paddings added to the input on both sides of its spatial dimensions. Default: 0"
msgstr ""

#: megengine.module.conv.Conv2d:53 of
msgid "dilation of the 2D convolution operation. Default: 1"
msgstr ""

#: megengine.module.conv.Conv2d:55 of
msgid "number of groups into which the input and output channels are divided, so as to perform a ``grouped convolution``. When ``groups`` is not 1, ``in_channels`` and ``out_channels`` must be divisible by ``groups``, and the shape of weight should be ``(groups, out_channel // groups, in_channels // groups, height, width)``. Default: 1"
msgstr ""

#: megengine.module.conv.Conv2d:61 of
msgid "whether to add a bias onto the result of convolution. Default: True"
msgstr ""

#: megengine.module.conv.Conv2d:63 of
msgid "Supports `cross_correlation`. Default: `cross_correlation`"
msgstr ""

#: megengine.module.conv.Conv2d:65 of
msgid "When set to \"default\", no special requirements will be placed on the precision of intermediate results. When set to \"float32\", \"float32\" would be used for accumulator and intermediate result, but only effective when input and output are of float16 dtype."
msgstr ""

#: megengine.module.conv.Conv2d:70 of
msgid "\"zeros\", \"reflect\" or \"replicate\". Default: \"zeros\". Refer to :class:`~.module.padding.Pad` for more information."
msgstr ""

#: megengine.module.conv.Conv2d:75 of
msgid "``weight`` usually has shape ``(out_channels, in_channels, height, width)`` ,"
msgstr ""

#: megengine.module.conv.Conv2d:76 of
msgid "if groups is not 1, shape will be ``(groups, out_channels // groups, in_channels // groups, height, width)``"
msgstr ""

#: megengine.module.conv.Conv2d:77 of
msgid "``bias`` usually has shape ``(1, out_channels, *1)``"
msgstr ""

#: megengine.module.conv.Conv2d:80 of
msgid "实际案例"
msgstr ""

#: megengine.module.conv.Conv2d:92 of
msgid "Outputs:"
msgstr ""

#~ msgid "基类：:class:`megengine.module.conv._ConvNd`"
#~ msgstr "基类：:class:`megengine.module.conv._ConvNd`"

#~ msgid ""
#~ "\\text{out}(N_i, C_{\\text{out}_j}) = "
#~ "\\text{bias}(C_{\\text{out}_j}) +\n"
#~ "\\sum_{k = 0}^{C_{\\text{in}} - 1} "
#~ "\\text{weight}(C_{\\text{out}_j}, k) \\star "
#~ "\\text{input}(N_i, k)"
#~ msgstr ""

#~ msgid "Supports `CROSS_CORRELATION`. Default: `CROSS_CORRELATION`"
#~ msgstr "支持 `CROSS_CORRELATION`。默认：`CROSS_CORRELATION`"

#~ msgid ""
#~ ":obj:`__init__ <megengine.module.Conv2d.__init__>`\\ "
#~ "\\(in\\_channels\\, out\\_channels\\, kernel\\_size\\)"
#~ msgstr ""
#~ ":obj:`__init__ <megengine.module.Conv2d.__init__>`\\ "
#~ "\\(in\\_channels\\, out\\_channels\\, kernel\\_size\\)"

#~ msgid "param name"
#~ msgstr "参数名称"

#~ msgid "module's name, can be initialized by the ``kwargs`` parameter"
#~ msgstr "模块名称，子类的 ``kwargs`` 将会保存和传递此关键字参数。"

#~ msgid "rtype"
#~ msgstr ""

#~ msgid ":py:obj:`None`"
#~ msgstr ""

#~ msgid ""
#~ "\\text{out}(N_i, C_{\\text{out}_j}) = "
#~ "\\text{bias}(C_{\\text{out}_j}) +\n"
#~ "\\sum_{k = 0}^{C_{\\text{in}} - 1} "
#~ "\\text{weight}(C_{\\text{out}_j}, k) \\star "
#~ "\\text{input}(N_i, k)\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "\\text{H}_{out} = \\lfloor \\frac{\\text{H}_{in} "
#~ "+ 2 * \\text{padding[0]} -\n"
#~ "\\text{dilation[0]} * (\\text{kernel_size[0]} - "
#~ "1) - 1}{\\text{stride[0]}} + 1 \\rfloor"
#~ "\n"
#~ "\n"
#~ msgstr ""
#~ "\\text{H}_{out} = \\lfloor \\frac{\\text{H}_{in} "
#~ "+ 2 * \\text{padding[0]} -\n"
#~ "\\text{dilation[0]} * (\\text{kernel_size[0]} - "
#~ "1) - 1}{\\text{stride[0]}} + 1 \\rfloor"
#~ "\n"
#~ "\n"

#~ msgid ""
#~ "\\text{W}_{out} = \\lfloor \\frac{\\text{W}_{in} "
#~ "+ 2 * \\text{padding[1]} -\n"
#~ "\\text{dilation[1]} * (\\text{kernel_size[1]} - "
#~ "1) - 1}{\\text{stride[1]}} + 1 \\rfloor"
#~ "\n"
#~ "\n"
#~ msgstr ""
#~ "\\text{W}_{out} = \\lfloor \\frac{\\text{W}_{in} "
#~ "+ 2 * \\text{padding[1]} -\n"
#~ "\\text{dilation[1]} * (\\text{kernel_size[1]} - "
#~ "1) - 1}{\\text{stride[1]}} + 1 \\rfloor"
#~ "\n"
#~ "\n"

#~ msgid "参数"
#~ msgstr "参数"

#~ msgid ""
#~ "For instance, given an input of "
#~ "the size :math:`(N, C_{     ext{in}}, H,"
#~ " W)`, this layer generates an output"
#~ " of the size :math:`(N, C_{      "
#~ "ext{out}}, H_{  ext{out}}, W_{  ext{out}})`"
#~ " through the process described as "
#~ "below:"
#~ msgstr ""

#~ msgid ""
#~ "ext{out}(N_i, C_{       ext{out}_j}) =  "
#~ "ext{bias}(C_{   ext{out}_j}) +\n"
#~ "\\sum_{k = 0}^{C_{       ext{in}} - 1}"
#~ "   ext{weight}(C_{ ext{out}_j}, k) \\star   "
#~ "ext{input}(N_i, k)\n"
#~ "\n"
#~ msgstr ""

#~ msgid "input: :math:`(N, C_{       ext{in}}, H_{   ext{in}}, W_{   ext{in}})`"
#~ msgstr ""

#~ msgid ""
#~ "output: :math:`(N, C_{      ext{out}}, H_{"
#~ "  ext{out}}, W_{  ext{out}})` where"
#~ msgstr ""

#~ msgid ""
#~ "ext{H}_{out} = \\lfloor\n"
#~ "\n"
#~ msgstr ""

#~ msgid "rac{    ext{H}_{in} + 2 *       ext{padding[0]} -"
#~ msgstr ""

#~ msgid ""
#~ "ext{dilation[0]} * (    ext{kernel_size[0]} -"
#~ " 1) - 1}{  ext{stride[0]}} + 1"
#~ msgstr ""

#~ msgid "floor"
#~ msgstr ""

#~ msgid ""
#~ "ext{W}_{out} = \\lfloor\n"
#~ "\n"
#~ msgstr ""

#~ msgid "rac{    ext{W}_{in} + 2 *       ext{padding[1]} -"
#~ msgstr ""

#~ msgid ""
#~ "ext{dilation[1]} * (    ext{kernel_size[1]} -"
#~ " 1) - 1}{  ext{stride[1]}} + 1"
#~ msgstr ""

#~ msgid ""
#~ "In other words, for an input of"
#~ " size :math:`(N, C_{in}, H_{in}, W_{in})`,"
#~ " a depthwise convolution with a "
#~ "depthwise multiplier `K`, can be "
#~ "constructed by arguments "
#~ ":math:`(in\\_channels=C_{in}, out\\_channels=C_{in}      "
#~ "imes K, ..., groups=C_{in})`."
#~ msgstr ""

#~ msgid "param in_channels"
#~ msgstr ""

#~ msgid "param out_channels"
#~ msgstr ""

#~ msgid "param kernel_size"
#~ msgstr ""

#~ msgid "param stride"
#~ msgstr ""

#~ msgid "param padding"
#~ msgstr ""

#~ msgid "param dilation"
#~ msgstr ""

#~ msgid "param groups"
#~ msgstr ""

#~ msgid "param bias"
#~ msgstr ""

#~ msgid "param conv_mode"
#~ msgstr ""

#~ msgid "param compute_mode"
#~ msgstr ""

#~ msgid ""
#~ ":attr:`weight` usually has shape "
#~ "``(out_channels, in_channels, height, width)``,"
#~ msgstr ""

#~ msgid ":attr:`bias` usually has shape ``(1, out_channels, *1)``"
#~ msgstr ""

#~ msgid "Examples:"
#~ msgstr "例如："

#~ msgid ""
#~ "number of groups into which the "
#~ "input and output channels are divided,"
#~ " so as to perform a \"grouped "
#~ "convolution\". When ``groups`` is not 1,"
#~ " ``in_channels`` and ``out_channels`` must "
#~ "be divisible by ``groups``, and there"
#~ " would be an extra dimension at "
#~ "the beginning of the weight's shape. "
#~ "Default: 1"
#~ msgstr ""

#~ msgid "megengine.module.Conv2d"
#~ msgstr "megengine.module.Conv2d"

#~ msgid "Methods"
#~ msgstr "方法"

#~ msgid ":obj:`apply <megengine.module.Conv2d.apply>`\\ \\(fn\\)"
#~ msgstr ":obj:`apply <megengine.module.Conv2d.apply>`\\ \\(fn\\)"

#~ msgid ""
#~ "Applies function ``fn`` to all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "对当前模块中的所有模块应用函数 ``fn``，包括当前模块本身。"

#~ msgid ""
#~ ":obj:`buffers <megengine.module.Conv2d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`buffers <megengine.module.Conv2d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"

#~ msgid "Returns an iterable for the buffers of the module."
#~ msgstr "返回该模块中对于buffers的一个可迭代对象。"

#~ msgid ""
#~ ":obj:`calc_conv <megengine.module.Conv2d.calc_conv>`\\ "
#~ "\\(inp\\, weight\\, bias\\)"
#~ msgstr ""
#~ ":obj:`calc_conv <megengine.module.Conv2d.calc_conv>`\\ "
#~ "\\(inp\\, weight\\, bias\\)"

#~ msgid ":obj:`children <megengine.module.Conv2d.children>`\\ \\(\\*\\*kwargs\\)"
#~ msgstr ":obj:`children <megengine.module.Conv2d.children>`\\ \\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "submodules that are direct attributes of"
#~ " this module."
#~ msgstr "返回一个可迭代对象，可遍历所有属于当前模块的直接属性的子模块。"

#~ msgid ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.Conv2d.disable_quantize>`\\ \\(\\[value\\]\\)"
#~ msgstr ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.Conv2d.disable_quantize>`\\ \\(\\[value\\]\\)"

#~ msgid ""
#~ "Sets ``module``'s ``quantize_disabled`` attribute"
#~ " and return ``module``."
#~ msgstr "设置 ``module`` 的 ``quantize_diabled`` 属性，并返回 ``module`` 。"

#~ msgid ":obj:`eval <megengine.module.Conv2d.eval>`\\ \\(\\)"
#~ msgstr ":obj:`eval <megengine.module.Conv2d.eval>`\\ \\(\\)"

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``False``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``False`` ，并将其切换为推理模式。"

#~ msgid ":obj:`forward <megengine.module.Conv2d.forward>`\\ \\(inp\\)"
#~ msgstr ":obj:`forward <megengine.module.Conv2d.forward>`\\ \\(inp\\)"

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.Conv2d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"
#~ msgstr ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.Conv2d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"

#~ msgid ""
#~ "Loads a given dictionary created by "
#~ ":func:`state_dict` into this module."
#~ msgstr "加载一个参数字典，这个字典通常使用 :func:`state_dict` 得到。"

#~ msgid ":obj:`modules <megengine.module.Conv2d.modules>`\\ \\(\\*\\*kwargs\\)"
#~ msgstr ":obj:`modules <megengine.module.Conv2d.modules>`\\ \\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "返回一个可迭代对象，可以遍历当前模块中的所有模块，包括其本身。"

#~ msgid ""
#~ ":obj:`named_buffers <megengine.module.Conv2d.named_buffers>`\\"
#~ " \\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`named_buffers <megengine.module.Conv2d.named_buffers>`\\"
#~ " \\(\\[prefix\\, recursive\\]\\)"

#~ msgid ""
#~ "Returns an iterable for key buffer "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the buffer."
#~ msgstr ""
#~ "返回可遍历模块中 key 与 buffer 的键值对的可迭代对象，其中 "
#~ "``key`` 为从该模块至 buffer 的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_children <megengine.module.Conv2d.named_children>`\\"
#~ " \\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`named_children <megengine.module.Conv2d.named_children>`\\"
#~ " \\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable of key-submodule "
#~ "pairs for all the submodules that "
#~ "are direct attributes of this module,"
#~ " where 'key' is the attribute name"
#~ " of submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历属于当前模块的直接属性的所有子模块（submodule）与键（key）组成的”key-"
#~ "submodule”对，其中'key'是子模块对应的属性名。"

#~ msgid ""
#~ ":obj:`named_modules <megengine.module.Conv2d.named_modules>`\\"
#~ " \\(\\[prefix\\]\\)"
#~ msgstr ""
#~ ":obj:`named_modules <megengine.module.Conv2d.named_modules>`\\"
#~ " \\(\\[prefix\\]\\)"

#~ msgid ""
#~ "Returns an iterable of key-module "
#~ "pairs for all the modules within "
#~ "this module, including itself, where "
#~ "'key' is the dotted path from this"
#~ " module to the submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历当前模块包括自身在内的所有其内部模块所组成的key-"
#~ "module键-模块对，其中'key'是从当前模块到各子模块的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.Conv2d.named_parameters>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.Conv2d.named_parameters>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"

#~ msgid ""
#~ "Returns an iterable for key "
#~ ":class:`~.Parameter` pairs of the module, "
#~ "where ``key`` is the dotted path "
#~ "from this module to the "
#~ ":class:`~.Parameter`."
#~ msgstr ""
#~ "返回一个可迭代对象，可以遍历当前模块中key与 :class:`~.Parameter` 组成的键值对。其中"
#~ "  ``key`` 是从模块到 :class:`~.Parameter` 的点路径（dotted"
#~ " path）。"

#~ msgid ""
#~ ":obj:`named_tensors <megengine.module.Conv2d.named_tensors>`\\"
#~ " \\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key tensor "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the tensor."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`parameters <megengine.module.Conv2d.parameters>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`parameters <megengine.module.Conv2d.parameters>`\\ "
#~ "\\(\\[recursive\\]\\)"

#~ msgid "Returns an iterable for the :class:`~.Parameter` of the module."
#~ msgstr "返回一个可迭代对象，遍历当前模块中的所有 :class:`~.Parameter`"

#~ msgid ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.Conv2d.register_forward_hook>`\\ \\(hook\\)"
#~ msgstr ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.Conv2d.register_forward_hook>`\\ \\(hook\\)"

#~ msgid "Registers a hook to handle forward results."
#~ msgstr "给模块输出注册一个回调函数。"

#~ msgid ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.Conv2d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.Conv2d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"

#~ msgid "Registers a hook to handle forward inputs."
#~ msgstr "给模块输入注册一个回调函数。"

#~ msgid ""
#~ ":obj:`replace_param <megengine.module.Conv2d.replace_param>`\\"
#~ " \\(params\\, start\\_pos\\[\\, seen\\]\\)"
#~ msgstr ""
#~ ":obj:`replace_param <megengine.module.Conv2d.replace_param>`\\"
#~ " \\(params\\, start\\_pos\\[\\, seen\\]\\)"

#~ msgid ""
#~ "Replaces module's parameters with ``params``,"
#~ " used by :class:`~.ParamPack` to"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.Conv2d.reset_parameters>`\\ \\(\\)"
#~ msgstr ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.Conv2d.reset_parameters>`\\ \\(\\)"

#~ msgid ""
#~ ":obj:`state_dict <megengine.module.Conv2d.state_dict>`\\ "
#~ "\\(\\[rst\\, prefix\\, keep\\_var\\]\\)"
#~ msgstr ""
#~ ":obj:`state_dict <megengine.module.Conv2d.state_dict>`\\ "
#~ "\\(\\[rst\\, prefix\\, keep\\_var\\]\\)"

#~ msgid ""
#~ ":obj:`tensors <megengine.module.Conv2d.tensors>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Tensor` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`train <megengine.module.Conv2d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`train <megengine.module.Conv2d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``mode``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``mode``。"

#~ msgid ":obj:`zero_grad <megengine.module.Conv2d.zero_grad>`\\ \\(\\)"
#~ msgstr ":obj:`zero_grad <megengine.module.Conv2d.zero_grad>`\\ \\(\\)"

#~ msgid "Sets all parameters' grads to zero"
#~ msgstr "将所有参数的梯度置0。"

