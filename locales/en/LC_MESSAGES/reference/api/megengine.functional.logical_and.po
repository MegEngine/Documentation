msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-24 23:51+0800\n"
"PO-Revision-Date: 2023-04-21 09:18\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/api/megengine.functional.logical_and.po\n"
"X-Crowdin-File-ID: 9159\n"

#: ../../source/reference/api/megengine.functional.logical_and.rst:2
msgid "megengine.functional.logical\\_and"
msgstr ""

#: megengine.functional.elemwise.logical_and:1 of
msgid "Element-wise logical AND."
msgstr ""

#: megengine.functional.elemwise.logical_and:3 of
msgid "Computes the logical AND for each element :math:`x_i` of the input tensor :math:`x` with the respective element :math:`y_i` of the input tensor :math:`y`."
msgstr ""

#: megengine.functional.elemwise.logical_and of
msgid "参数"
msgstr ""

#: megengine.functional.elemwise.logical_and:6 of
msgid "first input tensor. Should have a boolean data type."
msgstr ""

#: megengine.functional.elemwise.logical_and:7 of
msgid "second input tensor. Must be compatible with :math:`x` (see :ref:`broadcasting-rule` ). Should have a boolean data type."
msgstr ""

#: megengine.functional.elemwise.logical_and of
msgid "返回"
msgstr ""

#: megengine.functional.elemwise.logical_and:10 of
msgid "a tensor containing the result of the element-wise logical AND operation. The returned tensor must have a data type of ``bool``."
msgstr ""

#: megengine.functional.elemwise.logical_and:15 of
msgid ":func:`~.logical_or`, :func:`~.logical_not`, :func:`~.logical_xor`"
msgstr ""

#: megengine.functional.elemwise.logical_and:18 of
msgid "实际案例"
msgstr ""

#: megengine.functional.elemwise.logical_and:22 of
msgid "Element-wise logical AND:"
msgstr ""

#: megengine.functional.elemwise.logical_and:29 of
msgid "The ``&`` operator can be used as a shorthand for ``F.logical_and`` on boolean tensors."
msgstr ""

