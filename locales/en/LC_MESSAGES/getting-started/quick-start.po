
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-26 18:42+0800\n"
"PO-Revision-Date: 2021-04-20 09:36+0000\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/getting-started/quick-start.ipynb:9
#, fuzzy
msgid "MegEngine 快速上手"
msgstr "Tianyuan MegEngine quick start"

#: ../../source/getting-started/quick-start.ipynb:21
msgid ""
"|image0| `在官网查看 <https://megengine.org.cn/doc/stable/zh/getting-started"
"/quick-start.html>`__"
msgstr ""

#: ../../source/getting-started/quick-start.ipynb:21
msgid "|image1| `在 MegStudio 运行 <https://studio.brainpp.com/project/5424>`__"
msgstr ""

#: ../../source/getting-started/quick-start.ipynb:21
msgid ""
"|image2| `在 GitHub 查看 "
"<https://github.com/MegEngine/Documentation/blob/main/source/getting-"
"started/quick-start.ipynb>`__"
msgstr ""

#: ../../source/getting-started/quick-start.ipynb:25
msgid "注意：本教程假定你具备一定的 Python 编程基础，并了解深度学习的基础概念。"
msgstr ""
"Note：This tutorial assumes that you have a certain foundation of Python "
"programming and understand the basic concepts of deep learning."

#: ../../source/getting-started/quick-start.ipynb:27
#, fuzzy
msgid ""
"我们将向你介绍使用 MegEngine 实现的完整的机器学习工作流程，以便你快速地熟悉 MegEngine 常见 `Python API "
"<https://megengine.org.cn/doc/stable/zh/reference/index.html>`__ 的使用方式。"
msgstr ""
"We will introduce you to the complete machine learning workflow "
"implemented by Tianyuan MegEngine, so that you can quickly become "
"familiar with the common usage of MegEngine `Python API "
"<https://megengine.org.cn/doc/stable/zh/reference/index.html>`__."

#: ../../source/getting-started/quick-start.ipynb:29
msgid ""
"请先运行下面的代码，检验你的环境中是否已经安装好 MegEngine（\\ `访问官网安装教程 "
"<https://megengine.org.cn/install/>`__\\ ）："
msgstr ""
"Please run the following code first to verify whether MegEngine has been "
"installed in your environment (\\ `Visit the official website "
"installation tutorial <https://megengine.org.cn/install/>`__\\)："

#: ../../source/getting-started/quick-start.ipynb:75
#, fuzzy
msgid "接下来我们将通过 MNIST 手写数字识别的案例帮助你快速上手 MegEngine 的使用。"
msgstr ""
"Next, we will use the case of MNIST handwritten digit recognition to help"
" you quickly get started using Tianyuan MegEngine."

#: ../../source/getting-started/quick-start.ipynb:78
msgid "数据的加载和预处理"
msgstr "Data loading and preprocessing"

#: ../../source/getting-started/quick-start.ipynb:80
msgid "数据的加载和预处理往往会耗费大量的精力， MegEngine 提供了一系列接口来规范化这些处理工作："
msgstr ""
"And pre-loading data tend to spend a lot of energy, MegEngine provides a "
"set of standardized interfaces to these processes work："

#: ../../source/getting-started/quick-start.ipynb:82
msgid ""
"`megengine.data.dataset.Dataset "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.data.dataset.Dataset.html>`__"
" 是 MegEngine 中表示数据集的抽象类，存储样本和相应的标签；"
msgstr ""
"`megengine.data.dataset.Dataset "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.data.dataset.Dataset.html>`__"
" is an abstract class representing a data set in MegEngine, storing "
"samples and corresponding labels;"

#: ../../source/getting-started/quick-start.ipynb:83
msgid ""
"`megengine.data.DataLoader "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.data.DataLoader.html>`__"
" 负责根据传入的 ``Dataset`` 等参数生成一个可迭代的对象。"
msgstr ""
"`megengine.data.DataLoader "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.data.DataLoader.html>`__"
" is responsible for generating an iterable object based on the passed "
"``Dataset`` and other parameters."

#: ../../source/getting-started/quick-start.ipynb:85
msgid ""
"在 `megengine.data.dataset "
"<https://megengine.org.cn/doc/stable/zh/reference/data.html#dataset>`__ "
"模块中为用户提供了非常多经典的数据集，比如本次教程中用到的 `MNIST "
"<http://yann.lecun.com/exdb/mnist/>`__ 数据集："
msgstr ""
"In megengine.data.dataset ` "
"<https://megengine.org.cn/doc/stable/zh/reference/data.html#dataset>provides"
" the user module __` very classic multiple datasets, such as used in this"
" tutorial MNIST ' <http://yann.lecun.com/exdb/mnist/>' __ dataset："

#: ../../source/getting-started/quick-start.ipynb:143
msgid ""
"对于如何加载自定义的 ``Dataset`` ，请参考用户指南 `利用 Dataset 封装一个数据集 "
"<https://megengine.org.cn/doc/stable/zh/user-guide/model-"
"development/data.html>`__ 。"
msgstr ""

#: ../../source/getting-started/quick-start.ipynb:145
msgid "将 ``Dataset`` 作为参数传给 ``DataLoader`` 时，我们还需要为其指定数据预处理和抽样逻辑："
msgstr ""
"When `` Dataset`` as a parameter to `` DataLoader``, we also need to "
"assign the data pre-processing and sampling logic："

#: ../../source/getting-started/quick-start.ipynb:147
msgid ""
"`megengine.data.transfrom "
"<https://megengine.org.cn/doc/stable/zh/reference/data.html#transform>`__"
" 提供了常见的数据变换操作，作为预处理手段，支持 ``Compose`` 组合；"
msgstr ""
"`megengine.data.transfrom "
"<https://megengine.org.cn/doc/stable/zh/reference/data.html#transform>`__"
" provides common data transformation operations, as a preprocessing "
"method, supports ``Compose`` combination;"

#: ../../source/getting-started/quick-start.ipynb:148
msgid ""
"`megengine.data.sampler "
"<https://megengine.org.cn/doc/stable/zh/reference/data.html#sampler>`__ "
"提供了常见的采样方法，如顺序采样和随机采样等，可指定 ``batch_size`` 参数。"
msgstr ""
"`megengine.data.sampler "
"<https://megengine.org.cn/doc/stable/zh/reference/data.html#sampler>`__ "
"Provides common sampling methods, such as sequential sampling and random "
"sampling, etc. The ``batch_size`` parameter can be specified."

#: ../../source/getting-started/quick-start.ipynb:223
msgid "定义网络结构"
msgstr "Define the network structure"

#: ../../source/getting-started/quick-start.ipynb:225
msgid ""
"在 MegEngine 中定义网络最常见的方式是创建一个继承自 `megengine.module.Module "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.module.Module.html>`__"
" 的类，接着："
msgstr ""
"The most common way to define a network in MegEngine is to create a "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.module.Module.html>`__,"
" then："

#: ../../source/getting-started/quick-start.ipynb:227
msgid ""
"在 ``__init__`` 中定义网络的层，各类算子可以在 `functional "
"<https://megengine.org.cn/doc/stable/zh/reference/functional.html>`__ 和 "
"`module <https://megengine.org.cn/doc/stable/zh/reference/module.html>`__"
" 模块中找到；"
msgstr ""
"In the layer where the network is defined in ``__init__``, various "
"operators can be found in the `functional "
"<https://megengine.org.cn/doc/stable/zh/reference/functional.html>`__ and"
" `module "
"<https://megengine.org.cn/doc/stable/zh/reference/module.html>`__ "
"modules;"

#: ../../source/getting-started/quick-start.ipynb:228
msgid "通过 ``forward`` 方法描述数据通过网络前向传播时依次执行的算子，从而就定义了网络的结构。"
msgstr ""
"The ``forward'' method describes the operators that are executed in "
"sequence when data is forwarded through the network, thereby defining the"
" structure of the network."

#: ../../source/getting-started/quick-start.ipynb:328
msgid "定义损失函数、优化器"
msgstr "Define loss function, optimizer"

#: ../../source/getting-started/quick-start.ipynb:330
msgid "为了实现对模型的训练（即对模型中参数的优化），我们还需要定义："
msgstr ""
"In order to achieve the training of the model (that is, the optimization "
"of the parameters in the model), we also need to define："

#: ../../source/getting-started/quick-start.ipynb:332
msgid ""
"损失函数（Loss Function），大部分常见的损失函数实现在 `megengine.function.loss "
"<https://megengine.org.cn/doc/stable/zh/reference/functional.html#loss>`__"
" 模块中；"
msgstr ""
"Loss Function, most common loss functions are implemented in the "
"`megengine.function.loss "
"<https://megengine.org.cn/doc/stable/zh/reference/functional.html#loss>`__"
" module;"

#: ../../source/getting-started/quick-start.ipynb:333
msgid ""
"优化器（Optimizer），常见的优化器实现在 `megengine.optimizer "
"<https://megengine.org.cn/doc/stable/zh/reference/optimizer.html>`__, "
"且支持不同的优化策略；"
msgstr ""
"Optimizer (Optimizer), the common optimizer is implemented in "
"`megengine.optimizer "
"<https://megengine.org.cn/doc/stable/zh/reference/optimizer.html>`__, and"
" supports different optimization strategies;"

#: ../../source/getting-started/quick-start.ipynb:334
msgid ""
"MegEngine 的自动求导功能由 `megengine.autodiff "
"<https://megengine.org.cn/doc/stable/zh/reference/autodiff.html>`__ "
"模块实现，其中 `GradManager "
"<https://megengine.org.cn/doc/stable/zh/reference/autodiff.html#gradmanager>`__"
" 负责管理梯度。"
msgstr ""
"The automatic derivative function of MegEngine is "
"<https://megengine.org.cn/doc/stable/zh/reference/autodiff.html>`__ "
"module, where `GradManager "
"<https://megengine.org.cn/doc/stable/zh/reference/autodiff.html#gradmanager>`__"
" is responsible for managing the gradient."

#: ../../source/getting-started/quick-start.ipynb:361
msgid "模型训练"
msgstr "Model training"

#: ../../source/getting-started/quick-start.ipynb:363
msgid ""
"MegEngine 中的计算默认以张量（\\ `Tensor "
"<https://megengine.org.cn/doc/stable/zh/reference/tensor.html>`__\\ "
"）作为基础数据结构，因此记得将我们输入的数据转化为 Tensor."
msgstr ""
"The calculation in MegEngine uses tensor (\\ `Tensor "
"<https://megengine.org.cn/doc/stable/zh/reference/tensor.html>`__\\) as "
"the basic data structure by default, so remember to convert the data we "
"input into Tensor."

#: ../../source/getting-started/quick-start.ipynb:365
msgid "当检测到 GPU 环境时，MegEngine 会自动将相应的计算过程在 GPU 中执行 **（无需手动指定设备）** 从而实现加速。"
msgstr ""
"When the GPU environment is detected, MegEngine will automatically "
"execute the corresponding calculation process in the GPU** (no need to "
"manually specify the device)** to achieve acceleration."

#: ../../source/getting-started/quick-start.ipynb:366
msgid ""
"如果需要查询 Tensor 所在设备，可以使用 `Tensor.device "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.Tensor.device.html>`__"
" ;"
msgstr ""
"If you need to query the device where Tensor is located, you can use "
"`Tensor.device "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.Tensor.device.html>`__;"

#: ../../source/getting-started/quick-start.ipynb:367
msgid ""
"如果需要改变 Tensor 所在设备，可以使用 `Tensor.to "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.Tensor.to.html>`__"
" 或 `functional.copy "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.functional.copy.html>`__"
" ."
msgstr ""
"If you need to change the device where the Tensor is located, you can use"
" `Tensor.to "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.Tensor.to.html>`__"
" or `functional.copy "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.functional.copy.html>`__."

#: ../../source/getting-started/quick-start.ipynb:369
msgid "我们设置 10 个训练周期，整个过程中将对训练数据集分批次进行预测，根据反向传播算法更新模型的参数。"
msgstr ""
"We set up 10 training cycles, the training data set will be predicted in "
"batches during the whole process, and the parameters of the model will be"
" updated according to the backpropagation algorithm."

#: ../../source/getting-started/quick-start.ipynb:445
msgid ""
"在 MegEngine 中计算图默认为动态图模式，可通过 `megengine.jit.trace "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.jit.trace.html>`__"
" 非常便捷地 `将动态图转为静态图 <https://megengine.org.cn/doc/stable/zh/user-guide"
"/model-development/trace.html#trace>`__\\ 。"
msgstr ""
"In MegEngine, the calculation graph defaults to the dynamic graph mode. "
"You can use `megengine.jit.trace "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.jit.trace.html>`__"
" to convert the dynamic graph to the static graph very conveniently. "
"<https://megengine.org.cn/doc/stable/zh/user-guide/model-"
"development/trace.html#trace>`__\\."

#: ../../source/getting-started/quick-start.ipynb:457
msgid "模型的保存与加载"
msgstr "Model saving and loading"

#: ../../source/getting-started/quick-start.ipynb:459
msgid ""
"在 MegEngine 中通过使用 `megengine.save "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.save.html>`__"
" 和 `megengine.load "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.load.html>`__"
" 进行模型的保存与加载。"
msgstr ""
"Save and load the model by using `megengine.save "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.save.html>`__"
" and `megengine.load "
"<https://megengine.org.cn/doc/stable/zh/reference/api/megengine.load.html>"

#: ../../source/getting-started/quick-start.ipynb:461
msgid "我们首先将训练好的模型的保存到本地："
msgstr "We first save the trained model to local："

#: ../../source/getting-started/quick-start.ipynb:482
msgid "接着我们可以加载本地的模型文件，在测试集上进行预测，以检测模型的性能。"
msgstr ""
"Then we can load the local model file and make predictions on the test "
"set to test the performance of the model."

#~ msgid "对于如何加载自定义的 ``Dataset`` ，请参考用户指南 利用 Dataset 封装一个数据集。"
#~ msgstr ""
#~ "For how to load a custom "
#~ "``Dataset``, please refer to the user"
#~ " guide to encapsulate a data set "
#~ "with Dataset."

