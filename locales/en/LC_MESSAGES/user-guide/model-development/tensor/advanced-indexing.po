msgid ""
msgstr ""
"Project-Id-Version: megengine-documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-17 20:15+0800\n"
"PO-Revision-Date: 2023-04-20 08:43\n"
"Last-Translator: \n"
"Language-Team: English\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: megengine-documentation\n"
"X-Crowdin-Project-ID: 582157\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /dev/locales/en/LC_MESSAGES/user-guide/model-development/tensor/advanced-indexing.po\n"
"X-Crowdin-File-ID: 1263\n"
"Language: en_US\n"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:5
msgid "Tensor 高级索引"
msgstr "Tensor advanced index"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:9
msgid "在阅读这部分的内容前，你需要 :ref:`tensor-slice` 。"
msgstr "Before reading this part, you need :ref:`tensor-slice`."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:11
msgid "NumPy 用户请注意！"
msgstr "Attention NumPy users!"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:14
msgid "不能将 NumPy 中存在的一些概念和设计直接应用于 MegEngine."
msgstr "Some concepts and designs existing in NumPy cannot be directly applied to MegEngine."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:17
msgid "和 NumPy 索引对比"
msgstr "Compared with NumPy index"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:21
msgid "在 MegEngine 中，想要 :ref:`access-tensor-element` ，可以使用标准的 ``x[obj]`` 语法。 看上去一切都和 NumPy 很相似，后者的官方文档中也对 :class:`~.numpy.ndarray` 的各种索引方式都 `进行了解释 <https://numpy.org/doc/stable/reference/arrays.indexing.html>`_ 。 但 MegEngine 的 Tensor 实现和 NumPy 还是略有不同，如果不清楚某些细节，可能无法对一些现象做出解释。"
msgstr "In MegEngine, if you want :ref:`access-tensor-element`, you can use the standard ``x[obj]`` syntax. It seems that everything is very similar to NumPy. The official documentation of the latter also explains the various indexing methods :class: <https://numpy.org/doc/stable/reference/arrays.indexing.html>`_. However, MegEngine's Tensor implementation is still slightly different from NumPy. If you don't know some details, you may not be able to explain some phenomena."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:28
msgid "索引得到的对象不同"
msgstr "Indexed objects are different"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:34
#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:97
msgid "MegEngine"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:43
#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:104
msgid "NumPy"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:52
msgid "出现这种情况的原因是，在 NumPy 中使用索引时，得到的是原数组的 `视图（View） <https://numpy.org/doc/stable/reference/generated/numpy.ndarray.view.html>`_ 。 改变视图中的元素，原始数组中的元素也会发生变化 —— 这是很多 NumPy 用户初学时容易困扰的地方。 而在 MegEngine 中没有视图 ``view`` 这一属性， 通过索引或切片得到的元素或子 Tensor 和原 Tensor 占用的是不同的内存区域。"
msgstr "The reason for this is that when using indexing in NumPy, you get the `View (View) <https://numpy.org/doc/stable/reference/generated/numpy.ndarray.view.html>`_ of the original array. Changing the elements in the view, the elements in the original array will also change-this is a place where many NumPy users are prone to confusion when they learn. In MegEngine, there is no view ``view`` attribute. The element or sub-Tensor obtained by indexing or slicing and the original Tensor occupy a different memory area."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:58
msgid "在其它地方的一些设计，二者还是一致的，接下来我们将进行介绍。"
msgstr "In some designs in other places, the two are still the same, and we will introduce them next."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:63
msgid "切片索引不会降低维度"
msgstr "Slice index does not reduce dimensionality"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:65
msgid "MegEngine 和 NumPy 在进行切片时，都不会改变对象 :ref:`tensor-ndim` ："
msgstr "Both MegEngine and NumPy will not change the object when slicing :ref:`tensor-ndim` ："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:73
msgid "整个过程中，切片得到的都是一个 ``ndim=2`` 的 Tensor."
msgstr "In the whole process, the slice obtained is a Tensor with ``ndim=2''."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:75
msgid "执行 ``M[1:2]`` 得到的结果是 ``[[4, 5, 6]]`` 而不是 ``[4, 5, 6]``."
msgstr "The result of executing ``M[1:2]`` is ``[[4, 5, 6])'' instead of ``[4, 5, 6]``."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:76
msgid "对 ``[[4, 5, 6]]`` 进行 ``[0:1]`` 切片，得到的还是 ``[[4, 5, 6]]``."
msgstr "To slice ``[[4, 5, 6]]`` with ``[0:1]``, the result is still ``[[4, 5, 6]]``."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:78
msgid "错误的理解思路可能是这样的："
msgstr "The wrong understanding may be like this："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:80
msgid "执行 ``M[1:2]`` 得到的结果是 ``[4, 5, 6]``. —— 错！切片不会降维！"
msgstr "The result of executing ``M[1:2]`` is ``[4, 5, 6]``. —— Wrong! Slicing will not reduce dimensionality!"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:81
msgid "对 ``[4, 5, 6]`` 进行 ``[0:1]`` 切片，得到的是 ``4``. —— 降维了，因此也不对！"
msgstr "Slice ``[0:1]`` on ``[4, 5, 6]``, and get ``4``. —— Dimensionality reduction, so it's not right!"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:85
msgid "切片的作用是从整体中取出一部分，因此不会产生降低维度的行为。"
msgstr "The function of the slice is to take a part from the whole, so it will not produce the behavior of reducing the dimensionality."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:86
msgid "如果你希望切片操作后能去掉冗余的维度，可以使用 :func:`~.squeeze` ."
msgstr "If you want to remove redundant dimensions after slicing, you can use :func:`~.squeeze`."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:89
msgid "都可以使用数组索引"
msgstr "Can use array index"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:91
msgid "实际上除了切片索引，我们还可以使用数组（列表）进行索引："
msgstr "In fact, in addition to the slice index, we can also use an array (list) for indexing："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:111
msgid "此时列表的长度对应了被索引的元素的个数，在一些情况下这种机制十分有帮助。"
msgstr "At this time, the length of the list corresponds to the number of indexed elements. In some cases, this mechanism is very helpful."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:113
msgid "此时 NumPy 将不会生成原始数组的视图，与 MegEngine 的逻辑一致。"
msgstr "At this time, NumPy will not generate a view of the original array, which is consistent with the logic of MegEngine."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:115
msgid "注意语法细节，一些用户容易将列表索引写成如下形式："
msgstr "Pay attention to the grammatical details, some users are easy to write the list index as the following form："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:121
msgid "实际上这是对 Tensor 的 n 个维度分别进行索引的语法。引出了下一小节的解释 ——"
msgstr "In fact, this is the syntax for indexing the n dimensions of Tensor separately. Leads to the explanation of the next section-"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:126
msgid "在多个维度进行索引"
msgstr "Index in multiple dimensions"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:128
msgid "以下面这个由矩阵（2 维数组） :math:`M` 表示的 Tensor 为例："
msgstr "Take the following Tensor represented by the matrix (2-dimensional array) :math:`M` as an example："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:130
msgid "M =\n"
"\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     4 & 5 & \\color{blue}{6} \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"\\quad\n"
"M_{(1,2)} = 6"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:141
msgid "虽然我们可以使用 ``M[1][2]`` 这样的语法得到 6 这个值，但效率并不高（参考 :ref:`access-tensor-element` 的解释）。"
msgstr "Although we can use[1][2]`` to get the value of 6, but the efficiency is not high (refer to :ref:`access-tensor-element`)."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:145
msgid "实际上 Tensor 支持在多个维度直接进行索引；"
msgstr "In fact, Tensor supports direct indexing in multiple dimensions;"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:146
msgid "语法使用 ``,`` 进行分隔，而没有必要使用多个方括号 ``[]`` ."
msgstr "The syntax uses ``,'' to separate, and there is no need to use multiple square brackets ``[]``."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:152
msgid "可以理解成，在第 0 轴索引值为 1，第 1 轴索引值为 2 的位置去直接访问元素。"
msgstr "It can be understood that the element is directly accessed at the position where the index value of the 0th axis is 1, and the index value of the 1st axis is 2."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:154
msgid "推广到一般情况，在访问 n 维 Tensor （假定为 :math:`T` ）的特定某个元素时，可以使用如下语法："
msgstr "To generalize to the general case, when accessing :math:`T`), the following syntax can be used:："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:156
msgid "T_{[i_1, i_2, \\ldots i_n]}"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:160
msgid "即我们要提供 :math:`i_1, i_2, \\ldots ,i_n` 共 n 个索引值，此时不需要层层降维索引，而是直接得到对应元素。"
msgstr "That is, we need to provide :math:`i_1, i_2, \\ldots, i_n`. At this time, there is no need to reduce the dimensionality index, but to get the corresponding element directly."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:162
msgid "如果提供的索引数组个数不足 n, 则需要了解 :ref:`default-indexing` 。"
msgstr "If the number of index arrays provided is less than n, you need to know :ref:`default-indexing`."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:167
msgid "结合数组索引使用"
msgstr "Used in conjunction with array index"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:169
msgid "对于有 n 个维度的 Tensor, 我们可以传入 n 个列表来进行索引："
msgstr "For a Tensor with n dimensions, we can pass in n lists for indexing："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:178
msgid "需要注意的是，数组的长度需要一致，数组长度表示需要被索引的元素个数；"
msgstr "It should be noted that the length of the array needs to be consistent, and the length of the array indicates the number of elements that need to be indexed;"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:180
msgid "如果提供的索引个数不足 n, 则需要了解 :ref:`default-indexing` 。"
msgstr "If the number of provided indexes is less than n, you need to know :ref:`default-indexing`."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:184
msgid "NumPy 官网文档中对 `整数列表索引（Integer array indexing） <https://numpy.org/doc/stable/reference/arrays.indexing.html#integer-array-indexing>`_ 进行了更详细的说明；"
msgstr "NumPy official website documents `Integer array indexing <https://numpy.org/doc/stable/reference/arrays.indexing.html#integer-array-indexing>`_ in more detail;"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:187
msgid "除了整数列表索引外，MegEngine 还支持和 NumPy 一致的 `布尔列表索引 <https://numpy.org/doc/stable/reference/arrays.indexing.html#boolean-array-indexing>`_ 。"
msgstr "In addition to a list of integers index outside, MegEngine also supports Boolean and consistent list index NumPy ` <https://numpy.org/doc/stable/reference/arrays.indexing.html#boolean-array-indexing>` _."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:194
msgid "在多个维度进行切片"
msgstr "Slice in multiple dimensions"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:197
msgid "在某个维度上进行索引，除了索引特定元素以外，还可以进行切片操作，来获取特定部分元素。"
msgstr "Indexing on a certain dimension, in addition to indexing specific elements, you can also perform slicing operations to obtain specific parts of the elements."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:199
msgid "既然我们可以在多个维度进行索引，自然地，我们可以从多个维度进行切片；"
msgstr "Since we can index in multiple dimensions, naturally, we can slice from multiple dimensions;"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:200
msgid "问题在于，用户容易忽视 :ref:`slice-will-not-reduce-dim` 这一特点，尤其是和多个 ``[]`` 使用时。"
msgstr "The problem is that users tend to ignore :ref:`slice-will-not-reduce-dim`, especially when used with multiple ``[]``."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:202
msgid "现在需要从下面这个 2 维 Tensor 中切出蓝色部分的元素："
msgstr "Now we need to cut out the blue part of the element："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:204
msgid "M =\n"
"\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     \\color{blue}{4} & \\color{blue}{5} & 6 \\\\\n"
"     \\color{blue}{7} & \\color{blue}{8} & 9 \\\\\n"
"\\end{bmatrix}"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:213
msgid "一些人会写成 ``M[1:3][0:2]`` , 此时将得到非预期结果："
msgstr "Some people will write it as ``M[1:3][0:2]'', and you will get unexpected results at this time："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:219
msgid "这是因为 ``[]`` 操作是顺序进行解释的，它背后的逻辑顺序是："
msgstr "This is because the ``[]'' operation is explained in order, and the logical order behind it is："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:221
msgid "\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"_{\\downarrow{\\text{1:3}}}\n"
"=\n"
"\\begin{bmatrix}\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"\\quad\n"
"\\begin{bmatrix}\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"_{\\downarrow{\\text{0:2}}}\n"
"=\n"
"\\begin{bmatrix}\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}"
msgstr "\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"_{\\downarrow{\\text{1:3}}}\n"
"=\n"
"\\begin{bmatrix}\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"\\quad\n"
"\\begin{bmatrix}\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"_{\\downarrow {\\text{0:2}}}\n"
"=\n"
"\\begin{bmatrix}\n"
"     4 & 5 & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:256
msgid "由于切片操作并不会降低维度，所以上面的写法等于每次都在 axis=0 进行切片。"
msgstr "Since the slicing operation does not reduce the dimensionality, the above writing is equivalent to slicing at axis=0 every time."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:260
msgid "如果你不清楚 axis 的概念，可以参考 :ref:`tensor-axes` 。"
msgstr "If you are not clear about the concept of axis, you can refer to :ref:`tensor-axes`."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:262
msgid "正确的做法是像 :ref:`multi-dim-indexing` 一样，使用 ``,`` 对维度进行区分："
msgstr "The correct approach is like :ref:`Multi-Dim-indexing`, the use of` `,` `to distinguish dimensions："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:268
msgid "可以理解成在第 0 轴使用 ``1:3`` 切片，在第 1 轴使用 ``0:2`` 切片，求它们的交集："
msgstr "It can be understood as using the ``1:3'' slice on the 0th axis and the ``0:2'' slice on the 1st axis, and find their intersection："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:270
msgid "\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     \\color{red}{4} & \\color{red}{5} & \\color{red}{6}\\\\\n"
"     \\color{red}{7} & \\color{red}{8} & \\color{red}{9}\\\\\n"
"\\end{bmatrix}\n"
"_{\\downarrow{\\text{1:3}}}\n"
"\\cap\n"
"\\begin{bmatrix}\n"
"     \\color{green}{1} & \\color{green}{2} & 3 \\\\\n"
"     \\color{green}{4} & \\color{green}{5} & 6 \\\\\n"
"     \\color{green}{7} & \\color{green}{8} & 9 \\\\\n"
"\\end{bmatrix}\n"
"_{\\xrightarrow{\\text{0:2}}}\n"
"=\n"
"\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     \\color{blue}{4} & \\color{blue}{5} & 6 \\\\\n"
"     \\color{blue}{7} & \\color{blue}{8} & 9 \\\\\n"
"\\end{bmatrix}"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:292
msgid "推广到一般情况，在访问 n 维 Tensor （假定为 :math:`T` ）的特定部分的元素时，要求使用如下语法："
msgstr "Generalizing to the general case, when accessing :math:`T`), the following syntax is required:："

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:294
msgid "T_{[s_1, s_2, \\ldots s_n]}"
msgstr ""

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:298
msgid "即我们要提供 :math:`s_1, s_2, \\ldots ,s_n` 共 n 个切片，每个切片针对特定第维度。"
msgstr "That is, we have to provide :math:`s_1, s_2, \\ldots ,s_n` a total of n slices, and each slice is for a specific dimension."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:300
msgid "如果提供的切片个数不足 n, 则需要了解 :ref:`default-indexing` 。"
msgstr "If the number of slices provided is less than n, you need to know :ref:`default-indexing`."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:304
msgid "多维切片时， ``x[obj]`` 内部的 ``obj`` 由给定的不同维度的切片组成。"
msgstr "In multi-[obj]'' is composed of slices of different dimensions."

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:308
msgid "对于 ``ndim`` 特别大的 Tensor （假设超过 1000 维）， 有些时候我们只想对某一个轴进行索引， 或进行特定操作，此时我们可以使用 :py:func:`~.functional.gather` 或 :py:func:`~.functional.scatter`"
msgstr "For ``ndim'' especially large Tensor (assuming more than 1000 dimensions), sometimes we only want to index a certain axis, or perform specific operations, at this time we can use: py:func:`~.functional.gather `or:py:func:`~.functional.scatter`"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:310
msgid "这两个方法分别对应于 :py:func:`numpy.take_along_axis` 和 :py:func:`numpy.put_along_axis`"
msgstr "These two methods correspond to: py:func:`numpy.take_along_axis` and: py:func:`numpy.put_along_axis`"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:315
msgid "多维索引的缺省情况"
msgstr "Default condition of multidimensional index"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:317
msgid "如果索引一个多维 Tensor 时给定的索引数少于实际的维数 ``ndim``, 将得到一个子 Tensor:"
msgstr "If the index number given when indexing a multi-dimensional Tensor is less than the actual dimension ``ndim'', you will get a sub-Tensor:"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:326
msgid "此时其它维度的元素将被完整地保留，等同于使用 ``:`` 作为缺省维度的默认索引；"
msgstr "At this time, the elements of other dimensions will be completely retained, which is equivalent to using ``:'' as the default index of the default dimension;"

#: ../../source/user-guide/model-development/tensor/advanced-indexing.rst:327
msgid "根据给定的明确索引数，得到的子 Tensor 维度个数将对应地减少。"
msgstr "According to the given number of explicit indexes, the number of subTensor dimensions obtained will be correspondingly reduced."

