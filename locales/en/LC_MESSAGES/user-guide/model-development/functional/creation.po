msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-08 21:51+0800\n"
"PO-Revision-Date: 2023-04-11 05:59\n"
"Last-Translator: \n"
"Language-Team: English\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/en/LC_MESSAGES/user-guide/model-development/functional/creation.po\n"
"X-Crowdin-File-ID: 8147\n"
"Language: en_US\n"

#: ../../source/user-guide/model-development/functional/creation.rst:5
msgid "如何创建一个 Tensor"
msgstr "How to create a Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:9
msgid "在 MegEngine 中创建 Tensor 与 `NumPy 创建数组 <https://numpy.org/doc/stable/user/basics.creation.html>`_ 的途径类似；"
msgstr "Creating Tensor and `NumPy create arrays in MegEngine in <https://numpy.org/doc/stable/user/basics.creation.html>similar way` _ of;"

#: ../../source/user-guide/model-development/functional/creation.rst:11
msgid "由于 ndarray 是 Python 数据科学社区中较为通用支持的格式 （例如 SciPy、Pandas、OpenCV 等库都对 ndarray 提供了良好的支持）， 如果存在着 NumPy 已经实现但 MegEngine 尚未支持的创建途径，可以先创建 NumPy ndarray, 再将其转换成 MegEngine Tensor. 也是下面提到的最后一种方法。"
msgstr "Since ndarray is a more commonly supported format in the Python data science community (for example, SciPy, Pandas, OpenCV and other libraries provide good support for ndarray), if there is a creation method that NumPy has been implemented but MegEngine has not yet supported, you can create NumPy first ndarray, and then convert it to MegEngine Tensor. It is also the last method mentioned below."

#: ../../source/user-guide/model-development/functional/creation.rst:16
msgid "创建 Tensor 的常见途径如下："
msgstr "Common way to create Tensor follows："

#: ../../source/user-guide/model-development/functional/creation.rst:18
msgid ":ref:`create-tensor-from-python-structure` （例如 :py:class:`list`, :py:class:`tuple` ）；"
msgstr ":ref:`create-tensor-from-python-structure` (for example: py:class:`list`, :py:class:`tuple`);"

#: ../../source/user-guide/model-development/functional/creation.rst:19
msgid ":ref:`create-tensor-with-intrinsic-functions` （例如 :py:func:`~.arange`, :py:func:`ones`, :py:func:`zeros` 等）；"
msgstr ":ref:`create-tensor-with-intrinsic-functions` (for example: py:func:`~.arange`, :py:func:`ones`, :py:func:`zeros`, etc.);"

#: ../../source/user-guide/model-development/functional/creation.rst:20
msgid ":ref:`create-tensor-from-random-package` （可从 :py:func:`~.random.normal`, :py:func:`~.random.uniform` 等分布中采样）；"
msgstr ":ref:`create-tensor-from-random-package` (can be sampled from distributions such as :py:func:`~.random.normal`, :py:func:`~.random.uniform`);"

#: ../../source/user-guide/model-development/functional/creation.rst:21
msgid ":ref:`create-tensor-through-manipulation` （例如 :py:func:`~.split`, :py:func:`stack` 等）；"
msgstr ":ref:`create-tensor-through-manipulation` (for example: py:func:`~.split`, :py:func:`stack` etc.);"

#: ../../source/user-guide/model-development/functional/creation.rst:22
msgid ":ref:`create-tensor-from-ndarray`."
msgstr ":ref:`create-tensor-from-ndarray`."

#: ../../source/user-guide/model-development/functional/creation.rst:26
msgid "任何通过已有数据创建 Tensor 的方式都是通过拷贝创建的，和原始数据不会共享内存。"
msgstr "Any way to create a Tensor from existing data is created by copying, and does not share memory with the original data."

#: ../../source/user-guide/model-development/functional/creation.rst:31
msgid "将 Python 序列转换为 Tensor"
msgstr "Convert Python sequence to Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:33
msgid "可以使用 Python 序列（例如列表和元组）定义 MegEngine Tensor."
msgstr "The MegEngine Tensor can be defined using Python sequences (such as lists and tuples)."

#: ../../source/user-guide/model-development/functional/creation.rst:35
msgid "列表 :py:class:`list` 和元组 :py:class:`tuple` 分别使用 ``[...]`` 和 ``(...)`` 定义，可以用来定义 Tensor 如何创建："
msgstr "List: py:class:`list` and tuple: py:class:`tuple` are defined with ``[...]`` and ``(...)`` respectively, which can be used to define how Tensor creates："

#: ../../source/user-guide/model-development/functional/creation.rst:37
msgid "由数字组成的列表将创建 1 维 Tensor;"
msgstr "A list of numbers will create a 1-dimensional Tensor;"

#: ../../source/user-guide/model-development/functional/creation.rst:38
msgid "由列表组成的列表将创建 2 维 Tensor;"
msgstr "A list of lists will create a 2-dimensional Tensor;"

#: ../../source/user-guide/model-development/functional/creation.rst:39
msgid "同理，更进一步的列表嵌套将创建更加高维的 Tensor."
msgstr "In the same way, further nesting of the list will create a higher-dimensional Tensor."

#: ../../source/user-guide/model-development/functional/creation.rst:47
msgid "这种写法其实调用了 :py:class:`~.megengine.Tensor` 类的构造函数，传入了 ``data`` 参数；"
msgstr "This way of writing actually calls the constructor of the: py:class:`~.megengine.Tensor` class, passing in the ``data'' parameter;"

#: ../../source/user-guide/model-development/functional/creation.rst:48
msgid "``megengine.tensor`` 是 ``megengine.Tensor`` 的别名，**二者本质上没有任何区别。**"
msgstr "``megengine.tensor`` is an alias of ``megengine.Tensor``, **there is essentially no difference between the two. **"

#: ../../source/user-guide/model-development/functional/creation.rst:52
msgid "将 Tensor 转化为 Python 内置数据类型可以使用 :py:meth:`~.Tensor.item` 或 :py:meth:`~.Tensor.tolist` ."
msgstr "To convert Tensor to Python built-in data type, you can use: py:meth:`~.Tensor.item` or :py:meth:`~.Tensor.tolist`."

#: ../../source/user-guide/model-development/functional/creation.rst:55
msgid "默认的数据类型"
msgstr "Default data type"

#: ../../source/user-guide/model-development/functional/creation.rst:58
msgid "当你使用 :py:class:`megengine.Tensor` 来定义新的 Tensor 时，需要考虑到其中每个元素的 :ref:`数据类型 <tensor-dtype>` 。"
msgstr "When you use: py: class: `megengine.Tensor` to define a new Tensor, the need to consider where each element :ref:'data type <tensor-dtype>'."

#: ../../source/user-guide/model-development/functional/creation.rst:60
msgid "默认行为是以 32 位有符号整数 ``int32`` 或浮点数 ``float32`` 来创建 Tensor."
msgstr "The default behavior is to create a Tensor with a 32-bit signed integer ``int32`` or a floating point number ``float32''."

#: ../../source/user-guide/model-development/functional/creation.rst:68
msgid "如果你希望得到的 Tensor 是某种数据类型，则需要指定在创建 Tensor 时显式指定 dtype."
msgstr "If the Tensor you want is a certain data type, you need to specify the dtype explicitly when creating the Tensor."

#: ../../source/user-guide/model-development/functional/creation.rst:71
msgid "创建时指定数据类型"
msgstr "Specify the data type when creating"

#: ../../source/user-guide/model-development/functional/creation.rst:73
msgid "数据类型是可以被显式指定的，但显式指定 ``dtype`` 有可能产生非预期的溢出，例如："
msgstr "The data type can be explicitly specified, but explicitly specifying ``dtype`` may cause unexpected overflow, such as："

#: ../../source/user-guide/model-development/functional/creation.rst:79
msgid "一个 8 位有符号整数表示从 -128 到 127 的整数。将 int8 Tensor 赋值给此范围之外的整数会导致溢出。"
msgstr "An 8-bit signed integer represents an integer from -128 to 127. Assigning an int8 Tensor to an integer outside this range will cause an overflow."

#: ../../source/user-guide/model-development/functional/creation.rst:81
msgid "如果使用不匹配的数据类型执行计算，可能会得到非预期的结果，例如："
msgstr "If you perform calculations with unmatched data types, you may get unexpected results, such as："

#: ../../source/user-guide/model-development/functional/creation.rst:88
msgid "你可能希望得到的结果是 ``[-3, -3, -3]``, 但在 ``uint8`` 数据类型下，这些值将表示为 ``253``."
msgstr "You may expect the result to be ``[-3, -3, -3]``, but under the ``uint8`` data type, these values will be represented as ``253``."

#: ../../source/user-guide/model-development/functional/creation.rst:91
msgid "不同数据类型之间的计算"
msgstr "Calculations between different data types"

#: ../../source/user-guide/model-development/functional/creation.rst:93
msgid "注意上面两个 Tensor 即 ``a`` 和 ``b`` 有着相同的 ``dtype: uint8``, 因此得到的 Tensor 的数据类型也会相同。 如果你在两个不同 ``dtype`` 的 Tensor 之间进行计算，MegEngine 将进行类型提升来满足计算要求："
msgstr "Note that the above two Tensors, ``a`` and ``b``, have the same ``dtype: uint8``, so the data type of the resulting Tensor will also be the same. If you Tensor calculated between the two different `` dtype``, MegEngine type lifting will be required to meet the computing："

#: ../../source/user-guide/model-development/functional/creation.rst:99
msgid "注意到数据类型为 ``uint8`` 的 ``a`` 与数据类型为 ``int8`` 的 ``b`` 进行计算， 最终得到了一个数据类型为 ``int16`` 的 Tensor."
msgstr "Note that ``a'' with data type ``uint8`` and ``b`` with data type ``int8'' are calculated, and finally a Tensor with data type ``int16'' is obtained."

#: ../../source/user-guide/model-development/functional/creation.rst:105
msgid "使用内置函数创建 Tensor"
msgstr "Use built-in functions to create Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:109
msgid "MegEngine 的 :py:mod:`functional` 子包内置了多个创建 Tensor 的函数（位于 :ref:`creation` ）；"
msgstr "The :py:mod:`functional` sub-package of MegEngine has built-in functions for creating Tensor (located at :ref:`creation`);"

#: ../../source/user-guide/model-development/functional/creation.rst:110
msgid "使用这些函数创建的 Tensor 默认数据类型为 ``float32``."
msgstr "The default data type of Tensor created using these functions is ``float32''."

#: ../../source/user-guide/model-development/functional/creation.rst:112
msgid "根据它们所创建的 Tensor 的维数，这些函数大致上可以分为三类："
msgstr "The dimensions thereof created by Tensor, these functions can generally be divided into three categories："

#: ../../source/user-guide/model-development/functional/creation.rst:114
msgid ":ref:`create-1d-tensor`"
msgstr ":ref:`create-1d-tensor`"

#: ../../source/user-guide/model-development/functional/creation.rst:115
msgid ":ref:`create-2d-tensor`"
msgstr ":ref:`create-2d-tensor`"

#: ../../source/user-guide/model-development/functional/creation.rst:116
msgid ":ref:`create-nd-tensor`"
msgstr ":ref:`create-nd-tensor`"

#: ../../source/user-guide/model-development/functional/creation.rst:121
msgid "创建 1 维 Tensor"
msgstr "Create a 1-dimensional Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:123
msgid "创建 1 维 Tensor 的函数如 :py:func:`~.arange` 和 :py:func:`~.linspace` 通常需要至少两个输入，即 ``start`` 和 ``stop``."
msgstr "The functions to create a 1-dimensional Tensor such as: py:func:`~.arange` and :py:func:`~.linspace` usually require at least two inputs, namely ``start`` and ``stop``."

#: ../../source/user-guide/model-development/functional/creation.rst:126
msgid ":py:func:`~.arange` 将创建具有规律递增值的 Tensor, 下面显示了一些用法："
msgstr ":py:func:`~.arange` will create a Tensor with regularly increasing values, some usages are shown below："

#: ../../source/user-guide/model-development/functional/creation.rst:137
msgid "使用该函数得到的 Tensor 中的值不包括终点 ``stop``, 即范围为 ``[start, stop)``."
msgstr "The value in the Tensor obtained by using this function does not include the end point ``stop'', that is, the range is ``(start, stop)''."

#: ../../source/user-guide/model-development/functional/creation.rst:139
msgid ":py:func:`~.linspace` 将创建具有指定数量元素的 Tensor, 并在指定的开始值和结束值之间等距间隔。例如："
msgstr ":py:func:`~.linspace` will create a Tensor with the specified number of elements, and spaced equally between the specified start value and end value. For example："

#: ../../source/user-guide/model-development/functional/creation.rst:144
msgid "使用这个函数的好处是可以保证 Tensor 中元素的数量、值的起点和终点。"
msgstr "The advantage of using this function is that it can guarantee the number of elements in the Tensor, the starting point and the ending point of the value."

#: ../../source/user-guide/model-development/functional/creation.rst:148
msgid "在 NumPy 中使用 :py:func:`~.arange` 的最佳实践是使用整型的 ``start``, ``stop`` 和 ``step`` 值。 这是由于机器表示浮点数时存在着舍入误差，向 ``arange`` 传入非整数值时有可能得到非预期结果："
msgstr "The best practice for using :py:func:`~.arange` in NumPy is to use integer ``start``, ``stop`` and ``step`` values. This is due to the machine showing the existence of floating point rounding error, it is possible to `` arange`` non-integer values obtained when an incoming unintended consequences："

#: ../../source/user-guide/model-development/functional/creation.rst:155
msgid "在 NumPy 中由于浮点误差的累积，最终的结果中将会看到 ``8.4`` 这个值。"
msgstr "Due to the accumulation of floating-point errors in NumPy, the final result will see the value ``8.4``."

#: ../../source/user-guide/model-development/functional/creation.rst:157
msgid "而在 MegEngine 中，``arange`` 内部调用了 ``linspace`` 进行实现，此时得到的结果与 NumPy 不同："
msgstr "In the MegEngine, `` arange`` internal calls `` linspace`` be achieved with the result obtained at this time is different from the NumPy："

#: ../../source/user-guide/model-development/functional/creation.rst:165
msgid "创建 2 维 Tensor"
msgstr "Create a 2-dimensional Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:167
msgid "创建 2 维 Tensor 的函数通常以表示为二维数组的特殊矩阵的属性来定义。"
msgstr "The function to create a 2-dimensional Tensor is usually defined by the attributes of a special matrix expressed as a 2-dimensional array."

#: ../../source/user-guide/model-development/functional/creation.rst:169
msgid "例如 :py:func:`~.eye` 定义了一个 2 维单位矩阵，行索引和列索引相等的元素为 1, 其余为 0, 如下所示："
msgstr "For example: py:func:`~.eye` defines a 2-dimensional identity matrix, the elements with the same row index and column index are 1, and the rest are 0, as shown below："

#: ../../source/user-guide/model-development/functional/creation.rst:184
msgid "创建 n 维 Tensor"
msgstr "Create n-dimensional Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:186
msgid "此类函数如 :py:func:`~.ones`, :py:func:`~.zeros` 通常可以根据给定的形状创建 Tensor."
msgstr "Such functions such as: py:func:`~.ones`, :py:func:`~.zeros` can usually create a Tensor according to a given shape."

#: ../../source/user-guide/model-development/functional/creation.rst:202
msgid "本质上它们都是通过调用 :py:func:`~.full` 来实现创建满足给定形状和值的 Tensor;"
msgstr "In essence, they are all achieved by calling: py:func:`~.full` to create a Tensor that meets the given shape and value;"

#: ../../source/user-guide/model-development/functional/creation.rst:203
msgid "使用 :py:func:`~.zeros_like`, :py:func:`~.ones_like`, :py:func:`~.full_like` 根据输入 Tensor 形状进行创建。"
msgstr "Use :py:func:`~.zeros_like`, :py:func:`~.ones_like`, :py:func:`~.full_like` to create according to the input Tensor shape."

#: ../../source/user-guide/model-development/functional/creation.rst:208
msgid "使用 random 子包随机生成"
msgstr "Randomly generated using random sub-package"

#: ../../source/user-guide/model-development/functional/creation.rst:209
msgid "例如使用 :py:func:`~.random.normal` 可以从服从正态分布的随机变量中采样："
msgstr "For example, use: py:func:`~.random.normal` to sample："

#: ../../source/user-guide/model-development/functional/creation.rst:214
msgid "使用 :py:func:`~.random.uniform` 可以从服从均匀分布的随机变量中采样："
msgstr "Use: py:func:`~.random.uniform` to sample："

#: ../../source/user-guide/model-development/functional/creation.rst:221
msgid "Python 的 ``random`` 标准库文档 -- `Generate pseudo-random numbers <https://docs.python.org/3/library/random.html>`_"
msgstr "Python's ``random`` standard library documentation - `Generate pseudo-random numbers <https://docs.python.org/3/library/random.html>`_"

#: ../../source/user-guide/model-development/functional/creation.rst:222
msgid "NumPy 的随机采样官方文档 ——  `Random sampling <https://numpy.org/doc/stable/reference/random/index.html>`_"
msgstr "NumPy's random sampling official document-`Random sampling <https://numpy.org/doc/stable/reference/random/index.html>`_"

#: ../../source/user-guide/model-development/functional/creation.rst:223
msgid "MegEngine 所有随机数生成相关 API 都列举在 :py:mod:`~.random` 页面。"
msgstr "All MegEngine random number generation related APIs are listed on the :py:mod:`~.random` page."

#: ../../source/user-guide/model-development/functional/creation.rst:228
msgid "基于现有的 Tensor 进行操作"
msgstr "Operate based on existing Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:232
msgid "使用 :py:func:`~.functional.copy` 函数可以拷贝一个 Tensor."
msgstr "Use: py:func:`~.functional.copy` function to copy a Tensor."

#: ../../source/user-guide/model-development/functional/creation.rst:236
msgid "更多具体内容请参考 :ref:`tensor-manipulation` 页面。"
msgstr "For more details, please refer to the :ref:`tensor-manipulation` page."

#: ../../source/user-guide/model-development/functional/creation.rst:241
msgid "将 NumPy ndarray 转化为 MegEngine Tensor"
msgstr "Convert NumPy ndarray to MegEngine Tensor"

#: ../../source/user-guide/model-development/functional/creation.rst:243
msgid "我们也能够通过 :py:class:`~.megengine.Tensor`, 将 ndarray 作为输入数据传入，得到对应的 Tensor."
msgstr "We can also pass: py:class:`~.megengine.Tensor`, pass in ndarray as input data to get the corresponding Tensor."

#: ../../source/user-guide/model-development/functional/creation.rst:253
msgid "通过 Tensor 的 :py:meth:`~.Tensor.numpy` 方法，我们可以得到 Tensor 转为 ndarray 后的结果："
msgstr "Through Tensor's :py:meth:`~.Tensor.numpy` method, we can get the result of Tensor converted to ndarray："

#: ../../source/user-guide/model-development/functional/creation.rst:260
msgid "相关注意事项如数据类型等，与 :ref:`create-tensor-from-python-structure` 一致。"
msgstr "Related precautions, such as data type, are consistent with :ref:`create-tensor-from-python-structure`."

#~ msgid "创建 Tensor"
#~ msgstr ""

#~ msgid "创建 Tensor 的方式有很多种，常见操作如下："
#~ msgstr ""

#~ msgid ""
#~ "如果想要使用已经存在的数据创建 Tensor, 可以将其传入 :class:`~.Tensor` "
#~ "的构造函数： 支持传入标量（Scalar）、Python :class:`list` 以及 "
#~ "NumPy :class:`~numpy.ndarray` （当然也包括 Tensor "
#~ "自己）；"
#~ msgstr ""

#~ msgid ""
#~ "对应地，Tensor 也支持通过 :meth:`~.Tensor.item` , "
#~ ":meth:`~.Tensor.tolist` 和 :meth:`~.Tensor.numpy` "
#~ "变成其它数据结构；"
#~ msgstr ""

#~ msgid "我们也可以使用 :ref:`creation` 和 :py:mod:`~.random` 中的 API 来无中生有想要的 Tensor 对象。"
#~ msgstr ""

#~ msgid "使用已经存在的数据"
#~ msgstr ""

#~ msgid "一种常见的思路是，经过一系列流程，首先将输入的数据转化成 NumPy 支持的 ndarray 格式。"
#~ msgstr ""

#~ msgid "假设数据已被处理成 ndarray 类型的 ``data``, 我们则可以像下面的代码一样将其转换为 MegEngine Tensor:"
#~ msgstr ""

#~ msgid "在这个过程中，MegEngine 会根据传入数据的类型自动进行推导，比如这里得到的是 ``int32`` 类型的数据。"
#~ msgstr ""

#~ msgid "MegEngine 基于已有数据生成的 Tensor 都是经过拷贝创建的，与原始数据的内存并不共享。"
#~ msgstr ""

#~ msgid "``tensor`` 只是 ``Tensor`` 的别名， **二者在使用上没有任何的区别。**"
#~ msgstr ""

#~ msgid "使用相关算子创建"
#~ msgstr ""

#~ msgid "使用一些 :py:mod:`~.functional` 模块中提供的接口，可以用来生成 Tensor. 比如："
#~ msgstr ""

#~ msgid ""
#~ "更多接口比如 :py:func:`~.ones`, :py:func:`~.full`, ... "
#~ "均可在 :ref:`creation` 中找到。"
#~ msgstr ""

#~ msgid "使用一些 :py:mod:`~.random` 模块中提供的接口，可以随机生成符合要求的 Tensor. 比如："
#~ msgstr ""

#~ msgid ""
#~ "更多接口比如 :py:func:`~.uniform`, :py:func:`~.beta` ..."
#~ " 均可在 :py:mod:`~.random` 中找到。"
#~ msgstr ""

#~ msgid "使用 :py:func:`.random.seed` 可以设置随机数种子；"
#~ msgstr ""

#~ msgid "你也可以使用 NumPy 创建 ndarray 数据，然后转化成 MegEngine Tensor."
#~ msgstr ""

