msgid ""
msgstr ""
"Project-Id-Version: megengine-documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-08 20:45+0800\n"
"PO-Revision-Date: 2023-04-20 08:43\n"
"Last-Translator: \n"
"Language: en_US\n"
"Language-Team: English\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Crowdin-Project: megengine-documentation\n"
"X-Crowdin-Project-ID: 582157\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /dev/locales/en/LC_MESSAGES/user-guide/model-development/functional/general-operations.po\n"
"X-Crowdin-File-ID: 1285\n"

#: ../../source/user-guide/model-development/functional/general-operations.rst:5
msgid "如何用 Tenosr 进行科学运算"
msgstr "How to perform scientific calculations with Tenosr"

#: ../../source/user-guide/model-development/functional/general-operations.rst:7
msgid "可以通过 ``megengine.functional.xxx`` 形式调用的 API 被认为是通用 Tensor 运算， 负责提供常见的科学运算接口，该部分的 API 设计尽可能地向 NumPy API 靠拢。 所有的 API 都可以在 :ref:`general-tensor-operations` 中找到。"
msgstr "The API that can be called in the form of ``megengine.functional.xxx'' is considered to be a general-purpose Tensor operation and is responsible for providing common scientific operation interfaces. The API design of this part is as close as possible to the NumPy API. All APIs can be found in :ref:`general-tensor-operations`."

#: ../../source/user-guide/model-development/functional/general-operations.rst:11
msgid "根据对 Tensor 形状的要求和影响，我们又可以把这些运算分为以下几大类："
msgstr "According to the requirements and impact on the shape of Tensor, we can divide these operations into the following categories："

#: ../../source/user-guide/model-development/functional/general-operations.rst:13
msgid ":ref:`element-wise-operations`"
msgstr ""

#: ../../source/user-guide/model-development/functional/general-operations.rst:14
msgid ":ref:`reduction-operations`"
msgstr ""

#: ../../source/user-guide/model-development/functional/general-operations.rst:18
msgid "并不是所有的 NumPy 中的计算接口都有提供对应的 MegEngine 实现，但在处理数据时， 你可以选择先调用 NumPy 实现获得 ndarray, 然后 :ref:`create-tensor-from-ndarray` ；"
msgstr "Not all computing interfaces in NumPy provide corresponding MegEngine implementations, but when processing data, you can choose to call NumPy implementation to obtain :ref:`create-tensor-from-ndarray`;"

#: ../../source/user-guide/model-development/functional/general-operations.rst:20
msgid "如果你不理解一些 API 的使用方法，可以查询 NumPy 中关于对应 API 用法的介绍。"
msgstr "If you don't understand the usage of some APIs, you can check the introduction of corresponding API usage in NumPy."

#: ../../source/user-guide/model-development/functional/general-operations.rst:25
msgid "元素级别运算（Element-wise）"
msgstr "Element-wise operations (Element-wise)"

#: ../../source/user-guide/model-development/functional/general-operations.rst:27
msgid "元素级别运算是 Tensor 运算中最常见的一大类，根据操作数的区别， 它既可以指对 Tensor 中每个位置的元素进行相同的运算（即一元运算）， 也可以指在不同的 Tensor 之间的对应元素逐个进行相互运算（即二元或更多元运算）， 这些运算自身又可以根据运算性质简略地区分为："
msgstr "Element-level operations are the most common category of Tensor operations. According to the difference in operands, it can either refer to the same operation (ie unary operation) on the elements at each position in the Tensor, or it can refer to different Tensors. Corresponding elements between each other are operated on one by one (that is, binary or multiple operations), and these operations themselves can be roughly divided into："

#: ../../source/user-guide/model-development/functional/general-operations.rst:32
msgid "算术运算 （加减乘除等，参考 :ref:`arithmetic-operations` ）"
msgstr "Arithmetic operations (addition, subtraction, multiplication, division, etc., refer to :ref:`arithmetic-operations`)"

#: ../../source/user-guide/model-development/functional/general-operations.rst:33
msgid "三角函数与反三角函数（参考 :ref:`trigonometric-functions` 与 :ref:`hyperbolic-functions` ）"
msgstr "Trigonometric functions and inverse trigonometric functions (refer to :ref:`trigonometric-functions` and :ref:`hyperbolic-functions`)"

#: ../../source/user-guide/model-development/functional/general-operations.rst:34
msgid "位运算（参考 :ref:`bit-operations` ）"
msgstr "Bit operations (refer to :ref:`bit-operations`)"

#: ../../source/user-guide/model-development/functional/general-operations.rst:35
msgid "逻辑运算（参考 :ref:`logic-functions` ）"
msgstr "Logic operation (refer to :ref:`logic-functions`)"

#: ../../source/user-guide/model-development/functional/general-operations.rst:37
msgid "在神经网络运算中，也有许多运算是元素级别的，比如激活函数 :py:func:`~.relu` 等。"
msgstr "In neural network operations, there are also many operations at the element level, such as activation functions: py:func:`~.relu` and so on."

#: ../../source/user-guide/model-development/functional/general-operations.rst:40
msgid "元素级别的含义"
msgstr "Element level meaning"

#: ../../source/user-guide/model-development/functional/general-operations.rst:42
msgid "如果两个元素在各自的 Tensor 内占据着相同的位置，那么我们可以称这两个元素是对应的， 其中元素的位置由用于定位每个元素的 :ref:`索引 <access-tensor-element>` 确定。 我们用下面两个 Tensor ``a`` 和 ``b`` 作为例子："
msgstr "If two elements occupy the same position in their respective the Tensor, then we can call these two elements are corresponding to the positions where the elements for positioning by each element :ref:`index <access-tensor-element>` determined. We use the following two Tensor ``a`` and ``b`` as example："

#: ../../source/user-guide/model-development/functional/general-operations.rst:49
msgid "我们使用相同的索引 ``[0][0]`` 去获取分别获取两个 Tensor 中的元素："
msgstr "We use the same index ``[0][0]'' to get the elements："

#: ../../source/user-guide/model-development/functional/general-operations.rst:57
msgid "可以发现，``a`` 中值为 1 的元素对应着 ``b`` 中值为 9 的元素。其它 3 个位置的元素也分别对应。"
msgstr "It can be found that the element with the value of 1 in ``a`` corresponds to the element with the value of 9 in ``b``. The elements in the other 3 positions also correspond respectively."

#: ../../source/user-guide/model-development/functional/general-operations.rst:61
msgid "对应关系由相同的索引定义，它表明了 Tensor 之间必须具有相同的形状才能进行元素间操作。"
msgstr "Correspondence is defined by the same index, which indicates that Tensors must have the same shape to perform operations between elements."

#: ../../source/user-guide/model-development/functional/general-operations.rst:63
msgid "以加法为例子，我们可以当作是两个矩阵之间进行了矩阵加法："
msgstr "Taking addition as an example, we can regard it as a matrix addition between two matrices.："

#: ../../source/user-guide/model-development/functional/general-operations.rst:65
msgid "\\begin{bmatrix}\n"
"     1 & 2 \\\\\n"
" 3 & 4\n"
"\\end{bmatrix} +\n"
"\\begin{bmatrix}\n"
"     9 & 8 \\\\\n"
" 7 & 6\n"
"\\end{bmatrix} =\n"
"\\begin{bmatrix}\n"
"     10 & 10 \\\\\n"
" 10 & 10\n"
"\\end{bmatrix}"
msgstr ""

#: ../../source/user-guide/model-development/functional/general-operations.rst:86
msgid "并不是形状完全相同的两个 Tensor 之间才能够进行元素级别的运算， 如果两个 Tensor 的形状相互 “兼容”，则可以 :ref:`广播（Broadcast） <tensor-broadcasting>` 至相同的形状进行运算。 这个机制让 Tensor 计算变得非常灵活。"
msgstr "It can be the element level calculation between two Tensor not exactly the same shape, if the shape of two mutually Tensor \"compatible\", may be :ref:`broadcast (Broadcast) <tensor-broadcasting>to be the same shape as` calculation. This mechanism makes Tensor calculation very flexible."

#: ../../source/user-guide/model-development/functional/general-operations.rst:92
msgid "人们也用 Component-wise / Point-wise 等术语来指代元素级别的运算。"
msgstr "People also use terms such as Component-wise / Point-wise to refer to element-level operations."

#: ../../source/user-guide/model-development/functional/general-operations.rst:95
msgid "与矩阵运算的对比"
msgstr "Comparison with matrix operations"

#: ../../source/user-guide/model-development/functional/general-operations.rst:97
msgid "与 ``+`` 类似，使用 ``*`` 可以用来计算矩阵的对应元素相乘，也叫哈达玛积（Hadamard product）："
msgstr "Similar to ``+``, the use of ``*`` can be used to calculate the multiplication of the corresponding elements of the matrix, also called Hadamard product (Hadamard product)："

#: ../../source/user-guide/model-development/functional/general-operations.rst:99
msgid "\\begin{bmatrix}\n"
"     1 & 2 \\\\\n"
" 3 & 4\n"
"\\end{bmatrix} \\odot\n"
"\\begin{bmatrix}\n"
"     9 & 8 \\\\\n"
" 7 & 6\n"
"\\end{bmatrix} =\n"
"\\begin{bmatrix}\n"
"     9 & 16 \\\\\n"
" 21 & 24\n"
"\\end{bmatrix}"
msgstr ""

#: ../../source/user-guide/model-development/functional/general-operations.rst:123
msgid "**不同的框架和库对于一些运算符的定义不同。** 在 Matlab 中使用 ``.*`` 和 ``.^`` 表示元素级别的乘法和乘方， 使用 ``*`` 和 ``^`` 表示矩阵乘法和乘方，参考官网解释： `Array vs. Matrix Operations <https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html>`_"
msgstr "**Different frameworks and libraries have different definitions for some operators. ** In Matlab, use ``.*`` and ``.^`` to indicate element-level multiplication and power, use ``*`` and ``^`` to indicate matrix multiplication and power, please refer to the official website for explanation： `Array vs. Matrix Operations <https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html>`_"

#: ../../source/user-guide/model-development/functional/general-operations.rst:127
msgid "一些人会将 ``*`` 误认为是矩阵乘法 :py:func:`~.matmul` , 实际上在 MegEngine 中矩阵乘法对应的运算符是 ``@`` ."
msgstr "Some people mistake ``*'' for matrix multiplication: py:func:`~.matmul`, in fact the operator corresponding to matrix multiplication in MegEngine is ``@``."

#: ../../source/user-guide/model-development/functional/general-operations.rst:133
msgid "它对应于 :py:mod:`functional` 模块中提供的 :py:func:`~.matmul` 接口："
msgstr "It corresponds to: py:mod:`functional` provided in the module: py:func:`~.matmul` interface："

#: ../../source/user-guide/model-development/functional/general-operations.rst:141
msgid "更多与线性代数有关的运算，请参考 :ref:`linear-algebra-functions` ."
msgstr "For more operations related to linear algebra, please refer to :ref:`linear-algebra-functions`."

#: ../../source/user-guide/model-development/functional/general-operations.rst:146
msgid "归约运算（Reduction）"
msgstr "Reduction"

#: ../../source/user-guide/model-development/functional/general-operations.rst:150
msgid "归约运算能够减少一个 Tensor 中元素的数量。"
msgstr "Reduction operations can reduce the number of elements in a Tensor."

#: ../../source/user-guide/model-development/functional/general-operations.rst:152
msgid "我们可以理解成统计意义上的降维（Dimensionality reduction）。"
msgstr "We can understand it as dimensionality reduction in a statistical sense."

#: ../../source/user-guide/model-development/functional/general-operations.rst:154
msgid "一个最简单的例子是对 Tensor 中的元素求和，使用 :py:func:`~.sum` 接口："
msgstr "One of the simplest examples is to sum the elements in Tensor, using: py:func:`~.sum` interface："

#: ../../source/user-guide/model-development/functional/general-operations.rst:163
msgid "可以看到，我们对一个形状为 ``(2, 3)`` 的 Tensor 求和后得到了一个 0 维 Tensor."
msgstr "As you can see, after summing a Tensor of shape ``(2, 3)'', we get a 0-dimensional Tensor."

#: ../../source/user-guide/model-development/functional/general-operations.rst:167
msgid "归约运算并不总是将输入 Tensor 归约为具有单个元素的 0 维 Tensor. 在传入 ``axis`` 参数且不为 `None` 时，则可以要求沿着轴进行规约，参考 :ref:`axis-argument` ；"
msgstr "The reduction operation does not always reduce the input Tensor to a 0-dimensional Tensor with a single element. When the ``axis`` parameter is passed in and it is not `None`, you can request reduction along the axis, refer to :ref:` axis-argument`;"

#: ../../source/user-guide/model-development/functional/general-operations.rst:169
msgid "我们也可以通过设置参数 ``keepdims=True`` 来保持归约运算前后的维度不变。"
msgstr "We can also keep the dimensions before and after the reduction operation unchanged by setting the parameter ``keepdims=True''."

#: ../../source/user-guide/model-development/functional/general-operations.rst:173
msgid "常见的 Tensor 归约运算还有：:py:func:`~.prod` / :py:func:`~.mean` 等， 可在 :ref:`statistical-functions` 中找到相关 API 和例程。"
msgstr "Common Tensor reduction operations include：:py:func:`~.prod` / :py:func:`~.mean`, etc. You can find related APIs and routines :ref:"

#: ../../source/user-guide/model-development/functional/general-operations.rst:175
msgid "想要了解更多关于规约的知识，可以参考维基百科中对 `Reduction operator <https://en.wikipedia.org/wiki/Reduction_operator>`_ 的解释。"
msgstr "To learn more about the statute, you can refer to <https://en.wikipedia.org/wiki/Reduction_operator>`_ in Wikipedia."

