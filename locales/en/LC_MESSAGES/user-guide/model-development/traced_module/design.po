# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, The MegEngine Open Source Team
# This file is distributed under the same license as the MegEngine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 09:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/user-guide/model-development/traced_module/design.rst:5
msgid "TracedModule 基本概念"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:7
msgid ""
"TracedModule 来源于普通的 Module，但它与普通 Module 不同的是其 "
":py:meth:`.TracedModule.forward` 方法的执行逻辑通过 :py:class:`~.InternalGraph` "
"来描述。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:9
msgid "下面的例子展示了 Module、TracedModule 以及 InternalGraph 之间的关系。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:28
msgid "首先创建一个 ``SimpleModule`` 实例："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:36
msgid "调用 :py:func:`~.trace_module` 将普通 Module 转换为 TracedModule:"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:46
msgid ""
"traced_module 拥有 :py:attr:`~.TracedModule.graph` 属性，graph 描述了 "
"SimpleModule.forward 的执行逻辑："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:61
msgid ""
"我们可以看到 ``SimpleModule.Graph(self, x)`` 与 ``SimpleModule.forward(self, "
"x)`` 的代码逻辑一致。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:63
msgid ""
"一个普通的 Module 可通过 :py:func:`~.trace_module` 方法将其转换为 TracedModule。 "
"在转换过程中，用户自定义的 Module 将被转换为 TracedModule，内置 Module（如 "
":py:class:`~.module.Linear`, :py:class:`~.module.Conv2d` 等）不作转换。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:66
msgid ""
"graph 是 TracedModule 中最重要的属性，其实际是一个 "
":py:class:`~.traced_module.InternalGraph`, 构成 InternalGraph 的基本单元为 "
":py:class:`~.traced_module.node.Node` 和 "
":py:class:`~.traced_module.expr.Expr`。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:70
msgid "Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:71
msgid "**Node 的常用属性以及方法的使用例子请参考** :ref:`node-expr-method`。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:73
msgid ""
"通过 :py:class:`~.traced_module.node.Node` 来描述 ``forward`` 中的 "
":py:class:`~.Tensor` 或 :py:class:`~.Module`。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:88
msgid ""
"Node 的 **expr** 属性记录了生成该 Node 的 Expr, 例如 ``SimpleModule`` 的输出是调用 "
"``linear`` 这个子 module 生成的。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:96
msgid ""
"Node 的 **users** 属性记录了该 Node 的被哪些 Expr 作为输入, 例如 ``SimpleModule`` 的中的输入 "
"``x`` 是 ``x = x + 1`` 这个的输入。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:104
msgid "Node 的 **name** 属性是该 Node 的名字，该名字在其所属的 graph 中是唯一的。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:106
msgid ""
"Node 的 **qualname** 属性记录了该 Node 是由哪个 Module 中所生成的，可以从 qualname 得到该 Module"
" 的名字。 例如，``out_node.qualname`` 为 'SimpleModule.linear.[out]', 表示 "
"``out_node`` 是 SimpleModule 中 linear 这个子 module 的输出。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:113
msgid "InternalGraph 中的 Node 有两种："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:115
msgid ""
":py:class:`~.TensorNode`：描述一个 Tensor，记录了该 Tensor 的 dtype 、shape 和 qparams"
" 等信息"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:125
msgid ":py:class:`~.ModuleNode`：描述一个 Module，记录了该 Module 的类型，以及对应的 Module"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:136
msgid "Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:137
msgid "**Expr 的常用属性以及方法的使用例子请参考** :ref:`node-expr-method`。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:139
msgid ""
"通过 Expr 来描述一个 ``forward`` 中的某个表达式。 一个 Expr 由表达式的输入 ( "
":py:attr:`~.traced_module.Expr.inputs` )、 输出 ( "
":py:attr:`~.traced_module.Expr.outputs` )、 以及由输入到输出的执行逻辑 ( "
":py:meth:`~.traced_module.Expr.interpret` ) 构成。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:156
msgid "Expr 的子类分别有："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:158
msgid ""
":py:class:`~.Expr.GetAttr`: 获取 TracedModule 的中的某个属性，该 Expr 保存一个 name "
"字符串（用来描述要获取的属性）， 接受一个 ModuleNode 作为输入，它的执行逻辑为 ``outputs = "
"getattr(inputs[0], name)``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:161
msgid ""
"例如：``SimpleModule.forward`` 中的 self.param 将会被解释为  ``%6: param = "
"getattr(self, \"param\") -> (Tensor)``， self.linear 将会被解释为 ``%5: linear ="
" getattr(self, \"linear\") -> (Linear)``，这两个 GetAttr 的输入均为 ``self`` 这个 "
"ModuleNode。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:172
msgid ""
":py:class:`~.Expr.CallMethod`: 调用变量（Module 或 Tensor）的一个方法，该 Expr 保存一个 "
"method 字符串（用来描述调用变量的哪个方法）， 接受多个输入（第一个输入为变量本身，即 self）。它的执行逻辑为 ``otuputs = "
"getattr(inputs[0], method)(\\*inputs[1:])``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:175
msgid ""
"例如：``SimpleModule.forward`` 中的 x = x + self.param  将会被解释为 ``%7: add_out_1"
" = relu_out.__add__(param, )``， 这个 expr 是指调用了 x 的 ``__add__`` 方法，输入为 x 和 "
"param。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:186
msgid ""
":py:class:`~.Expr.CallFunction`: 调用 megengine 内置的某个函数，该 Expr 保存一个 "
"func，接受多个输入。 它的执行逻辑为 ``outputs = func(\\*inputs)`` 。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:189
msgid ""
"例如：``SimpleModule.forward`` 中的 x = F.relu(x) ，将会被解释为 ``%4: relu_out = "
"nn.relu(add_out, )``, 表示调用了 `nn.relu` 这个 function，其输入为 add_out。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:200
msgid ""
":py:class:`~.Expr.Constant`: 产生一个常量，该 Expr 会记录一个不会改变的 value（Module 或 "
"Tensor），不接受输入，它的执行逻辑为 ``outputs = value``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:202
msgid ""
"例如：``SimpleModule.forward`` 中的 ``mge.Tensor([1])`` 将会被解释为 ``%2: "
"const_tensor = Constant() -> (Tensor)``， 表示一个生成常量 Tensor。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:212
msgid ""
":py:class:`~.Expr.Input`: 表示 Module.forward "
"的输入，仅仅是一个占位符的作用。真正推理的时候会将其替换为真正的 Tensor。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:214
msgid "**所有的 Node 在实际执行推理的时候（interpret）都会被替换为实际的 Tensor 或者 Module。**"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:217
msgid "InternalGraph"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:218
msgid "**InternalGraph 的常用属性以及方法的使用例子请参考** :ref:`api-example`。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:220
msgid "将 Module.foward 中的每一条语句都解释为由 Expr 组成的执行序列就构成了最终的 InternalGraph。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:235
msgid "InternalGraph 包含以下三个属性："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:237
msgid ":py:attr:`~.InternalGraph._exprs`: 按执行顺序排列的 Expr 列表"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:248
msgid ":py:attr:`~.InternalGraph.inputs`: 该 graph 的输入 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:253
msgid ":py:attr:`~.InternalGraph.outputs`: 该 graph 的输出 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:258
msgid ""
"在解析 Module.forward 的过程中，会将 forward 里的每一个执行语句描述为 Expr，并按执行次序依次添加到 _exprs "
"属性里。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/design.rst:260
msgid "在真正推理时，只需要遍历 _exprs 并依次 interpret 即可得到与执行原 Module 一样的结果。"
msgstr ""

