msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-21 10:52+0800\n"
"PO-Revision-Date: 2023-04-11 05:58\n"
"Last-Translator: \n"
"Language-Team: English\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: en\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/en/LC_MESSAGES/user-guide/faq/gpu-memory.po\n"
"X-Crowdin-File-ID: 8121\n"
"Language: en_US\n"

#: ../../source/user-guide/faq/gpu-memory.rst:5
msgid "显存使用常见问题"
msgstr "Frequently Asked Questions about Video Memory Usage"

#: ../../source/user-guide/faq/gpu-memory.rst:9
msgid "本指南只适用于 MegEngine Python 接口。在使用 C++ 接口进行推理时，显存使用和控制将更为精细和复杂。"
msgstr "This guide only applies to the MegEngine Python interface. When using the C++ interface for reasoning, the use and control of video memory will be more refined and complex."

#: ../../source/user-guide/faq/gpu-memory.rst:12
msgid "如何正确的观察显存使用情况"
msgstr "How to correctly observe the memory usage"

#: ../../source/user-guide/faq/gpu-memory.rst:14
msgid "MegEngine 使用了显存池机制来加速显存的申请和释放，程序中释放掉的显存将会存储在显存池中，不会被主动的释放给 CUDA driver. 因此使用 ``nvidia-smi`` 命令观察到的显存占用可能大于实际的使用值。"
msgstr "MegEngine uses the video memory pool mechanism to accelerate the application and release of video memory. The video memory released in the program will be stored in the video memory pool and will not be actively released to the CUDA driver. Therefore, use the ``nvidia-smi'' command to observe The video memory usage may be greater than the actual usage value."

#: ../../source/user-guide/faq/gpu-memory.rst:16
msgid "可以使用 :meth:`~megengine.get_mem_status_bytes` 来获取某个计算设备的总显存和空闲显存（此时的空闲显存包含了显存池中未分配的显存），根据两者的差值即可获知当前准确的显存占用量。"
msgstr "You can use :meth:`~megengine.get_mem_status_bytes` to get the total video memory and free video memory of a computing device (the free video memory at this time includes the unallocated video memory in the video memory pool), and the current accurate value can be obtained according to the difference between the two Video memory usage."

#: ../../source/user-guide/faq/gpu-memory.rst:20
msgid "如何释放当前占用的显存"
msgstr "How to release the currently occupied video memory"

#: ../../source/user-guide/faq/gpu-memory.rst:22
msgid "当一个 Python 对象的生命周期结束时，显存就会被释放，例如："
msgstr "When the life cycle of a Python object ends, the video memory will be released, such as："

#: ../../source/user-guide/faq/gpu-memory.rst:24
msgid "对于 :class:`~.Tensor` 对象，当没有被任何变量、:class:`~.Module` 和 :class:`~.GradManager` 引用时，将会被析构并释放显存"
msgstr "For :class:`~.Tensor` objects, when they are not referenced by any variables,:class:`~.Module` and :class:`~.GradManager`, they will be destroyed and the video memory will be released"

#: ../../source/user-guide/faq/gpu-memory.rst:25
msgid "可以通过 :code:`del` 对应的 Tensor 或 Module 对象来手动释放引用"
msgstr "You can manually release the reference through the Tensor or Module object corresponding to :code:"

#: ../../source/user-guide/faq/gpu-memory.rst:29
msgid "由于 Python GC 并不保证所有对象在引用计数为 0 时会被立刻释放，因此可能会出现对象在删除后显存却没有立刻释放的情况（尤其是在多个对象循环引用时）， 此时可以通过 :py:func:`gc.collect` 来尝试强制立刻回收。"
msgstr "Since Python GC does not guarantee that all objects will be released immediately when the reference count reaches 0, there may be cases where the memory of the object is deleted but not released immediately (especially when multiple objects are referenced circularly). :py:func:`gc.collect` to try to force collection immediately."

#: ../../source/user-guide/faq/gpu-memory.rst:34
msgid "Python 的变量生存周期与 C++ 不一样，在 for 循环结束时，有可能会遇到 Tensor 对象未释放导致的额外显存占用。 我们可以通过显式删除变量，来立刻释放掉这部分显存，示例如下："
msgstr "The variable life cycle of Python is different from that of C++. At the end of the for loop, you may encounter additional video memory usage caused by the unreleased Tensor object. We can release this part of the video memory immediately by explicitly deleting the variable, an example is as follows："

