# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, The MegEngine Open Source Team
# This file is distributed under the same license as the MegEngine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine 1.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-14 16:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:2
msgid "megengine.data.transform.VisionTransform"
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:1
msgid "Bases: :class:`megengine.data.transform.meta_transform.Transform`"
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:1
msgid "Base class of all transforms used in computer vision. Calling logic: apply_batch() -> apply() -> _apply_image() and other _apply_*() method. If you want to implement a self-defined transform method for image, rewrite _apply_image method in subclass."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:0
msgid "Parameters"
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:6
msgid "input type order. Input is a tuple containing different structures, order is used to specify the order of structures. For example, if your input is (image, boxes) type, then the ``order`` should be (\"image\", \"boxes\"). Current available strings and data type are describe below:  * \"image\": input image, with shape of `(H, W, C)`. * \"coords\": coordinates, with shape of `(N, 2)`. * \"boxes\": bounding boxes, with shape of `(N, 4)`, \"xyxy\" format,   the 1st \"xy\" represents top left point of a box,   the 2nd \"xy\" represents right bottom point. * \"mask\": map used for segmentation, with shape of `(H, W, 1)`. * \"keypoints\": keypoints with shape of `(N, K, 3)`, N for number of instances,   and K for number of keypoints in one instance. The first two dimensions   of last axis is coordinate of keypoints and the the 3rd dimension is   the label of keypoints. * \"polygons\": a sequence containing numpy arrays, its length is the number of instances.   Each numpy array represents polygon coordinate of one instance. * \"category\": categories for some data type. For example, \"image_category\"   means category of the input image and \"boxes_category\" means categories of   bounding boxes. * \"info\": information for images such as image shapes and image path.  You can also customize your data types only if you implement the corresponding _apply_*() methods, otherwise ``NotImplementedError`` will be raised."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:6
msgid "input type order. Input is a tuple containing different structures, order is used to specify the order of structures. For example, if your input is (image, boxes) type, then the ``order`` should be (\"image\", \"boxes\"). Current available strings and data type are describe below:"
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:11
msgid "\"image\": input image, with shape of `(H, W, C)`."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:12
msgid "\"coords\": coordinates, with shape of `(N, 2)`."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:13
msgid "\"boxes\": bounding boxes, with shape of `(N, 4)`, \"xyxy\" format, the 1st \"xy\" represents top left point of a box, the 2nd \"xy\" represents right bottom point."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:16
msgid "\"mask\": map used for segmentation, with shape of `(H, W, 1)`."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:17
msgid "\"keypoints\": keypoints with shape of `(N, K, 3)`, N for number of instances, and K for number of keypoints in one instance. The first two dimensions of last axis is coordinate of keypoints and the the 3rd dimension is the label of keypoints."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:21
msgid "\"polygons\": a sequence containing numpy arrays, its length is the number of instances. Each numpy array represents polygon coordinate of one instance."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:23
msgid "\"category\": categories for some data type. For example, \"image_category\" means category of the input image and \"boxes_category\" means categories of bounding boxes."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:26
msgid "\"info\": information for images such as image shapes and image path."
msgstr ""

#: ../../../../../home/caoxiaowei/.local/lib/python3.7/site-packages/megengine/data/transform/vision/transform.py:docstring of megengine.data.transform.vision.transform.VisionTransform:28
msgid "You can also customize your data types only if you implement the corresponding _apply_*() methods, otherwise ``NotImplementedError`` will be raised."
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:11
msgid "Methods"
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:16:<autosummary>:1
msgid ":obj:`__init__ <megengine.data.transform.VisionTransform.__init__>`\\ \\(\\[order\\]\\)"
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:16:<autosummary>:1
msgid "Initialize self."
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:16:<autosummary>:1
msgid ":obj:`apply <megengine.data.transform.VisionTransform.apply>`\\ \\(input\\)"
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:16:<autosummary>:1
msgid "Apply transform on single input data."
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:16:<autosummary>:1
msgid ":obj:`apply_batch <megengine.data.transform.VisionTransform.apply_batch>`\\ \\(inputs\\)"
msgstr ""

#: ../../source/reference/api/megengine.data.transform.VisionTransform.rst:16:<autosummary>:1
msgid "Apply transform on batch input data."
msgstr ""
