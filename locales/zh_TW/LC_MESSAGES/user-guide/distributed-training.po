msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-15 19:44+0800\n"
"PO-Revision-Date: 2021-04-20 07:07\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/en/LC_MESSAGES/user-guide/distributed-training.po\n"
"X-Crowdin-File-ID: 2846\n"
"Language: zh_TW\n"

#: ../../source/user-guide/distributed-training.rst:5
msgid "分布式训练"
msgstr "crwdns45260:0crwdne45260:0"

#: ../../source/user-guide/distributed-training.rst:7
msgid "本章我们将介绍如何在 MegEngine 中高效地利用多 GPU 进行分布式训练。 分布式训练是指同时利用一台或者多台机器上的 GPU 进行并行计算。 在深度学习领域，最常见的并行计算方式是在数据层面进行的， 即每个 GPU 各自负责一部分数据，并需要跑通整个训练和推理流程。 这种方式叫做 **数据并行** 。"
msgstr "crwdns45262:0crwdne45262:0"

#: ../../source/user-guide/distributed-training.rst:13
msgid "目前 MegEngine 开放的接口支持单机多卡和多机多卡的数据并行方式。"
msgstr "crwdns45264:0crwdne45264:0"

#: ../../source/user-guide/distributed-training.rst:17
msgid "单机多卡"
msgstr "crwdns45266:0crwdne45266:0"

#: ../../source/user-guide/distributed-training.rst:19
msgid "单机多卡是最为常用的方式，比如单机四卡、单机八卡，足以支持我们完成大部分模型的训练。"
msgstr "crwdns45268:0crwdne45268:0"

#: ../../source/user-guide/distributed-training.rst:21
msgid "本节我们按照以下顺序进行介绍："
msgstr "crwdns45270:0crwdne45270:0"

#: ../../source/user-guide/distributed-training.rst:23
#: ../../source/user-guide/distributed-training.rst:29
msgid "如何启动一个单机多卡的训练"
msgstr "crwdns45272:0crwdne45272:0"

#: ../../source/user-guide/distributed-training.rst:24
#: ../../source/user-guide/distributed-training.rst:55
msgid "数据处理流程"
msgstr "crwdns45274:0crwdne45274:0"

#: ../../source/user-guide/distributed-training.rst:25
msgid "进程间训练状态如何同步"
msgstr "crwdns45276:0crwdne45276:0"

#: ../../source/user-guide/distributed-training.rst:26
msgid "如何在多进程环境中将模型保存与加载"
msgstr "crwdns45278:0crwdne45278:0"

#: ../../source/user-guide/distributed-training.rst:31
msgid "我们提供了一个单机多卡的启动器。代码示例："
msgstr "crwdns45280:0crwdne45280:0"

#: ../../source/user-guide/distributed-training.rst:50
msgid ":class:`~.distributed.launcher` 将一个 function 包装成一个多进程运行的 function (默认根据机器上的 device 数量开启多进程)， 每个进程会在最开始根据 rank 设定默认 deivce, 假如是一台 8 卡机器，那么就会开启 8 个进程，rank 分别为 0 到 8 ，device 为 gpu0 到 gpu7."
msgstr "crwdns45282:0:class:crwdne45282:0"

#: ../../source/user-guide/distributed-training.rst:57
msgid "用 :class:`~.distributed.launcher` 启动之后，我们便可以按照正常的流程进行训练了， 但是由于需要每个进程处理不同的数据，我们还需要在数据部分做一些额外的操作。"
msgstr "crwdns45284:0:class:crwdne45284:0"

#: ../../source/user-guide/distributed-training.rst:60
msgid "在这里我们以载入 MNIST 数据为例，展示如何对数据做切分，使得每个进程拿到不重叠的数据。 此处我们将整个数据集载入内存后再进行切分。 这种方式比较低效，仅作为原理示意，更加高效的方式见 :ref:`dist_dataloader` 。"
msgstr "crwdns45286:0:ref:crwdne45286:0"

#: ../../source/user-guide/distributed-training.rst:75
msgid "至此我们便得到了每个进程各自负责的、互不重叠的数据部分。"
msgstr "crwdns45288:0crwdne45288:0"

#: ../../source/user-guide/distributed-training.rst:78
msgid "参数同步"
msgstr "crwdns45290:0crwdne45290:0"

#: ../../source/user-guide/distributed-training.rst:80
msgid "初始化模型的参数之后，我们可以调用 :func:`~.distributed.bcast_list_` 对进程间模型的参数进行广播同步："
msgstr "crwdns45292:0:func:crwdne45292:0"

#: ../../source/user-guide/distributed-training.rst:89
msgid "在反向传播求梯度的步骤中，我们通过插入 callback 函数的形式， 对各个进程计算出的梯度进行累加，各个进程都拿到的是累加后的梯度。代码示例："
msgstr "crwdns45294:0crwdne45294:0"

#: ../../source/user-guide/distributed-training.rst:104
msgid "模型保存与加载"
msgstr "crwdns45296:0crwdne45296:0"

#: ../../source/user-guide/distributed-training.rst:106
msgid "在 MegEngine 中，依赖于上面提到的状态同步机制，我们保持了各个进程状态的一致， 因此可以很容易地实现模型的保存和加载。"
msgstr "crwdns45298:0crwdne45298:0"

#: ../../source/user-guide/distributed-training.rst:109
msgid "对于加载，我们只要在主进程（rank 0 进程）中加载模型参数， 然后调用 :func:`~.distributed.bcast_list_` 对各个进程的参数进行同步，就保持了各个进程的状态一致。"
msgstr "crwdns45300:0:func:crwdne45300:0"

#: ../../source/user-guide/distributed-training.rst:112
msgid "对于保存，由于我们在梯度计算中插入了 callback 函数对各个进程的梯度进行累加， 所以我们进行参数更新后的参数还是一致的，可以直接保存。"
msgstr "crwdns45302:0crwdne45302:0"

#: ../../source/user-guide/distributed-training.rst:115
msgid "可以参考以下示例代码实现："
msgstr "crwdns45304:0crwdne45304:0"

#: ../../source/user-guide/distributed-training.rst:139
msgid "使用 DataLoader 进行数据加载"
msgstr "crwdns45306:0crwdne45306:0"

#: ../../source/user-guide/distributed-training.rst:141
msgid "在上一节，为了简单起见，我们将整个数据集全部载入内存。 实际中，我们可以通过 :class:`~.megengine.data.DataLoader` 来更高效地加载数据。"
msgstr "crwdns45308:0:class:crwdne45308:0"

#: ../../source/user-guide/distributed-training.rst:144
msgid ":class:`~.megengine.data.DataLoader` 会自动帮我们处理分布式训练时数据相关的问题， 可以实现使用单卡训练时一样的数据加载代码，具体来说："
msgstr "crwdns45310:0:class:crwdne45310:0"

#: ../../source/user-guide/distributed-training.rst:147
msgid "所有采样器 :class:`~.megengine.data.Sampler` 都会自动地做类似上文中数据切分的操作， 使得所有进程都能获取互不重复的数据。"
msgstr "crwdns45312:0:class:crwdne45312:0"

#: ../../source/user-guide/distributed-training.rst:149
msgid "每个进程的 :class:`~.megengine.data.DataLoader` 还会自动调用分布式相关接口实现内存共享， 避免不必要的内存占用，从而显著加速数据读取。"
msgstr "crwdns45314:0:class:crwdne45314:0"

#: ../../source/user-guide/distributed-training.rst:152
msgid "总之，在分布式训练时，你无需对使用 :class:`~.megengine.data.DataLoader` 的方式进行任何修改，一切都能无缝地切换。"
msgstr "crwdns45316:0:class:crwdne45316:0"

#: ../../source/user-guide/distributed-training.rst:157
msgid "多机多卡"
msgstr "crwdns45318:0crwdne45318:0"

#: ../../source/user-guide/distributed-training.rst:159
msgid "在 MegEngine 中，我们能很方便地将上面单机多卡的代码修改为多机多卡， 只需修改传给 :func:`~.megengine.distributed.launcher` 的参数就可以进行多机多卡训练"
msgstr "crwdns45320:0:func:crwdne45320:0"

#: ../../source/user-guide/distributed-training.rst:183
msgid "其中 ``world_size`` 是你训练的用到的总卡数， ``n_gpus`` 是你运行时这台物理机的卡数， ``rank_start`` 是这台机器的 rank 起始值， ``master_ip`` 是 rank 0 所在机器的 IP 地址， ``port`` 是分布式训练 master server 使用的端口号，其它部分与单机版本完全相同。 最终只需在每个机器上执行相同的 Python 程序，即可实现多机多卡的分布式训练。"
msgstr "crwdns45322:0crwdne45322:0"

#: ../../source/user-guide/distributed-training.rst:189
msgid "模型并行"
msgstr "crwdns45324:0crwdne45324:0"

#: ../../source/user-guide/distributed-training.rst:191
msgid "在 MegEngine 中，也支持模型并行的方式来做训练。"
msgstr "crwdns45326:0crwdne45326:0"

#: ../../source/user-guide/distributed-training.rst:193
msgid "最简单的模型并行就是把一个模型拆分成上下两个部分来做，在 MegEngine 中可以简单的实现。"
msgstr "crwdns45328:0crwdne45328:0"

#: ../../source/user-guide/distributed-training.rst:195
msgid "下面是一个简单的例子来展示怎么写一个模型并行的训练："
msgstr "crwdns45330:0crwdne45330:0"

#: ../../source/user-guide/distributed-training.rst:244
msgid "常见问题"
msgstr "crwdns45332:0crwdne45332:0"

#: ../../source/user-guide/distributed-training.rst:246
msgid "Q: 为什么在多机多卡训练开始前还正常，进入多卡训练之后就报错 ``cuda init error`` ?"
msgstr "crwdns45334:0crwdne45334:0"

#: ../../source/user-guide/distributed-training.rst:248
msgid "A: 请确保在进入多机多卡训练之前主进程没有进行 cuda 相关操作，cuda 在已经初始化的状态下进行 fork 操作会导致 fork 的进程中 cuda 不可用， 参考 `这里 <https://stackoverflow.com/questions/22950047/cuda-initialization-error-after-fork>`_ . 建议用 numpy 数组作为输入输出来使用 launcher 包装的函数。"
msgstr "crwdns45336:0crwdne45336:0"

#: ../../source/user-guide/distributed-training.rst:251
msgid "Q: 为什么我自己用 ``multiprocess`` 写多机多卡训练总是卡住？"
msgstr "crwdns45338:0crwdne45338:0"

#: ../../source/user-guide/distributed-training.rst:256
msgid "A: 可以在函数结束前调用 :func:`~.distributed.group_barrier` 来避免卡死的情况:"
msgstr "crwdns45340:0:func:crwdne45340:0"

#: ../../source/user-guide/distributed-training.rst:254
msgid "在 MegEngine 中，为了保证性能，会异步执行相应的 cuda kernel，所以当 python 代码执行完毕时，相应的 kernel 执行还没有结束。"
msgstr "crwdns45342:0crwdne45342:0"

#: ../../source/user-guide/distributed-training.rst:255
msgid "为了保证 kernel 全部执行完毕，MegEngine 初始化时在 :py:mod:`atexit` 里注册了全局的同步，但是 multiprocess 默认的 fork 模式在进程退出的时候，不会执行 :py:mod:`atexit` 注册的函数，导致 kernel 没有执行完。"
msgstr "crwdns45344:0crwdne45344:0"

#: ../../source/user-guide/distributed-training.rst:256
msgid "如果有进程间需要通信的算子，而又有几个进程提前退出，那么剩下的进程就会一直等待其他进程导致卡死（如果你某个进程比如 rank0 需要取参数的值）。"
msgstr "crwdns45346:0crwdne45346:0"

