msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-17 20:15+0800\n"
"PO-Revision-Date: 2021-11-12 01:27\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/en/LC_MESSAGES/user-guide/model-development/dtr/index.po\n"
"X-Crowdin-File-ID: 8179\n"
"Language: zh_TW\n"

#: ../../source/user-guide/model-development/dtr/index.rst:5
msgid "动态图 Sublinear 显存优化（DTR）"
msgstr "crwdns85139:0crwdne85139:0"

#: ../../source/user-guide/model-development/dtr/index.rst:7
msgid "MegEngine 通过引入 `Dynamic Tensor Rematerialization <https://arxiv.org/pdf/2006.09616.pdf>`_ （简称 DTR）技术，进一步工程化地解决了动态图显存优化的问题，从而享受到大 Batchsize 训练带来的收益。"
msgstr "crwdns85141:0crwdne85141:0"

#: ../../source/user-guide/model-development/dtr/index.rst:12
msgid "单卡训练"
msgstr "crwdns85143:0crwdne85143:0"

#: ../../source/user-guide/model-development/dtr/index.rst:14
msgid "使用方式十分简单，在训练代码之前添加两行代码："
msgstr "crwdns85145:0crwdne85145:0"

#: ../../source/user-guide/model-development/dtr/index.rst:25
msgid "即可启用动态图的 Sublinear 显存优化。"
msgstr "crwdns85147:0crwdne85147:0"

#: ../../source/user-guide/model-development/dtr/index.rst:29
msgid "从 MegEngine V1.5 开始，在开启 DTR 优化时不设置 ``eviction_threshold`` 也是被允许的。此时动态图显存优化将会在空闲的显存无法满足一次申请时生效，根据 DTR 的策略找出最优的 tensor 并释放其显存，直到该次显存申请成功。"
msgstr "crwdns85149:0crwdne85149:0"

#: ../../source/user-guide/model-development/dtr/index.rst:32
msgid "分布式训练"
msgstr "crwdns85151:0crwdne85151:0"

#: ../../source/user-guide/model-development/dtr/index.rst:34
msgid "关于分布式训练的开启，请参考 :ref:`分布式训练 <distributed-guide>` 。"
msgstr "crwdns85153:0:ref:crwdne85153:0"

#: ../../source/user-guide/model-development/dtr/index.rst:36
msgid ":class:`~.distributed.launcher` 将一个 function 包装成一个多进程运行的 function，你需要在这个 function 中定义 DTR 的参数："
msgstr "crwdns85155:0:class:crwdne85155:0"

#: ../../source/user-guide/model-development/dtr/index.rst:52
msgid "更多设置"
msgstr "crwdns85157:0crwdne85157:0"

#: ../../source/user-guide/model-development/dtr/index.rst:55
msgid "参数介绍"
msgstr "crwdns85159:0crwdne85159:0"

#: ../../source/user-guide/model-development/dtr/index.rst:61
msgid "参数名"
msgstr "crwdns85161:0crwdne85161:0"

#: ../../source/user-guide/model-development/dtr/index.rst:62
msgid "实际含义"
msgstr "crwdns85163:0crwdne85163:0"

#: ../../source/user-guide/model-development/dtr/index.rst:63
msgid "``eviction_threshold``"
msgstr "crwdns85165:0crwdne85165:0"

#: ../../source/user-guide/model-development/dtr/index.rst:64
msgid "显存阈值（单位：字节）。当被使用的显存总和超过该阈值后，显存优化会生效，根据 DTR 的策略找出最优的 tensor 并释放其显存，直到被使用的显存总和低于该阈值。默认值：0"
msgstr "crwdns85167:0crwdne85167:0"

#: ../../source/user-guide/model-development/dtr/index.rst:65
msgid "``evictee_minimum_size``"
msgstr "crwdns85169:0crwdne85169:0"

#: ../../source/user-guide/model-development/dtr/index.rst:66
msgid "被释放显存的 tensor 的大小下限（单位：字节）。只有当 tensor 的大小不小于该下限时，才有可能被 DTR 策略选中释放其显存。默认值：1048576"
msgstr "crwdns85171:0crwdne85171:0"

#: ../../source/user-guide/model-development/dtr/index.rst:67
msgid "``enable_sqrt_sampling``"
msgstr "crwdns85173:0crwdne85173:0"

#: ../../source/user-guide/model-development/dtr/index.rst:68
msgid "是否开启根号采样。设当前候选 tensor 集合的大小为 :math:`n`，开启该设置后，每次需要释放 tensor 时只会遍历 :math:`\\sqrt{n}` 个候选 tensor。默认值：False"
msgstr "crwdns85175:0:math:crwdnd85175:0:math:crwdnd85175:0{n}crwdne85175:0"

#: ../../source/user-guide/model-development/dtr/index.rst:70
msgid "设置方法请参考 :py:mod:`~.dtr`"
msgstr "crwdns85177:0crwdne85177:0"

#: ../../source/user-guide/model-development/dtr/index.rst:73
msgid "显存阈值的设置技巧"
msgstr "crwdns85179:0crwdne85179:0"

#: ../../source/user-guide/model-development/dtr/index.rst:75
msgid "``eviction_threshold`` 表示开始释放 tensor 的显存阈值。当被使用的显存大小超过该阈值时，动态图显存优化会生效， 根据 DTR 的策略找出最优的 tensor 并释放其显存，直到活跃的显存大小不超过该阈值。因此实际运行时的活跃显存峰值比该阈值高一些属于正常现象。"
msgstr "crwdns85181:0crwdne85181:0"

#: ../../source/user-guide/model-development/dtr/index.rst:78
msgid "一般情况下，显存阈值设得越小，显存峰值就越低，训练耗时也会越大；显存阈值设得越大，显存峰值就越高，训练耗时也会越小。"
msgstr "crwdns85183:0crwdne85183:0"

#: ../../source/user-guide/model-development/dtr/index.rst:80
msgid "值得注意的是，当显存阈值接近显卡容量时，容易引发碎片问题。因为 DTR 是根据活跃的显存大小来执行释放操作的，释放掉的 tensor 在显卡上的物理地址很可能不连续。 例如：释放了两个物理位置不相邻的 100MB 的 tensor，仍然无法满足一次 200MB 显存的申请。此时就会自动触发碎片整理操作，对性能造成巨大影响。"
msgstr "crwdns85185:0crwdne85185:0"

#: ../../source/user-guide/model-development/dtr/index.rst:83
msgid "下图是 ResNet50（batch size=200）在2080Ti（显存：11GB）上设定不同显存阈值后的性能表现。"
msgstr "crwdns85187:0crwdne85187:0"

#: ../../source/user-guide/model-development/dtr/index.rst:89
msgid "性能表现"
msgstr "crwdns85189:0crwdne85189:0"

#: ../../source/user-guide/model-development/dtr/index.rst:91
msgid "如上图（左）所示，"
msgstr "crwdns85191:0crwdne85191:0"

#: ../../source/user-guide/model-development/dtr/index.rst:93
msgid "当显存阈值从 2 增长到 7 的时候，训练耗时是越来越低的，因为随着显存阈值升高，释放掉的 tensor 数量变少，重计算的开销降低；"
msgstr "crwdns85193:0crwdne85193:0"

#: ../../source/user-guide/model-development/dtr/index.rst:94
msgid "当显存阈值增长到 8 和 9 的时候，可供申请的空闲显存总和已经不多，并且地址大概率不连续，导致需要不断地进行碎片整理，造成训练耗时显著增长，"
msgstr "crwdns85195:0crwdne85195:0"

#: ../../source/user-guide/model-development/dtr/index.rst:95
msgid "当显存阈值增长到 10 之后，空闲的显存甚至无法支持一次 kernel 的计算，导致 OOM."
msgstr "crwdns85197:0crwdne85197:0"

#: ../../source/user-guide/model-development/dtr/index.rst:98
msgid "显存峰值"
msgstr "crwdns85199:0crwdne85199:0"

#: ../../source/user-guide/model-development/dtr/index.rst:100
msgid "如上图（右）所示，可以看出显存阈值和显存峰值之间有很大的差距。"
msgstr "crwdns85201:0crwdne85201:0"

#: ../../source/user-guide/model-development/dtr/index.rst:102
msgid "当显存阈值在 2 到 5 之间时，显存峰值都在 8 左右；"
msgstr "crwdns85203:0crwdne85203:0"

#: ../../source/user-guide/model-development/dtr/index.rst:103
msgid "当显存阈值在 6 到 9 之间时，显存峰值更是逼近显存总容量。"
msgstr "crwdns85205:0crwdne85205:0"

#: ../../source/user-guide/model-development/dtr/index.rst:105
msgid "前者的原因是，DTR 只能保证在任意时刻，被使用的显存总和在显存阈值附近，但是这些被使用的显存的地址不一定连续。 被释放掉的空闲块会被 MegEngine 收集起来，当最大的空闲块大小也满足不了一次申请时, MegEngine 会从 CUDA 申请一段新的显存， 虽然被使用的显存总量在显存阈值附近，但是显存峰值上升了； 后者的原因是显存容量总共只有 11G，如果最大的空闲块大小也无法满足申请时只能靠碎片整理来满足申请，峰值不会变得更大。"
msgstr "crwdns85207:0crwdne85207:0"

#: ../../source/user-guide/model-development/dtr/index.rst:110
msgid "所以从 ``nvidia-smi`` 上看到的显存峰值会显著高于显存阈值。"
msgstr "crwdns85209:0crwdne85209:0"

#: ../../source/user-guide/model-development/dtr/index.rst:112
msgid "综上所述，在实际训练过程中，显存阈值需要用户根据模型和显卡的具体情况设定。"
msgstr "crwdns85211:0crwdne85211:0"

#: ../../source/user-guide/model-development/dtr/index.rst:115
msgid "FAQ"
msgstr "crwdns85213:0crwdne85213:0"

#: ../../source/user-guide/model-development/dtr/index.rst:117
msgid "Q：为什么 ``eviction_threshold=2GB`` 的时候训练耗时远高于 ``eviction_threshold=3GB`` 的训练耗时？"
msgstr "crwdns85215:0crwdne85215:0"

#: ../../source/user-guide/model-development/dtr/index.rst:119
msgid "A：因为在该模型中，不可被释放的 tensor（例如：参数、执行当前算子需要用到的输入 tensor 和产生的输出 tensor 等等）的大小之和一直保持在 2GB 以上，所以几乎所有的 tensor 都会在不被用到的时刻立即被释放，所以会产生非常可观的重计算时间开销。"
msgstr "crwdns85217:0crwdne85217:0"

#: ../../source/user-guide/model-development/dtr/index.rst:121
msgid "Q：为什么 ``eviction_threshold=2GB`` 的时候显存峰值高于 ``eviction_threshold=3GB`` 的显存峰值？"
msgstr "crwdns85219:0crwdne85219:0"

#: ../../source/user-guide/model-development/dtr/index.rst:123
msgid "A：原因同上，由于 ``eviction_threshold=2GB`` 时重计算次数远多于 ``eviction_threshold=3GB`` ，需要频繁地申请和释放显存， 一旦某次空闲块大小不能满足申请，显存峰值就会增加，所以 ``eviction_threshold=2GB`` 时显存峰值大概率更高。"
msgstr "crwdns85221:0crwdne85221:0"

#: ../../source/user-guide/model-development/dtr/index.rst:126
msgid "Q：用不同的 ``eviction_threshold`` 训练模型时的显存峰值可以估算吗？"
msgstr "crwdns85223:0crwdne85223:0"

#: ../../source/user-guide/model-development/dtr/index.rst:128
msgid "A：很难。这取决于 DTR 策略释放和重计算了哪些 tensor，以及具体到某次显存申请时空闲块大小能否满足要求，这些都会影响最终的显存峰值。"
msgstr "crwdns85225:0crwdne85225:0"

#~ msgid "参数设置"
#~ msgstr ""

