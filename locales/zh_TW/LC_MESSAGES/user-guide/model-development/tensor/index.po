msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-08 21:51+0800\n"
"PO-Revision-Date: 2021-11-12 01:26\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/en/LC_MESSAGES/user-guide/model-development/tensor/index.po\n"
"X-Crowdin-File-ID: 8139\n"
"Language: zh_TW\n"

#: ../../source/user-guide/model-development/tensor/index.rst:6
msgid "深入理解 Tensor 数据结构"
msgstr "crwdns83523:0crwdne83523:0"

#: ../../source/user-guide/model-development/tensor/index.rst:19
msgid "MegEngine 中提供了一种名为 “张量” （:py:class:`Tensor` ）的数据结构， 区别于数学中的定义，其概念与 NumPy_ 中的 :py:class:`~numpy.ndarray` 更加相似， 即张量是一类同构多维数组，其中每个元素占用相同大小的内存块，并且所有块都以完全相同的方式解释。 如何解释 Tensor 中的元素由其 :ref:`数据类型 <tensor-dtype>` 决定，而每种数据类型都代表一类 Tensor."
msgstr "crwdns83525:0:ref:crwdne83525:0"

#: ../../source/user-guide/model-development/tensor/index.rst:24
msgid "我们可以基于 Tensor 数据结构，进行各式各样的科学计算；"
msgstr "crwdns83527:0crwdne83527:0"

#: ../../source/user-guide/model-development/tensor/index.rst:25
msgid "Tensor 也是神经网络编程时所用的主要数据结构，网络的输入、输出和转换都使用 Tensor 表示。"
msgstr "crwdns83529:0crwdne83529:0"

#: ../../source/user-guide/model-development/tensor/index.rst:31
msgid "与 NumPy 的区别之处在于，MegEngine 还支持利用 GPU 设备进行更加高效的计算。 当 GPU 和 CPU 设备都可用时，MegEngine 将优先使用 GPU 作为默认计算设备，无需用户进行手动设定。"
msgstr "crwdns83531:0crwdne83531:0"

#: ../../source/user-guide/model-development/tensor/index.rst:34
msgid "如果有查看/改变默认计算设备的需求，请参考 :ref:`tensor-device` 中的说明。"
msgstr "crwdns83533:0:ref:crwdne83533:0"

#: ../../source/user-guide/model-development/tensor/index.rst:35
msgid "通过 :meth:`.Tensor.to` 和 :func:`.functional.copy` 可将 Tensor 拷贝到指定设备。"
msgstr "crwdns83535:0:meth:crwdnd83535:0:func:crwdne83535:0"

#: ../../source/user-guide/model-development/tensor/index.rst:39
msgid "如果你还不清楚如何获得一个 Tensor, 请参考 :ref:`tensor-creation` 。"
msgstr "crwdns83537:0:ref:crwdne83537:0"

#: ../../source/user-guide/model-development/tensor/index.rst:44
msgid "概念（术语）使用上的区分"
msgstr "crwdns83539:0crwdne83539:0"

#: ../../source/user-guide/model-development/tensor/index.rst:46
msgid "我们所提到的 Tensor 的概念往往是其它更具体概念的概括（或者说推广），下面有一些例子："
msgstr "crwdns83541:0crwdne83541:0"

#: ../../source/user-guide/model-development/tensor/index.rst:49
#: ../../source/user-guide/model-development/tensor/index.rst:111
msgid "数学"
msgstr "crwdns83543:0crwdne83543:0"

#: ../../source/user-guide/model-development/tensor/index.rst:49
#: ../../source/user-guide/model-development/tensor/index.rst:111
msgid "计算机科学"
msgstr "crwdns83545:0crwdne83545:0"

#: ../../source/user-guide/model-development/tensor/index.rst:49
msgid "抽象概念"
msgstr "crwdns83547:0crwdne83547:0"

#: ../../source/user-guide/model-development/tensor/index.rst:49
msgid "具象化例子"
msgstr "crwdns83549:0crwdne83549:0"

#: ../../source/user-guide/model-development/tensor/index.rst:51
#: ../../source/user-guide/model-development/tensor/index.rst:113
msgid "标量（scalar）"
msgstr "crwdns83551:0crwdne83551:0"

#: ../../source/user-guide/model-development/tensor/index.rst:51
#: ../../source/user-guide/model-development/tensor/index.rst:113
msgid "数字（number）"
msgstr "crwdns83553:0crwdne83553:0"

#: ../../source/user-guide/model-development/tensor/index.rst:51
msgid "点"
msgstr "crwdns83555:0crwdne83555:0"

#: ../../source/user-guide/model-development/tensor/index.rst:51
msgid "得分、概率"
msgstr "crwdns83557:0crwdne83557:0"

#: ../../source/user-guide/model-development/tensor/index.rst:52
#: ../../source/user-guide/model-development/tensor/index.rst:114
msgid "向量（vector）"
msgstr "crwdns83559:0crwdne83559:0"

#: ../../source/user-guide/model-development/tensor/index.rst:52
#: ../../source/user-guide/model-development/tensor/index.rst:114
msgid "数组（array）"
msgstr "crwdns83561:0crwdne83561:0"

#: ../../source/user-guide/model-development/tensor/index.rst:52
msgid "线"
msgstr "crwdns83563:0crwdne83563:0"

#: ../../source/user-guide/model-development/tensor/index.rst:52
msgid "列表"
msgstr "crwdns83565:0crwdne83565:0"

#: ../../source/user-guide/model-development/tensor/index.rst:53
#: ../../source/user-guide/model-development/tensor/index.rst:115
msgid "矩阵（matrix）"
msgstr "crwdns83567:0crwdne83567:0"

#: ../../source/user-guide/model-development/tensor/index.rst:53
#: ../../source/user-guide/model-development/tensor/index.rst:115
msgid "2 维数组（2d-array）"
msgstr "crwdns83569:0crwdne83569:0"

#: ../../source/user-guide/model-development/tensor/index.rst:53
msgid "面"
msgstr "crwdns83571:0crwdne83571:0"

#: ../../source/user-guide/model-development/tensor/index.rst:53
msgid "Excel 表格"
msgstr "crwdns83573:0crwdne83573:0"

#: ../../source/user-guide/model-development/tensor/index.rst:56
msgid "不同的研究领域对同一个概念使用不同的术语进行描述，这很常见，对这些概念不清晰的话很容易产生疑惑。"
msgstr "crwdns83575:0crwdne83575:0"

#: ../../source/user-guide/model-development/tensor/index.rst:58
msgid "Python 中提供了 `array <https://docs.python.org/3/library/array.html>`_ 的官方实现， 但其使用方法和我们提到的 NumPy 数组有所不同，因此我们可以用 Python （嵌套）列表 :py:class:`list` 来类比举例。 在后续的页面，我们会慢慢地过渡到 Tensor 的实际使用和操作中。"
msgstr "crwdns83577:0crwdne83577:0"

#: ../../source/user-guide/model-development/tensor/index.rst:62
msgid "注意：为了方便理解，我们这里假设此处 Python 列表中的数据类型是一致的，比如都是 Number 类型。"
msgstr "crwdns83579:0crwdne83579:0"

#: ../../source/user-guide/model-development/tensor/index.rst:66
msgid "在深度学习领域，我们通常将上述这些概念统称为张量（Tensor）。"
msgstr "crwdns83581:0crwdne83581:0"

#: ../../source/user-guide/model-development/tensor/index.rst:71
msgid "访问 Tensor 中某个元素"
msgstr "crwdns83583:0crwdne83583:0"

#: ../../source/user-guide/model-development/tensor/index.rst:72
msgid "对于数字（或者说标量） Tensor, 显然我们可以直接得到其值，因为它只有一个元素。"
msgstr "crwdns83585:0crwdne83585:0"

#: ../../source/user-guide/model-development/tensor/index.rst:78
msgid "其它情况下，想要在 Tensor 中获得某个元素，需要提供对应位置的整数索引（Index），并使用下标运算符 ``[]``:"
msgstr "crwdns83587:0crwdne83587:0"

#: ../../source/user-guide/model-development/tensor/index.rst:80
msgid "注意：Tensor 的索引是基于零（Zero-based）开始计数的，和 Python 列表 / NumPy 多维数组一致；"
msgstr "crwdns83589:0crwdne83589:0"

#: ../../source/user-guide/model-development/tensor/index.rst:81
msgid "比如我们想要获取向量/数组 ``a = [0, 1, 2, 3, 4]`` 中的第 3 个元素，我们需要使用 ``a[2]``;"
msgstr "crwdns83591:0[2]crwdne83591:0"

#: ../../source/user-guide/model-development/tensor/index.rst:82
msgid "又比如我们想要获取下面这个 2d-数组 ``b`` 中值为 6 的元素，则需要使用 ``b[1][2]``;"
msgstr "crwdns83593:0[1]crwdnd83593:0[2]crwdne83593:0"

#: ../../source/user-guide/model-development/tensor/index.rst:90
msgid "我们可以理解成先访问 ``b[1]``, 再将 ``b[1]`` 看成单独的一部分，去访问 ``b[1]`` 中索引为 2 的元素。"
msgstr "crwdns83595:0[1]crwdnd83595:0[1]crwdnd83595:0[1]crwdne83595:0"

#: ../../source/user-guide/model-development/tensor/index.rst:92
msgid "二维情况可以类比成我们在矩阵 :math:`M` 中按照先行后列的顺序去获取元素——"
msgstr "crwdns83597:0:math:crwdne83597:0"

#: ../../source/user-guide/model-development/tensor/index.rst:94
msgid "M =\n"
"\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     4 & 5 & \\color{blue}{6} \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"\\quad\n"
"M_{(1,2)} = 6"
msgstr "crwdns83599:0{bmatrix}crwdnd83599:0{blue}crwdnd83599:0{6}crwdnd83599:0{bmatrix}crwdne83599:0"

#: ../../source/user-guide/model-development/tensor/index.rst:105
msgid "在更高维度的情况下，再用专门的 “标量”，“向量”，“矩阵”... 术语去定义结构是很不现实的。"
msgstr "crwdns83601:0crwdne83601:0"

#: ../../source/user-guide/model-development/tensor/index.rst:107
msgid "因此在数学中提供了 n 维张量的概念，对应地，NumPy 中提供了 n 维数组；"
msgstr "crwdns83603:0crwdne83603:0"

#: ../../source/user-guide/model-development/tensor/index.rst:108
msgid "n 维张量和 n 维数组中的 n 则表明从中获取元素需要提供 n 个索引值。"
msgstr "crwdns83605:0crwdne83605:0"

#: ../../source/user-guide/model-development/tensor/index.rst:111
msgid "获取值所需标量索引数量"
msgstr "crwdns83607:0crwdne83607:0"

#: ../../source/user-guide/model-development/tensor/index.rst:113
msgid "0"
msgstr "crwdns83609:0crwdne83609:0"

#: ../../source/user-guide/model-development/tensor/index.rst:114
msgid "1"
msgstr "crwdns83611:0crwdne83611:0"

#: ../../source/user-guide/model-development/tensor/index.rst:115
msgid "2"
msgstr "crwdns83613:0crwdne83613:0"

#: ../../source/user-guide/model-development/tensor/index.rst:116
msgid "n 维张量（nd-tensor）"
msgstr "crwdns83615:0crwdne83615:0"

#: ../../source/user-guide/model-development/tensor/index.rst:116
msgid "n 维数组（nd-array）"
msgstr "crwdns83617:0crwdne83617:0"

#: ../../source/user-guide/model-development/tensor/index.rst:116
msgid "n"
msgstr "crwdns83619:0crwdne83619:0"

#: ../../source/user-guide/model-development/tensor/index.rst:119
msgid "现在我们已经可以忘掉上面这些术语，统一用 n 来确定 Tensor 维度的数量。"
msgstr "crwdns83621:0crwdne83621:0"

#: ../../source/user-guide/model-development/tensor/index.rst:121
msgid "因此我们可以这样理解："
msgstr "crwdns83623:0crwdne83623:0"

#: ../../source/user-guide/model-development/tensor/index.rst:123
msgid "一个标量是一个 0 维 Tensor;"
msgstr "crwdns83625:0crwdne83625:0"

#: ../../source/user-guide/model-development/tensor/index.rst:124
msgid "一个向量是一个 1 维 Tensor;"
msgstr "crwdns83627:0crwdne83627:0"

#: ../../source/user-guide/model-development/tensor/index.rst:125
msgid "一个矩阵是一个 2 维 Tensor;"
msgstr "crwdns83629:0crwdne83629:0"

#: ../../source/user-guide/model-development/tensor/index.rst:126
msgid "一个 n 维数组是一个 n 维 Tensor."
msgstr "crwdns83631:0crwdne83631:0"

#: ../../source/user-guide/model-development/tensor/index.rst:128
msgid "而在访问 n 维 Tensor （假定为 :math:`T` ）的特定某个元素时，可以使用如下语法："
msgstr "crwdns83633:0:math:crwdne83633:0"

#: ../../source/user-guide/model-development/tensor/index.rst:130
msgid "T_{[i_1][i_2]\\ldots [i_n]}"
msgstr "crwdns83635:0[i_1]crwdnd83635:0[i_2]crwdnd83635:0[i_n]crwdne83635:0"

#: ../../source/user-guide/model-development/tensor/index.rst:134
msgid "即我们要提供 :math:`i_1, i_2, \\ldots ,i_n` 共 n 个索引值，每次索引降低一个维度，最终得到 0 维数字（标量）。"
msgstr "crwdns83637:0:math:crwdne83637:0"

#: ../../source/user-guide/model-development/tensor/index.rst:136
msgid "比如我们得知要找的某个人住在某小区的 23 号楼 3 单元 902 室，因此我们需要访问 ``court[23][3][9][2]``;"
msgstr "crwdns83639:0[23]crwdnd83639:0[3]crwdnd83639:0[9]crwdnd83639:0[2]crwdne83639:0"

#: ../../source/user-guide/model-development/tensor/index.rst:140
msgid "实际上，对于 Tensor 和多维数组，有着更加高效的索引方法，可参考 :ref:`multi-dim-indexing` 的用法。"
msgstr "crwdns83641:0:ref:crwdne83641:0"

#: ../../source/user-guide/model-development/tensor/index.rst:144
msgid "深度学习领域的 Tensor 其实就是一个多维数组（N 维数组）。"
msgstr "crwdns83643:0crwdne83643:0"

#: ../../source/user-guide/model-development/tensor/index.rst:149
msgid "使用切片获取部分元素"
msgstr "crwdns83645:0crwdne83645:0"

#: ../../source/user-guide/model-development/tensor/index.rst:151
msgid "前面我们展示了如何访问单个的元素，另一种比较常见的情况是需要对部分元素进行访问。"
msgstr "crwdns83647:0crwdne83647:0"

#: ../../source/user-guide/model-development/tensor/index.rst:153
msgid "与 Python 一致，我们可以使用切片（Slicing）操作符来访问和修改 Tensor 对象中的部分元素："
msgstr "crwdns83649:0crwdne83649:0"

#: ../../source/user-guide/model-development/tensor/index.rst:159
msgid "观察上面的例子，我们通过 ``:`` 符号进行了切片操作，语法为 ``start:stop:step``, 对应起始索引、终止索引和步长。 这种写法实际上在背后为我们生成了一个切片对象 ``slice(start:stop:step)``, 二者是等价的："
msgstr "crwdns83651:0crwdne83651:0"

#: ../../source/user-guide/model-development/tensor/index.rst:168
msgid "``start``, ``stop``, ``step`` 也可以是负数，意味着索引变化顺序与默认情况相反。"
msgstr "crwdns83653:0crwdne83653:0"

#: ../../source/user-guide/model-development/tensor/index.rst:169
msgid "``start`` 和 ``stop`` 索引区间是左闭右开的 ``[start, stop)`` 形式，即 ``a[stop]`` 本身不在切片范围之内。"
msgstr "crwdns83655:0[stop]crwdne83655:0"

#: ../../source/user-guide/model-development/tensor/index.rst:170
msgid "这个设计其实与基于零的索引方式对应，该设计的好处有很多： 当只有最后一个位置信息时，我们也可以快速计算出切片和区间内有几个元素; 同理使用 ``stop`` 减去 ``start`` 可以快速计算出切片和区间的长度，不容易混淆； 与此同时，我们可以用 ``a[:i]`` 和 ``a[i:]`` 获得原始数据分割后不重叠的两部分。"
msgstr "crwdns83657:0crwdne83657:0"

#: ../../source/user-guide/model-development/tensor/index.rst:177
msgid "计算机科学家，Edsger W. Dijkstra 教授在《`Why numbering should start at zero <https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html>`_ 》 中的内容为基于 0 的下标以及左闭右开的区间习惯进行了很好的解释。"
msgstr "crwdns83659:0crwdne83659:0"

#: ../../source/user-guide/model-development/tensor/index.rst:181
msgid "另外，切片语法中的部分元素可以被省略："
msgstr "crwdns83661:0crwdne83661:0"

#: ../../source/user-guide/model-development/tensor/index.rst:183
msgid "如果下标运算符中没有任何冒号运算符如 ``a[i]``, 则返回与该索引位置对应的单个元素；"
msgstr "crwdns83663:0[i]crwdne83663:0"

#: ../../source/user-guide/model-development/tensor/index.rst:184
msgid "如果下标运算符中只有一个冒号运算符，则需要根据不同的写法进行判断："
msgstr "crwdns83665:0crwdne83665:0"

#: ../../source/user-guide/model-development/tensor/index.rst:186
msgid "如果为 ``a[start:]``, 则表明从 ``start`` 位置往后的所有项都被提取；"
msgstr "crwdns83667:0crwdne83667:0"

#: ../../source/user-guide/model-development/tensor/index.rst:187
msgid "如果为 ``a[:stop]``, 则表明从 ``stop`` 位置往前的所有项都被提取；"
msgstr "crwdns83669:0crwdne83669:0"

#: ../../source/user-guide/model-development/tensor/index.rst:188
msgid "如果为 ``a[start:stop]``, 则表明从 ``start`` 到 ``stop`` 的所有项将被提取；"
msgstr "crwdns83671:0crwdne83671:0"

#: ../../source/user-guide/model-development/tensor/index.rst:190
msgid "如果没有指定 ``step``, 则默认提取切片范围内的所有项目。"
msgstr "crwdns83673:0crwdne83673:0"

#: ../../source/user-guide/model-development/tensor/index.rst:192
msgid "多维数组也支持使用切片语法："
msgstr "crwdns83675:0crwdne83675:0"

#: ../../source/user-guide/model-development/tensor/index.rst:198
msgid "此时可以将其当作是一个一维数组去理解，里面的每个元素又是一维数组："
msgstr "crwdns83677:0crwdne83677:0"

#: ../../source/user-guide/model-development/tensor/index.rst:209
msgid "我们这里仅仅对最外面这一层进行了索引，在 :ref:`tensor-indexing` 中会讲解更复杂的情况。"
msgstr "crwdns83679:0:ref:crwdne83679:0"

#: ../../source/user-guide/model-development/tensor/index.rst:213
msgid "使用切片索引可以从 Tensor 中访问部分元素，但有些时候我们希望获得的部分元素是不连续的， 而是几个特定位置元素的组合，此时可以使用 :ref:`数组索引 <array-indexing>` 。"
msgstr "crwdns83681:0:ref:crwdne83681:0"

#: ../../source/user-guide/model-development/tensor/index.rst:217
msgid "接下来：Tensor 基础属性"
msgstr "crwdns83683:0crwdne83683:0"

#: ../../source/user-guide/model-development/tensor/index.rst:219
msgid "通过本小节的内容，用户能够掌握最基本的 Tensor 概念。"
msgstr "crwdns83685:0crwdne83685:0"

#: ../../source/user-guide/model-development/tensor/index.rst:221
msgid "为了方便初学者学习和过渡，在上面的代码示例中，我们一直在使用 Python 的 ``list`` 来举例， 以表明 MegEngine Tensor 数据结构与 Python 嵌套列表设计的一致性，但实际上二者还是存在着一定的区别。"
msgstr "crwdns83687:0crwdne83687:0"

#: ../../source/user-guide/model-development/tensor/index.rst:224
msgid "我们再举一些例子，请你尝试猜测一下输出："
msgstr "crwdns83689:0crwdne83689:0"

#: ../../source/user-guide/model-development/tensor/index.rst:230
msgid "Python nested list"
msgstr "crwdns83691:0crwdne83691:0"

#: ../../source/user-guide/model-development/tensor/index.rst:237
msgid "MegEngine 2-d Tensor"
msgstr "crwdns83693:0crwdne83693:0"

#: ../../source/user-guide/model-development/tensor/index.rst:244
msgid "Python 嵌套列表并不支持这种语法，你能猜测出在 ``[]`` 运算符中使用 ``,`` 的作用吗？"
msgstr "crwdns83695:0crwdne83695:0"

#: ../../source/user-guide/model-development/tensor/index.rst:246
msgid "假设我们现在需要从下面这个 2 维 Tensor 中取出蓝色部分的元素，又需要如何做呢？ （ :ref:`解释 <multi-dim-slicing>` ）"
msgstr "crwdns83697:0:ref:crwdne83697:0"

#: ../../source/user-guide/model-development/tensor/index.rst:249
msgid "M =\n"
"\\begin{bmatrix}\n"
"     1 & 2 & 3 \\\\\n"
"     \\color{blue}{4} & \\color{blue}{5} & 6 \\\\\n"
"     7 & 8 & 9 \\\\\n"
"\\end{bmatrix}\n"
"\\quad\n"
"M_{(?, ?)} = (4 \\ 5)"
msgstr "crwdns83699:0{bmatrix}crwdnd83699:0{blue}crwdnd83699:0{4}crwdnd83699:0{blue}crwdnd83699:0{5}crwdnd83699:0{bmatrix}crwdne83699:0"

#: ../../source/user-guide/model-development/tensor/index.rst:260
msgid "想要解答这些问题，你必须先理解 Tensor 的 :ref:`tensor-fundamental-attributes` 等有关概念， 更好地理解 Tensor 所具备的一些特点，接着从 :ref:`tensor-indexing` 的内容中找到答案。"
msgstr "crwdns83701:0:ref:crwdnd83701:0:ref:crwdne83701:0"

#: ../../source/user-guide/model-development/tensor/index.rst:267
msgid "Tensor 数据类型"
msgstr "crwdns83703:0crwdne83703:0"

#: ../../source/user-guide/model-development/tensor/index.rst:266
msgid "我们提到了 Tensor 中的每个元素的数据类型一致，如果你想要知道具体有哪些数据类型的 Tensor, 请参考 :ref:`tensor-dtype` 。"
msgstr "crwdns83705:0:ref:crwdne83705:0"

#: ../../source/user-guide/model-development/tensor/index.rst:271
msgid "Tensor 所在设备"
msgstr "crwdns83707:0crwdne83707:0"

#: ../../source/user-guide/model-development/tensor/index.rst:270
msgid "能够利用 GPU 设备进行高效运算是 MegEngine 相较于 NumPy 的优势，想要了解不同设备之间的区别， 请参考 :ref:`tensor-device` 。"
msgstr "crwdns83709:0:ref:crwdne83709:0"

#: ../../source/user-guide/model-development/tensor/index.rst:274
msgid "Tensor 具象化举例"
msgstr "crwdns83711:0crwdne83711:0"

#: ../../source/user-guide/model-development/tensor/index.rst:274
msgid "如果你目前对于 Tensor 的概念不够直观，可以参考 :ref:`tensor-examples` 。"
msgstr "crwdns83713:0:ref:crwdne83713:0"

#: ../../source/user-guide/model-development/tensor/index.rst:276
msgid "Tensor 内存布局"
msgstr "crwdns83715:0crwdne83715:0"

#: ../../source/user-guide/model-development/tensor/index.rst:277
msgid "一些有经验的开发者喜欢研究底层的细节，可以参考 :ref:`tensor-layout` 。"
msgstr "crwdns83717:0:ref:crwdne83717:0"

#: ../../source/user-guide/model-development/tensor/index.rst:279
msgid "Python 数据 API 标准联盟协会"
msgstr "crwdns83719:0crwdne83719:0"

#: ../../source/user-guide/model-development/tensor/index.rst:282
msgid "MegEngine 中的许多 Tensor 标准 API 设计遵循了 Python 数据 API 标准联盟协会的倡导， 一些常见的实现尽可能地向 NumPy 靠近，更多细节可以参考 `Consortium for Python Data API Standards <https://data-apis.org/>`_ ."
msgstr "crwdns83721:0crwdne83721:0"

#~ msgid "如果有查看/改变默认计算设备的需求，请参考 :ref:`device` 中提供的接口。"
#~ msgstr ""

#~ msgid "其它情况下，想要在 Tensor 中获得某个元素，需要提供对应位置的标量索引（Index），并使用下标运算符 ``[]``:"
#~ msgstr ""

#~ msgid "也可以类比成我们在矩阵 :math:`M` 中按照先行后列的顺序去获取元素——"
#~ msgstr ""

#~ msgid "而在访问 n 维 Tensor （假定为 :math:`T` ）的特定某个元素时，要求使用如下语法："
#~ msgstr ""

#~ msgid "``start``, ``stop``, ``step`` 也可以是负数，意味着索引顺序与默认情况相反。"
#~ msgstr ""

#~ msgid ""
#~ "在上面的代码示例中，我们一直在使用 Python 的 ``list`` 来举例， "
#~ "以表明 MegEngine Tensor 数据结构与 Python "
#~ "设计的一致性，但实际上二者还是存在着一定的区别。"
#~ msgstr ""

#~ msgid "请猜测一下这段代码的输出，并且尝试运行验证："
#~ msgstr ""

#~ msgid "输出结果是否和你的想法一致呢？是不是有些人认为输出应该是 4 呢？"
#~ msgstr ""

#~ msgid "你能猜测出在 ``[]`` 运算符中使用 ``,`` 的作用吗？"
#~ msgstr ""

#~ msgid "假设我们现在需要从下面这个 2 维 Tensor 中取出蓝色部分的元素，又需要如何做呢？"
#~ msgstr ""

#~ msgid ""
#~ "想要解答这些问题，你必须先理解 Tensor 的 :ref:`tensor-"
#~ "fundamental-attributes` 等有关概念， 接着从 :ref"
#~ ":`tensor-advanced-indexing` 的内容中找到答案。"
#~ msgstr ""

#~ msgid ""
#~ "MegEngine 中提供了一种名为 “张量” （:py:class:`Tensor` "
#~ "）的数据结构， 区别于数学中的定义，其概念与 NumPy_ 中的 "
#~ ":py:class:`~numpy.ndarray` 更加相似， "
#~ "即张量是一类多维数组，其中每个元素的数据类型和所需空间一致，而数据值可以不同。"
#~ msgstr ""

#~ msgid "英文字母表"
#~ msgstr ""

#~ msgid "而在 Python 中没有直接的数组类型，我们可以用（嵌套）列表 :py:class:`list` 来类比举例。"
#~ msgstr ""

#~ msgid "访问 Tensor 中特定元素"
#~ msgstr ""

#~ msgid "对于数字（或者说标量） Tensor, 显然我们可以直接进行使用。"
#~ msgstr ""

#~ msgid "如果我们想要获取下面这个 2d-数组 ``b`` 中值为 6 的元素，则需要使用 ``b[1][2]``;"
#~ msgstr ""

#~ msgid "理解切片（Slice）"
#~ msgstr ""

#~ msgid "我们通过 ``:`` 运算符进行了切片操作，语法为 ``start:stop:step``, 对应起始索引、终止索引和步长。"
#~ msgstr ""

#~ msgid ""
#~ "我们也可以调用 Python 内置的 :py:class:`slice` 类，通过传入"
#~ " ``(start, stop[, step])`` 实现一样的效果："
#~ msgstr ""

#~ msgid "这个设计其实与基于零的索引方式对应，使得我们可以直观地用 ``a[0:10]`` 来取得所有元素。"
#~ msgstr ""

#~ msgid "此时可以将其当作是一个一维数组去理解，里面的每个元素又是一维数组。"
#~ msgstr ""

#~ msgid "我们这里仅仅对最外面这一层进行了索引，在 :ref:`tensor-advanced-indexing` 中会讲解更复杂的情况。"
#~ msgstr ""

#~ msgid "使用切片索引可以从 Tensor 中访问部分元素。"
#~ msgstr ""

#~ msgid "一些用户会认为，多维切片的写法可能是这样的："
#~ msgstr ""

#~ msgid ""
#~ "输出结果是否和你的想法一致呢？是不是有些人认为输出应该是 4 呢？ （ :ref:`解释"
#~ " <slice-will-not-reduce-dim>` ）"
#~ msgstr ""

#~ msgid ""
#~ "在上面的代码示例中，我们一直在使用 Python 的 ``list`` 来举例， "
#~ "以表明 MegEngine Tensor 数据结构与 Python "
#~ "嵌套列表设计的一致性，但实际上二者还是存在着一定的区别。"
#~ msgstr ""

#~ msgid ""
#~ "想要解答这些问题，你必须先理解 Tensor 的 :ref:`tensor-"
#~ "fundamental-attributes` 等有关概念， 更好地理解 Tensor "
#~ "所具备的一些特点， 接着从 :ref:`tensor-advanced-indexing`"
#~ " 的内容中找到答案。"
#~ msgstr ""

#~ msgid "数据类型"
#~ msgstr ""

#~ msgid "所在设备"
#~ msgstr ""

#~ msgid "具象化举例"
#~ msgstr ""

