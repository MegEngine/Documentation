msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-01 21:02+0800\n"
"PO-Revision-Date: 2023-04-21 09:38\n"
"Last-Translator: \n"
"Language: zh_TW\n"
"Language-Team: Chinese Traditional\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/pylite/global.po\n"
"X-Crowdin-File-ID: 10023\n"

#: ../../source/reference/pylite/global.rst:6
msgid "megenginelite.global_setting"
msgstr "crwdns121043:0crwdne121043:0"

#: megenginelite.global_setting.LiteGlobal:1 of
msgid "Some global config in lite"
msgstr "crwdns121045:0crwdne121045:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair:1 of
msgid "Clear the physical and virtual address pair in MegEngine."
msgstr "crwdns121047:0crwdne121047:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair
#: megenginelite.global_setting.LiteGlobal.dump_persistent_cache
#: megenginelite.global_setting.LiteGlobal.get_device_count
#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr
#: megenginelite.global_setting.LiteGlobal.register_decryption_and_key
#: megenginelite.global_setting.LiteGlobal.register_memory_pair
#: megenginelite.global_setting.LiteGlobal.set_loader_lib_path
#: megenginelite.global_setting.LiteGlobal.set_persistent_cache
#: megenginelite.global_setting.LiteGlobal.set_tensorrt_cache
#: megenginelite.global_setting.LiteGlobal.update_decryption_key of
msgid "参数"
msgstr "crwdns121049:0crwdne121049:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair:3
#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr:3
#: megenginelite.global_setting.LiteGlobal.register_memory_pair:4 of
msgid "the virtual ptr to set to MegEngine."
msgstr "crwdns121051:0crwdne121051:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair:4
#: megenginelite.global_setting.LiteGlobal.register_memory_pair:5 of
msgid "the physical ptr to set to MegEngine."
msgstr "crwdns121053:0crwdne121053:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair:5
#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr:4
#: megenginelite.global_setting.LiteGlobal.register_memory_pair:7 of
msgid "the the device to set the pair memory."
msgstr "crwdns121055:0crwdne121055:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair:6
#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr:5 of
msgid "the backend to set the pair memory."
msgstr "crwdns121057:0crwdne121057:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair
#: megenginelite.global_setting.LiteGlobal.get_device_count
#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr
#: megenginelite.global_setting.LiteGlobal.register_memory_pair of
msgid "返回"
msgstr "crwdns121059:0crwdne121059:0"

#: megenginelite.global_setting.LiteGlobal.clear_memory_pair:8 of
msgid "Whether the clear is operation successful."
msgstr "crwdns121061:0crwdne121061:0"

#: megenginelite.global_setting.LiteGlobal.dump_persistent_cache:1 of
msgid "Dump the PersistentCache policy cache to the specific file. If the network is set to profile when forward, though this the algo policy will dump to file."
msgstr "crwdns121063:0crwdne121063:0"

#: megenginelite.global_setting.LiteGlobal.dump_persistent_cache:5 of
msgid "the cache file path to be dumped."
msgstr "crwdns121065:0crwdne121065:0"

#: megenginelite.global_setting.LiteGlobal.dump_tensorrt_cache:1 of
msgid "Dump the TensorRT cache to the file set in :py:func:`~.set_tensorrt_cache`."
msgstr "crwdns121067:0crwdne121067:0"

#: megenginelite.global_setting.LiteGlobal.get_device_count:1 of
msgid "Get the number of device of the given device type in current context."
msgstr "crwdns121069:0crwdne121069:0"

#: megenginelite.global_setting.LiteGlobal.get_device_count:3 of
msgid "the device type to be counted."
msgstr "crwdns121071:0crwdne121071:0"

#: megenginelite.global_setting.LiteGlobal.get_device_count:5 of
msgid "the number of device."
msgstr "crwdns121073:0crwdne121073:0"

#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr:1 of
msgid "Get the physic address by the virtual address in MegEngine."
msgstr "crwdns121075:0crwdne121075:0"

#: megenginelite.global_setting.LiteGlobal.lookup_physic_ptr:7 of
msgid "The physic address to lookup."
msgstr "crwdns121077:0crwdne121077:0"

#: megenginelite.global_setting.LiteGlobal.register_decryption_and_key:1 of
msgid "Register a custom decryption method and key to lite"
msgstr "crwdns121079:0crwdne121079:0"

#: megenginelite.global_setting.LiteGlobal.register_decryption_and_key:3
#: megenginelite.global_setting.LiteGlobal.update_decryption_key:3 of
msgid "the name of the decryption, which will act as the hash key to find the decryption method."
msgstr "crwdns121081:0crwdne121081:0"

#: megenginelite.global_setting.LiteGlobal.register_decryption_and_key:5 of
msgid "the decryption function, which will decrypt the model with the registered key, then return the decrypted model. See :py:func:`~.decryption_func` for more details."
msgstr "crwdns121083:0crwdne121083:0"

#: megenginelite.global_setting.LiteGlobal.register_decryption_and_key:8 of
msgid "the decryption key of the method."
msgstr "crwdns121085:0crwdne121085:0"

#: megenginelite.global_setting.LiteGlobal.register_memory_pair:1 of
msgid "Register the physical and virtual address pair to the MegEngine, some device need the map from physical to virtual."
msgstr "crwdns121087:0crwdne121087:0"

#: megenginelite.global_setting.LiteGlobal.register_memory_pair:6 of
msgid "the length of bytes to set pair memory."
msgstr "crwdns121089:0crwdne121089:0"

#: megenginelite.global_setting.LiteGlobal.register_memory_pair:8 of
msgid "the backend to set the pair memory"
msgstr "crwdns121091:0crwdne121091:0"

#: megenginelite.global_setting.LiteGlobal.register_memory_pair:10 of
msgid "Whether the register operation is successful."
msgstr "crwdns121093:0crwdne121093:0"

#: megenginelite.global_setting.LiteGlobal.set_loader_lib_path:1 of
msgid "Set the loader path to be used in lite."
msgstr "crwdns121095:0crwdne121095:0"

#: megenginelite.global_setting.LiteGlobal.set_loader_lib_path:3 of
msgid "the file path which store the loader library."
msgstr "crwdns121097:0crwdne121097:0"

#: megenginelite.global_setting.LiteGlobal.set_persistent_cache:1 of
msgid "Set the algo policy cache file for CPU/CUDA, the algo policy cache is produced by MegEngine fast-run."
msgstr "crwdns121099:0crwdne121099:0"

#: megenginelite.global_setting.LiteGlobal.set_persistent_cache:4 of
msgid "the file path which store the cache."
msgstr "crwdns121101:0crwdne121101:0"

#: megenginelite.global_setting.LiteGlobal.set_persistent_cache:5 of
msgid "always update the cache file when model runs."
msgstr "crwdns121103:0crwdne121103:0"

#: megenginelite.global_setting.LiteGlobal.set_tensorrt_cache:1 of
msgid "Set the TensorRT engine cache path for serialized prebuilt ICudaEngine."
msgstr "crwdns121105:0crwdne121105:0"

#: megenginelite.global_setting.LiteGlobal.set_tensorrt_cache:3 of
msgid "the cache file path to set"
msgstr "crwdns121107:0crwdne121107:0"

#: megenginelite.global_setting.LiteGlobal.try_coalesce_all_free_memory:1 of
msgid "Try to coalesce all free memory in MegEngine. When call it MegEnine Lite will try to free all the unused memory thus decrease the runtime memory usage."
msgstr "crwdns121109:0crwdne121109:0"

#: megenginelite.global_setting.LiteGlobal.update_decryption_key:1 of
msgid "Update decryption key of a custom decryption method."
msgstr "crwdns121111:0crwdne121111:0"

#: megenginelite.global_setting.LiteGlobal.update_decryption_key:5 of
msgid "the decryption key of the method, if the length of key is zero, the key will not be updated."
msgstr "crwdns121113:0crwdne121113:0"

#~ msgid "some global config in lite"
#~ msgstr ""

