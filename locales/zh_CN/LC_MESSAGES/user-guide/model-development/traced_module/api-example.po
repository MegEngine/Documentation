# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, The MegEngine Open Source Team
# This file is distributed under the same license as the MegEngine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 09:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/user-guide/model-development/traced_module/api-example.rst:5
msgid "TracedModule 接口介绍"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:8
msgid ""
"注意：TracedModule API 在未来一段时间会根据使用反馈进行调整，请关注 github release note "
"获取变更。欢迎在文档或 Github 提交使用反馈，一起让模型到应用更快更便捷！"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:10
msgid ""
"以 resnet18 为例介绍 TracedModule 的使用方式，model.py 可从 `这里 "
"<https://github.com/MegEngine/Models/blob/master/official/vision/classification/resnet/model.py>`__"
" 下载。 通过 :py:func:`~.trace_module` 方法将 Module 转为 TracedModule，接口形式如下："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:23
msgid "将自定义的 resnet18（Module）转换为 TracedModule："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:44
msgid "TracedModule 的常用方法"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:47
msgid "graph"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:48
msgid "graph 属性是 TracedModule 最重要的属性，其返回一个 InternalGraph，描述了该 TracedMdoule 的执行过程。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:50
#: ../../source/user-guide/model-development/traced_module/api-example.rst:134
#: ../../source/user-guide/model-development/traced_module/api-example.rst:277
#: ../../source/user-guide/model-development/traced_module/api-example.rst:310
#: ../../source/user-guide/model-development/traced_module/api-example.rst:338
#: ../../source/user-guide/model-development/traced_module/api-example.rst:377
#: ../../source/user-guide/model-development/traced_module/api-example.rst:414
#: ../../source/user-guide/model-development/traced_module/api-example.rst:539
#: ../../source/user-guide/model-development/traced_module/api-example.rst:552
#: ../../source/user-guide/model-development/traced_module/api-example.rst:565
#: ../../source/user-guide/model-development/traced_module/api-example.rst:580
#: ../../source/user-guide/model-development/traced_module/api-example.rst:601
#: ../../source/user-guide/model-development/traced_module/api-example.rst:636
#: ../../source/user-guide/model-development/traced_module/api-example.rst:655
#: ../../source/user-guide/model-development/traced_module/api-example.rst:674
#: ../../source/user-guide/model-development/traced_module/api-example.rst:690
#: ../../source/user-guide/model-development/traced_module/api-example.rst:713
#: ../../source/user-guide/model-development/traced_module/api-example.rst:736
#: ../../source/user-guide/model-development/traced_module/api-example.rst:762
#: ../../source/user-guide/model-development/traced_module/api-example.rst:790
#: ../../source/user-guide/model-development/traced_module/api-example.rst:835
#: ../../source/user-guide/model-development/traced_module/api-example.rst:1022
msgid "**示例：**"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:77
msgid ""
"如 ``traced_resnet.graph`` 所示，``ResNet.forward`` 中的 ``x = self.conv1(x)`` "
"将会被解析为以下两个操作:"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:79
msgid ""
"获取 ``conv1 = self.conv1``, 对应的 Expr 为 ``%2: conv1 = getattr(self, "
"\"conv1\") -> (Conv2d)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:80
msgid "执行 ``conv1_out = conv1(x)``, 对应的 Expr 为 ``%3: conv1_out = conv1(x, )``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:82
msgid "其中 ``%`` 后的数字为 Expr 的 id。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:84
msgid ""
"resnet18 中使用的所有的自定义子 Module 都将会被转换为 TracedModule， 例如 layer1 被转换 "
"TracedModule 后有相应的名为 \"ResNet_layer1\" 的 Graph 记录其 forward 执行过程。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:96
msgid ""
"可以通过 ``\"{:i}\".format(graph)`` 方式查看 Node 的 id。 例如 ``%2_conv1`` 中的 2 表示 "
"``conv_1`` 这个 Node 的 id 为 ``2``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:126
msgid "flatten"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:127
msgid ""
"该方法可去除 InternalGraph 的中的层次结构（将子 graph 展开，去除自定义子 Module 的 graph）, 并返回一个新的 "
"TracedModule。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:130
msgid ":py:meth:`.TracedModule.flatten` ``()``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:130
msgid "返回一个新的 TracedModule，其所对应的 Graph 无层次结构"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:132
msgid "拍平后的 InternalGraph 仅包含内置 Module 或 function 的 Expr，此时可以直观的得到数据之间的连接关系。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:266
msgid "set_watch_points & clear_watch_points"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:267
msgid "查看 TracedModule 执行时 graph 中某个 Node 对应的真正的 Tensor/Module。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:272
msgid ":py:meth:`.TracedModule.set_watch_points` ``(nodes : Sequence[Node])``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:270
msgid "设置需要观察的 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:272
msgid "``nodes`` 待观察的 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:275
msgid ":py:meth:`.TracedModule.clear_watch_points` ``()``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:275
msgid "清除需要观察的 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:279
msgid "通过该方法观察 ``F.avg_pool2d`` 的输入与输出 Tensor 的 shape 变换"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:291
msgid ""
"``traced_resnet.watch_node_value`` 是一个 ``Dict[Node, Union[Tensor, "
"Module]]``， 它的 ``key`` 是已被设置要观察的 Node，``value`` 是网络运行期间 ``key`` 所对应的真正的 "
"Tensor 或 Module。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:294
msgid ""
"可以看到上面的例子成功获取到了 ``F.avg_pool2d`` 的输入与输出的 shape。 当再次运行 ``traced_resnet`` "
"时，之前观察到的 Tensor 或 Module 将被新的值覆盖。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:298
msgid "set_end_points & clear_end_points"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:299
msgid ""
"设置模型停止运行的位置，接受一个 ``List[Node]`` 作为输入，当网络生成所有设置的 ``Node`` 后会立即返回，不再继续往下执行。"
" *该方法仅支持将最顶层 graph 中的 node 设置未结束运行点。*"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:305
msgid ":py:meth:`.TracedModule.set_end_points` ``(nodes : Sequence[Node])``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:303
msgid "设置结束运行点"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:305
msgid "``nodes`` 停止运行处的的 ``Node``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:308
msgid ":py:meth:`.TracedModule.clear_end_points` ``()``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:308
msgid "清除结束运行点"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:312
msgid ""
"将 ``traced_resnet`` 的输出点设置为 ``F.avg_pool2d`` 的输入与输出，当 ``F.avg_pool2d`` "
"执行完后， 就立即结束运行之后的 Expr，并将 ``F.avg_pool2d`` 的输入与输出作为模型返回值直接返回"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:324
msgid "可以看到模型的输出变成了 ``F.avg_pool2d`` 的输入与输出，并且未执行 ``F.avg_pool2d`` 之后的 Expr。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:327
msgid "Node 、Expr 、InternalGraph 的常用方法"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:330
msgid "InternalGraph.exprs"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:331
msgid ""
"遍历 Graph 中的 Expr。通过访问 :py:meth:`.InternalGraph.exprs` 可按模型执行顺序得到该 Graph "
"中所记录 Expr 序列。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:336
msgid ":py:meth:`.InternalGraph.exprs` ``(recursive : bool = True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:334
msgid "按 Expr 执行顺序获取 Expr 执行序列"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:336
msgid "``recursive``:  是否获取子 Graph 中的 Expr，默认为 True"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:369
msgid "InternalGraph.nodes"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:370
msgid ""
"遍历 Graph 中的 Node。通过访问 :py:meth:`.InternalGraph.nodes` 可得到该 graph 中的 Node "
"序列。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:375
msgid ":py:meth:`.InternalGraph.nodes` ``(recursive : bool = True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:373
msgid "按 id 从小到大返回 Graph 中的 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:375
msgid "``recursive``:  是否获取子 Graph 中的 Node，默认为 True"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:407
msgid "Expr.inputs & Expr.outputs"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:408
msgid "通过访问 Expr 的 inputs 和 outputs 属性，可获得该 Expr 的输入和输出 Node。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:410
msgid ":py:attr:`.Expr.inputs` ``: List[Node]``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:412
msgid ":py:attr:`.Expr.outputs` ``: List[Node]``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:426
msgid "Expr.args & Expr.kwargs & Expr.named_args"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:427
msgid ""
"在调用一个 function 时，例如 F.conv2，其输入并不是只有 Tensor， 还有一些非 Tensor 的输入，例如 "
"kernel_size 等，我们提供了 ``Expr.args``、``Expr.kwargs`` 和 ``Expr.named_args`` "
"三种方法获取该生成该 Expr 时所传入的非 Tensor 输入。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:432
msgid "以一个自定义的 ``MyBn`` 为例介绍在 ``trace`` 时对参数的处理，以及上述 3 个方法的使用方式。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:453
msgid "将 ``my_bn`` 转换为 TracedMdoule 后我们可以得到如下一个 graph:"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:464
msgid "``F.batch_norm`` 的函数定义如下："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:483
msgid ""
"可以从 graph 中看到，在 trace 时，我们将 ``*`` 号前的参数全部转为位置参数(positional argument)， 将 "
"``*`` 后的参数全部转换为了关键字参数(keyword argument)，在调用函数时即使没有输入相应的参数我们也会将其默认值记录下来， "
"例如 ``eps=1e-5``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:487
msgid "**示例1：**"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:489
msgid "``Expr.args`` 返回的是 function 位置参数所对应的值。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:495
msgid ""
"可以看到当调用 ``args`` 属性时，返回了 ``*`` 号前的 5 个位置参数，分别是 ``(inp, running_mean, "
"running_var, weight, bias)``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:498
msgid "**示例2：**"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:500
msgid "``Expr.kwargs`` 返回的是 function 关键字参数的名字以及其所对应的值。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:511
msgid "可以看到当调用 ``kwargs`` 属性时，返回了 ``*`` 号后的所有关键字参数，包括参数名字和实际输入的参数（或默认值）。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:513
msgid "**示例3：**"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:515
msgid "``Expr.named_args`` 返回的是 function 的参数名字以及其所对应的输入值"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:517
msgid "该属性提供了所有参数的名字以及调用时输入的参数，可以通过该方法获取参数名字所对应的输入值。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:534
msgid "Node.expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:535
msgid "通过访问 Node 的 expr 属性，可获得该 Node 是由哪个 Expr 生成的。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:537
msgid ":py:attr:`.Node.expr` ``: Expr``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:547
msgid "Node.users"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:548
msgid "通过访问 Node 的 users 属性，可获得该 Node 是将会被哪些 Expr 作为输入所使用。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:550
msgid ":py:attr:`.Node.users` ``: Lsit[Expr]``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:560
msgid "ModuleNode.owner"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:561
msgid "通过访问 ModuleNode 的 owner 属性，可直接访问该 ModuleNode 所对应的 Module。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:563
msgid ":py:attr:`.ModuleNode.owner` ``: Module``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:573
msgid "Node.top_graph & Expr.top_graph"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:574
msgid "通过访问 Node 或 Expr 的 top_graph 属性，可直获得该 Node 或 Expr 所属的 InternalGraph。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:576
msgid ":py:attr:`.Node.top_graph` ``: InternalGraph``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:578
msgid ":py:attr:`.Expr.top_graph` ``: InternalGraph``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:591
msgid "InternalGraph.eval"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:592
msgid "通过访问 InternalGraph 的 eval 方法，可以直接运行该 Graph。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:597
msgid ":py:meth:`.InternalGraph.eval` ``(*inputs)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:595
msgid "将 Tensor 直接输入 Graph 并返回按 Expr 执行序列执行后的结果"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:597
msgid "``inputs`` 模型的输入"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:599
msgid ""
"利用 ``eval`` 执行一个 graph 时，只需要输入与 `graph.inputs[1:]` 中的 Node 相对应的实际的 Tensor"
" 或 Module 即可执行。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:612
msgid "Node 和 Expr 的查找方法"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:615
msgid "BaseFilter"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:616
msgid ":py:class:`~.BaseFilter` 是一个可迭代的类，其提供了一些方法将迭代器转换为 ``list``, ``dict`` 等。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:618
msgid ""
":py:class:`~.NodeFilter` 和 :py:class:`~.ExprFilter` 继承于 "
":py:class:`~.BaseFilter`， NodeFilter 负责处理 Node，ExprFilter 负责处理 Expr。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:621
msgid ":py:meth:`.BaseFilter.as_list`  返回 Node 或 Expr 列表"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:622
msgid ":py:meth:`.BaseFilter.as_dict`  返回 Node 或 Expr 的 id 和 Node 或 Expr 组成的字典"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:623
msgid ""
":py:meth:`.BaseFilter.as_unique`  如果查找到的 Node 或 Expr 只有一个，直接返回该 Node 或 "
"Expr, 否则报错"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:624
msgid ":py:meth:`.BaseFilter.as_count`  返回查找到 Node 或 Expr 的数量"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:627
msgid "get_node_by_id"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:628
msgid "通过 id 从 Graph 中获取对应 id 的 Node。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:634
msgid ""
":py:meth:`.InternalGraph.get_node_by_id` ``(node_id: List[int] = None, "
"recursive=True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:631
msgid "获取 InternalGraph 中 id 为 ``node_id`` 的 Node，支持一次查找多个 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:633
msgid "``node_id`` 待查找 Node 的 id"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:634
msgid "``recursive`` 是否查找子 Graph 中的 Node，默认为 True"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:646
msgid "get_expr_by_id"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:647
msgid "通过 id 从 Graph 中获取对应 id 的 Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:653
msgid ""
":py:meth:`.InternalGraph.get_expr_by_id` ``(expr_id: List[int] = None, "
"recursive=True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:650
msgid "获取 InternalGraph 中 id 为 expr_id 的 Expr，支持一次查找多个 Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:652
msgid "``expr_id`` 待查找 Expr 的 id 列表"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:653
#: ../../source/user-guide/model-development/traced_module/api-example.rst:672
#: ../../source/user-guide/model-development/traced_module/api-example.rst:688
#: ../../source/user-guide/model-development/traced_module/api-example.rst:711
msgid "``recursive`` 是否查找子 Graph 中的 Expr，默认为 True"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:665
msgid "get_function_by_type"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:666
msgid "通过该方法查找 Graph 中调用了某个内置 function 的 CallFunction Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:672
msgid ""
":py:meth:`.InternalGraph.get_function_by_type` ``(func: Callable = None, "
"recursive=True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:669
msgid "获取 InternalGraph 中 ``self.func == func`` 的 CallFunction Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:671
msgid "``func`` 可调用的函数"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:681
msgid "get_method_by_type"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:682
msgid "通过该方法查找 Graph 中调用了某个 method 的 CallMethod Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:688
msgid ""
":py:meth:`.InternalGraph.get_method_by_type` ``(method: str = None, "
"recursive=True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:685
msgid "获取 InternalGraph 中 ``self.method == method`` 的 CallMethod"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:687
msgid "``method`` 待查找某对象的方法的名字（该方法是一个可调用的函数）"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:704
msgid "get_module_by_type"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:705
msgid "通过该方法查找 Graph 中对应某种 Module 的 ModuleNode"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:711
msgid ""
":py:meth:`.InternalGraph.get_module_by_type` ``(module_cls: Module, "
"recursive=True)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:708
msgid "获取 InternalGraph 中对应于 ``module_cls`` 的 ModuleNode"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:710
msgid "``module_cls`` Module 某个子类"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:722
msgid "图手术常用方法"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:725
msgid "add_input_node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:726
msgid ""
"为最顶层的 InternalGraph 增加一个输入，此输入会作为一个 free_varargs 参数（即无形参名称）。 子 Graph "
"不支持调用该方法。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:734
msgid ""
":py:meth:`.InternalGraph.add_input_node` ``(shape, dtype=\"float32\", "
"name=\"args\")``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:730
msgid "为顶层 Graph 新增一个输入"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:732
msgid "``shape`` 新增输入的 shape"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:733
msgid "``dtype`` 新增输入的 dtype，默认为 \"float32\""
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:734
msgid ""
"``name``  新增输入的名字，默认为 \"args\"，若该名字在 Graph 中已存在，则会在 name 后添加后缀，以保证 name 在"
" Graph 在的唯一性。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:753
msgid "add_output_node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:754
msgid "为最顶层的 InternalGraph 增加一个输出，此输入会作为输出元组中的最后一个元素。 子 Graph 不支持调用该方法。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:760
msgid ":py:meth:`.InternalGraph.add_output_node` ``(node: TensorNode)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:758
msgid "将 Graph 中的某个 Node 作为 Graph 的一个输出"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:760
msgid "``node`` Graph 中的某 Node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:780
msgid "reset_outputs"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:781
msgid "重新设置最顶层 InternalGraph 的输出。子 Graph 不支持调用该方法。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:783
msgid ""
"当要改变的输出较多时，一个一个调用 ``add_output_node`` 较为麻烦，通过 ``reset_outputs`` "
"方法一次性重置输出内容于结构。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:788
msgid ":py:meth:`.InternalGraph.reset_outputs` ``(node: outputs)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:786
msgid "重置 Graph 的输出"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:788
msgid ""
"``node`` 由 Graph 中的 TensorNode 构成的某种结构，支持 ``list``, ``dict``, ``tuple`` "
"等（最底层的元素必须是 TensorNode）。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:797
msgid "把 fc 的输入和输出以 Dict 形式输出 并与 avgppol 的输入组成 tuple"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:801
msgid "将 new_outputs 作为 graph 新的输出"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:818
msgid "compile"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:819
msgid "该方法会将 InternalGraph 与输出无关的 Expr 删除。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:821
msgid ":py:meth:`.InternalGraph.compile` ``()``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:823
msgid "常与 ``insert_exprs`` 和 ``replace_node`` 一起使用。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:826
msgid "replace_node"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:827
msgid ""
"替换 InternalGraph 中的指定 Node。可用于新增 Expr 后替换一些 Node，或结合 "
":py:meth:`.InternalGraph.compile` 删某些 Expr。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:833
msgid ":py:meth:`.InternalGraph.replace_node` ``(repl_dict : Dict[Node, Node])``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:830
msgid "替换 Graph 中的 ``key`` 替换为 ``value``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:832
msgid ""
"``repl_dict`` 为一个 ``key`` 和 ``value`` 都为 Node 的字典，且 ``key`` 和 ``value`` "
"必须在同一个 Graph 中。 在 ``value.expr`` 之后的所有将 ``key`` 作为输入的 Expr 将被替换为以 "
"``value`` 作为输入。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:837
msgid "以将 traced_net.layer1 中所有描述 ``F.relu`` Expr 删除为例"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:847
msgid "将获取到的所有以 ``F.relu`` 的输出作为输入的 Expr 替换为以 ``F.relu`` 的输入作为输入"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:856
msgid "这里可以看到在 layer1 的 graph 中找不到描述 ``F.relu`` 的 Expr 了"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:862
msgid "insert_exprs"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:863
msgid ""
"向 InternalGraph 中插入 Expr。 可用于插入 ``function`` 或 ``Module`` ， 在插入的过程中将这些 "
"``function`` 或 ``Module`` 解析为 Expr 或 TracedModule。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:867
msgid "一般与 ``replace_node`` 和 ``compile`` 一起使用完成插入 Expr 的操作。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:873
msgid ":py:meth:`.InternalGraph.insert_exprs` ``(expr: Optional[Expr] = None)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:870
msgid "向 Graph 中插入 Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:872
msgid ""
"``expr`` 在 `_exprs` 属性中的 ``expr`` 之后插入解析 ``function`` 或 ``Module`` 的 "
"expr。 若为 None，则会根据输入自动计算向什么位置插入 Expr。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:875
msgid ""
"在 ``insert_exprs`` 的作用域里，``TensorNode`` 可以当作 ``Tensor`` 使用， "
"``ModuleNode`` 可以当作 ``Module``。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:877
msgid "**示例1：** 向 layer1 中的所有 ``F.relu`` 后插入一个 ``F.neg`` 函数"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:891
msgid "可以看到在最后一个 ``cur_graph`` 中描述 ``F.relu`` 的 Expr 后有一个新插入的描述 ``F.neg`` 的 Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:904
msgid "**示例2：** 将 layer1 中的所有 ``F.relu`` 替换为 ``F.relu6``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:919
msgid "可以看到在最后一个 ``cur_graph`` 中描述 ``F.relu`` 的 Expr 均变为了 ``F.relu6`` 的 Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:932
msgid "**示例3：** 向 resnet18 中插入 Module"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:941
msgid ""
"向 resnet18 中插入 ``myneg`` 这个自定义的 Module，完成使模型输出乘 -1 的功能，首先 需要将 ``myneg`` "
"设为 ``traced_resnet`` 的一个 attribute"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:946
msgid "获取 graph 的输出 Node，以及 ``traced_resnet`` 所对应的 ModuleNode"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:952
msgid "调用 ``neg`` 来将其插入到 graph 中, 在图手术模式下，``self_node`` 等价于 ``traced_resnet``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:967
msgid ""
"可以看到成功将 ``myneg`` 插入到了 graph 中, 并且 ``MyNeg`` 这个非 MegEngine 内置 的 Module "
"也有其对应的名为 ``ResNet_neg`` 的 graph"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:979
msgid ""
"由于 Tensor 的 ``__setitem__`` 比较特殊，因此在图手术模式下对 TensorNode "
"进行赋值时，需要特别注意要图手术结果是否符合预期。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:981
msgid "直接以 TensorNode 赋值结果作为输出"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:998
msgid "以其它操作生成的 TensorNode 作为输出"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1013
msgid "wrap"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1014
msgid ""
"有时不希望插入的函数被展开为 megengine 内置的 function, 此时可以用 "
":py:meth:`~.traced_module.wrap` 将自定义的函数当作 megengine 内置函数处理， 即不再 ``trace``"
" 到自定义函数内部。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1020
msgid ":py:meth:`~.traced_module.wrap` ``(func: Callable)``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1018
msgid "将自定义函数注册为内置函数"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1020
msgid "``func`` 为一个可调用的函数。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1024
msgid "将 layer1 中的所有 ``F.relu`` 替换为自定义的 ``my_relu6``"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1033
msgid "与替换为 ``F.relu6`` 类似，只调用 ``my_relu6`` 就完成了 ``trace`` 并将新的 Expr 插入到 Graph 中"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1048
msgid "可以看到在最后一个 ``cur_graph`` 中描述 ``F.relu`` 的 Expr 均变为了 ``my_relu6`` 的 Expr"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1061
msgid "被 ``wrap`` 的函数的返回值必须仅为 Tensor 或内部元素为 Tensor 的容器"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1063
msgid ""
"需要注意的是，当自定义的 function 或 Module 未被 ``trace`` 到 function 或 Module 内部时， "
"序列化后的 TracedModule 可以脱离源码被 load，但无法运行"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1069
msgid "TracedMdoule 内置模型优化"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1073
msgid "内置模型优化的实现与接口持续完善中，欢迎在文档或 Github 提交使用反馈。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1075
msgid "我们提供了一些常用图手术实现来优化模型，包括："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1077
msgid "FuseConvBn：将 BatchNorm 融合到 Convolution 中"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1078
msgid "FuseAddMul：融合连续的常量加法或常量乘法"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1079
msgid "BackwardFoldScale：将卷积之后的常量乘法融合到卷积中"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1081
msgid "使用这些优化的接口统一为 ``optimize``："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1089
msgid ""
"该函数传入一个 TracedMdoule，一个待优化选项的列表 enabled_pass，在函数内部会将传入的优化选项一一作用至 "
"TracedMdoule 上， 并返回优化后的 TracedMdoule。需要注意的是，我们不会在原 ``module`` 上进行优化，而是在原 "
"``module`` 的副本上进行优化。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1092
msgid "下面将通过一些例子来介绍如何使用该接口。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1095
msgid "FuseConvBn"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1097
msgid ""
"将 BatchNorm 融合到 Convolution 中是模型加速的一个非常有效的手段。 我们实现的 FuseConvBn 支持将内置 "
"``F.batchnorm`` 或 `M.BatchNorm2d` 融合至 ``F.conv2d`` 或 ``M.Conv2d`` 中。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1100
msgid "如下列的例子，将 resnet18 中的 bn 都融合至 conv 中："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1117
msgid "调用 FuseConvBn 选项后，会将图中类似 ``bn(conv(x))`` 的表达式进行融合。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1121
msgid "该优化目前仅支持 2d 的 conv 和 bn"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1122
msgid "当一个 conv module 被调用多次时，我们将会对其拷贝，并设置一个新的 name，以使其转变为仅被调用一次"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1124
msgid "例如，对如下的计算过程中使用的 conv 和 bn 进行融合时"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1135
msgid ""
"由于 ``conv_0`` 被使用了两次，因此我们将会将 ``conv_0`` 进行拷贝得到一个新的 module 为 ``conv_0_1``，"
" 同时第一次调用 ``conv_0`` 将变成调用 ``conv_0_1``，以保证融合结果正确。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1148
msgid "FuseAddMul"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1150
msgid "FuseaddMul 是将一些连续的常量乘法或常量加法融合，使得图中的运算变少，提高模型运行速度。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1152
#: ../../source/user-guide/model-development/traced_module/api-example.rst:1190
msgid "对于如下运算"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1168
msgid ""
"我们会将 ``x * self.scale[0]`` 和 ``3 * x`` 融合为 ``x * 3``, ``3 + x`` 和 ``x - "
"self.scale[1]`` 融合为 ``x + 1``， 优化之后的 graph 如下："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1183
#: ../../source/user-guide/model-development/traced_module/api-example.rst:1229
msgid "目前该优化仅支持 shape 为 (1,) 的 Tensor 或数值常量"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1186
msgid "BackwardFoldScale"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1188
msgid "BackwardFoldScale 是将卷积之后的一些常量乘法中的常量吸到卷积的参数里。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1209
msgid ""
"我们会将 ``x1.reshape(-1)*2`` 和 ``x * self.scale[0]`` 这一路常量乘法反传至 "
"``self.conv``， 以及 ``x2 * self.scale[1]`` 这一路常量乘法反传至 "
"``self.conv``，然后将所有的常量融合至卷积里， "
"当遇到不同分支反传过来的常量乘法时，会检测不同分支反传的常量是否相同，不相同则反传失败。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1213
msgid "优化后的 graph 如下:"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1232
msgid "TracedModule 的局限"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1234
msgid ""
"不支持动态控制流，动态控制流是指 ``if`` 语句中的 ``condition`` 随输入 Tensor 的变化而变化， 或者是 "
"``for``, ``while`` 每次运行的语句不一样。当 ``trace`` 到控制流时， 仅会记录并解释满足条件的那个分支。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1238
msgid "不支持全局变量（Tensor），即跨 Module 使用 ``Tensor`` 将会得到不可预知的结果，如下面的例子："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1248
msgid ""
"被 ``trace`` 的 Module 或 function 参数中的非 ``Tensor`` 类型， 将会被看作是常量存储在 Expr 的 "
":py:attr:`~.Expr.const_val` 属性中， 并且该值将不会再变化。"
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1252
msgid "在模型中使用 MegEngine 内置的 function 时， **推荐** 下面这中调用方法："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1261
msgid "**不推荐** 下面这中调用方法："
msgstr ""

#: ../../source/user-guide/model-development/traced_module/api-example.rst:1270
msgid ""
"当被 ``trace`` 的自定义 Module 被调用了多次，并且每次传入参数中的非 ``Tensor`` 数据不一致时， 将会被 "
"``trace`` 出多个 Graph。此时将无法通过 :py:attr:`.TracedModule.graph` 属性访问 Graph， "
"只能通过对应 Moldule 的 ``CallMethod`` Expr 访问，如下面的例子："
msgstr ""

