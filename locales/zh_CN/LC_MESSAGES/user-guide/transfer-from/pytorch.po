# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, The MegEngine Open Source Team
# This file is distributed under the same license as the MegEngine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-14 16:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/user-guide/transfer-from/pytorch.rst:5
msgid "MegEngine for PyTorch users"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:9
msgid "在这个页面，会给出 MegEngine 与 PyTorch 设计和实现上的一些区别。 如果你在使用过程中发现有其它需要关注的差异点，欢迎在这里补充。"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:13
msgid "Tensor 数据结构相关"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:15
msgid "MegEngine Tensor 默认不需要 ``.to(device)`` 操作"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:18
msgid "MegEngine 在设备处理上兼容性良好，默认会将 Tensor 放在算力最高的 :ref:`设备 <tensor-device>` 上。"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:21
msgid "MegEngine Tensor 类中没有实现所有操作方法"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:24
msgid ""
"Pytorch 的 Tensor 类中提供了许多操作/计算方法，而在 MegEngine 中这些方法被统一实现在 functional 模块中， "
"意味着类似 ``functional.add()`` 等操作并不一定存在着对应的 ``Tensor.add()`` 实现，这是设计上的历史决定。 "
"当你要对一个 Tensor 进行各种操作时，应当想到使用 :mod:`~.functional` 模块中的接口。"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:28
msgid "MegEngine Tensor 默认不计算梯度"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:31
msgid ""
"Pytorch 中默认所有 Tensor 都需要被求导，因此提供了 :py:class:`torch.no_grad` 来禁用梯度计算。 而在 "
"MegEngine 中 Tensor 默认不需要被求导，需要通过 "
":py:meth:`megengine.autodiff.GradManager.attach` 来进行绑定， 被绑定后的 Tensor 可以通过"
" :py:meth:`megengine.Tensor.detach` 来解除绑定。"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:36
msgid "Data & DataLoader 相关"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:38
msgid "DataLoader 中的数据在供给之前，通常不用转 Tensor"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:41
msgid "MegEngine 中的 :mod:`~.data` 模块默认对 NumPy ndarray 格式的数据进行处理，可视作是独立的模块；"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:42
msgid ""
"推荐的数据处理流程是：原始数据格式 ->  ndarray （ DataLoader ） -> 在每个 Batch 数据中将 DataLoader"
" 供给的 ndarray 数据转 Tensor 格式 -> 后续 Tensor 计算；"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:44
msgid ""
"如果你选择在 DataLoader 中就将数据处理成 Tensor 格式，在多 GPU + 多 ``worker`` 进程读取的情况下可能会导致 "
"CUDA fork 的初始化错误，更详细的解释请参考 :ref:`data-guide` 。"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:47
msgid "Sampler 默认支持分布式情景，不需要像 Torch 一样使用 DDP"
msgstr ""

#: ../../source/user-guide/transfer-from/pytorch.rst:50
msgid "更多说明，请参考 :ref:`distributed-guide` 中的相关介绍。"
msgstr ""

#~ msgid ""
#~ "Pytorch 的 Tensor 类中提供了许多操作/计算方法，而在 MegEngine"
#~ " 中这些方法被统一实现在 functional 模块中， 意味着类似 "
#~ "``functional.add()`` 等操作并不一定存在着对应的 ``Tensor.add()`` "
#~ "实现，这是设计上的历史决定。"
#~ msgstr ""

