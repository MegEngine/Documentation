msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-04 16:51+0800\n"
"PO-Revision-Date: 2022-08-04 09:28\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/zh_CN/LC_MESSAGES/reference/api/megengine.module.LSTM.po\n"
"X-Crowdin-File-ID: 8498\n"
"Language: zh_CN\n"

#: ../../source/reference/api/megengine.module.LSTM.rst:5
msgid "LSTM"
msgstr ""

#: megengine.module.rnn.LSTM:1 of
msgid "Applies a multi-layer long short-term memory LSTM to an input sequence."
msgstr ""

#: megengine.module.rnn.LSTM:5 of
msgid "For each element in the input sequence, each layer computes the following function:"
msgstr ""

#: megengine.module.rnn.LSTM:8 of
msgid "\\begin{array}{ll} \\\\\n"
"    i_t = \\sigma(W_{ii} x_t + b_{ii} + W_{hi} h_{t-1} + b_{hi}) \\\\\n"
"    f_t = \\sigma(W_{if} x_t + b_{if} + W_{hf} h_{t-1} + b_{hf}) \\\\\n"
"    g_t = \\tanh(W_{ig} x_t + b_{ig} + W_{hg} h_{t-1} + b_{hg}) \\\\\n"
"    o_t = \\sigma(W_{io} x_t + b_{io} + W_{ho} h_{t-1} + b_{ho}) \\\\\n"
"    c_t = f_t \\odot c_{t-1} + i_t \\odot g_t \\\\\n"
"    h_t = o_t \\odot \\tanh(c_t) \\\\\n"
"\\end{array}\n\n"
msgstr ""

#: megengine.module.rnn.LSTM:18 of
msgid "where :math:`h_t` is the hidden state at time `t`, :math:`c_t` is the cell state at time `t`, :math:`x_t` is the input at time `t`, :math:`h_{t-1}` is the hidden state of the layer at time `t-1` or the initial hidden state at time `0`, and :math:`i_t`, :math:`f_t`, :math:`g_t`, :math:`o_t` are the input, forget, cell, and output gates, respectively. :math:`\\sigma` is the sigmoid function, and :math:`\\odot` is the Hadamard product."
msgstr ""

#: megengine.module.rnn.LSTM:25 of
msgid "In a multilayer LSTM, the input :math:`x^{(l)}_t` of the :math:`l` -th layer (:math:`l >= 2`) is the hidden state :math:`h^{(l-1)}_t` of the previous layer multiplied by dropout :math:`\\delta^{(l-1)}_t` where each :math:`\\delta^{(l-1)}_t` is a Bernoulli random variable which is :math:`0` with probability :attr:`dropout`."
msgstr ""

#: megengine.module.rnn.LSTM:30 of
msgid "If ``proj_size > 0`` is specified, LSTM with projections will be used. This changes the LSTM cell in the following way. First, the dimension of :math:`h_t` will be changed from ``hidden_size`` to ``proj_size`` (dimensions of :math:`W_{hi}` will be changed accordingly). Second, the output hidden state of each layer will be multiplied by a learnable projection matrix: :math:`h_t = W_{hr}h_t`. Note that as a consequence of this, the output of LSTM network will be of different shape as well. See Inputs/Outputs sections below for exact dimensions of all variables. You can find more details in https://arxiv.org/abs/1402.1128."
msgstr ""

#: megengine.module.rnn.LSTM of
msgid "参数"
msgstr "参数"

#: megengine.module.rnn.LSTM:38 of
msgid "The number of expected features in the input `x`"
msgstr ""

#: megengine.module.rnn.LSTM:39 of
msgid "The number of features in the hidden state `h`"
msgstr ""

#: megengine.module.rnn.LSTM:40 of
msgid "Number of recurrent layers. E.g., setting ``num_layers=2`` would mean stacking two LSTMs together to form a `stacked LSTM`, with the second LSTM taking in outputs of the first LSTM and computing the final results. Default: 1"
msgstr ""

#: megengine.module.rnn.LSTM:44 of
msgid "If ``False``, then the layer does not use bias weights `b_ih` and `b_hh`. Default: ``True``"
msgstr ""

#: megengine.module.rnn.LSTM:46 of
msgid "If ``True``, then the input and output tensors are provided as `(batch, seq, feature)` instead of `(seq, batch, feature)`. Note that this does not apply to hidden or cell states. See the Inputs/Outputs sections below for details.  Default: ``False``"
msgstr ""

#: megengine.module.rnn.LSTM:50 of
msgid "If non-zero, introduces a `Dropout` layer on the outputs of each LSTM layer except the last layer, with dropout probability equal to :attr:`dropout`. Default: 0"
msgstr ""

#: megengine.module.rnn.LSTM:53 of
msgid "If ``True``, becomes a bidirectional LSTM. Default: ``False``"
msgstr ""

#: megengine.module.rnn.LSTM:54 of
msgid "If ``> 0``, will use LSTM with projections of corresponding size. Default: 0"
msgstr ""

#: megengine.module.rnn.LSTM:79 of
msgid "Inputs: input, (h_0, c_0)"
msgstr ""

#: megengine.module.rnn.LSTM:57 of
msgid "**input**: tensor of shape :math:`(L, N, H_{in})` when ``batch_first=False`` or :math:`(N, L, H_{in})` when ``batch_first=True`` containing the features of the input sequence.  The input can also be a packed variable length sequence. See :func:`torch.nn.utils.rnn.pack_padded_sequence` or :func:`torch.nn.utils.rnn.pack_sequence` for details."
msgstr ""

#: megengine.module.rnn.LSTM:62 of
msgid "**h_0**: tensor of shape :math:`(D * \\text{num\\_layers}, N, H_{out})` containing the initial hidden state for each element in the batch. Defaults to zeros if (h_0, c_0) is not provided."
msgstr ""

#: megengine.module.rnn.LSTM:65 of
msgid "**c_0**: tensor of shape :math:`(D * \\text{num\\_layers}, N, H_{cell})` containing the initial cell state for each element in the batch. Defaults to zeros if (h_0, c_0) is not provided."
msgstr ""

#: megengine.module.rnn.LSTM:69 of
msgid "where:"
msgstr ""

#: megengine.module.rnn.LSTM:71 of
msgid "\\begin{aligned}\n"
"    N ={} & \\text{batch size} \\\\\n"
"    L ={} & \\text{sequence length} \\\\\n"
"    D ={} & 2 \\text{ if bidirectional=True otherwise } 1 \\\\\n"
"    H_{in} ={} & \\text{input\\_size} \\\\\n"
"    H_{cell} ={} & \\text{hidden\\_size} \\\\\n"
"    H_{out} ={} & \\text{proj\\_size if } \\text{proj\\_size}>0 \\text{ otherwise hidden\\_size} \\\\\n"
"\\end{aligned}\n\n"
msgstr ""

#: megengine.module.rnn.LSTM:90 of
msgid "Outputs: output, (h_n, c_n)"
msgstr ""

#: megengine.module.rnn.LSTM:82 of
msgid "**output**: tensor of shape :math:`(L, N, D * H_{out})` when ``batch_first=False`` or :math:`(N, L, D * H_{out})` when ``batch_first=True`` containing the output features `(h_t)` from the last layer of the LSTM, for each `t`. If a :class:`torch.nn.utils.rnn.PackedSequence` has been given as the input, the output will also be a packed sequence."
msgstr ""

#: megengine.module.rnn.LSTM:87 of
msgid "**h_n**: tensor of shape :math:`(D * \\text{num\\_layers}, N, H_{out})` containing the final hidden state for each element in the batch."
msgstr ""

#: megengine.module.rnn.LSTM:89 of
msgid "**c_n**: tensor of shape :math:`(D * \\text{num\\_layers}, N, H_{cell})` containing the final cell state for each element in the batch."
msgstr ""

#: megengine.module.rnn.LSTM:93 of
msgid "实际案例"
msgstr "实际案例"

#: megengine.module.rnn.LSTM:107 of
msgid "Outputs:"
msgstr "输出："

