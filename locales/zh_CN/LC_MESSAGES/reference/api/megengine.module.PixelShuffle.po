msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-21 10:50+0000\n"
"PO-Revision-Date: 2023-09-27 07:18\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/api/megengine.module.PixelShuffle.po\n"
"X-Crowdin-File-ID: 9533\n"

#: ../../source/reference/api/megengine.module.PixelShuffle.rst:5
msgid "PixelShuffle"
msgstr "PixelShuffle"

#: megengine.module.pixel_shuffle.PixelShuffle:1 of
msgid "Rearranges elements in a tensor of shape (*, C x r^2, H, W) to a tensor of shape (*, C, H x r, W x r), where r is an upscale factor, where * is zero or more batch dimensions."
msgstr "将形状为（*, C x r^2, H, W）的向量中的元素重新排列为形状为（*, C, H x r, W x r） 的向量，其中 r 是一个上采样因子，其中*是零或 batch 的维度。"

#: megengine.module.pixel_shuffle.PixelShuffle:5 of
msgid "See the paper: `Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network<https://arxiv.org/abs/1609.05158>` for more details."
msgstr "关于更多细节请参考 `Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network<https://arxiv.org/abs/1609.05158>`"

#: megengine.module.pixel_shuffle.PixelShuffle of
msgid "参数"
msgstr "参数"

#: megengine.module.pixel_shuffle.PixelShuffle:8 of
msgid "factor to increase spatial resolution by."
msgstr "空间分辨率提升因子。"

#: megengine.module.pixel_shuffle.PixelShuffle:20 of
msgid "Shape:"
msgstr "形状："

#: megengine.module.pixel_shuffle.PixelShuffle:12 of
msgid "input: :math:`(*, C_{in}, H_{in}, W_{in})`, where * is zero or more batch dimensions."
msgstr "输入：:math:`(*, C_{in}, H_{in}, W_{in})`，其中 * 表示 batch 可为任意维。"

#: megengine.module.pixel_shuffle.PixelShuffle:13 of
msgid "output: :math:`(*, C_{out}, H_{out}, W_{out})`, where:"
msgstr "输出：:math:`(*, C_{out}, H_{out}, W_{out})`，其中："

#: megengine.module.pixel_shuffle.PixelShuffle:18 of
msgid "\\begin{aligned}"
msgstr ""

#: megengine.module.pixel_shuffle.PixelShuffle:17 of
msgid "C_{out} = C_{in} \\div \\text{upscale\\_factor}^2 \\\\ H_{out} = H_{in} \\times \\text{upscale\\_factor} \\\\ W_{out} = W_{in} \\times \\text{upscale\\_factor} \\\\"
msgstr "C_{out} = C_{in} \\div \\text{upscale\\_factor}^2 \\\\ H_{out} = H_{in} \\times \\text{upscale\\_factor} \\\\ W_{out} = W_{in} \\times \\text{upscale\\_factor} \\\\"

#: megengine.module.pixel_shuffle.PixelShuffle:20 of
msgid "\\end{aligned}"
msgstr ""

#: megengine.module.pixel_shuffle.PixelShuffle:23 of
msgid "实际案例"
msgstr "实际案例"

#~ msgid "megengine.module.PixelShuffle"
#~ msgstr ""

#~ msgid "Methods"
#~ msgstr ""

#~ msgid ":obj:`apply <megengine.module.PixelShuffle.apply>`\\ \\(fn\\)"
#~ msgstr ""

#~ msgid ""
#~ "Applies function ``fn`` to all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`buffers <megengine.module.PixelShuffle.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the buffers of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`children <megengine.module.PixelShuffle.children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "submodules that are direct attributes of"
#~ " this module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.PixelShuffle.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets ``module``'s ``quantize_disabled`` attribute"
#~ " and return ``module``."
#~ msgstr ""

#~ msgid ":obj:`eval <megengine.module.PixelShuffle.eval>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``False``."
#~ msgstr ""

#~ msgid ":obj:`forward <megengine.module.PixelShuffle.forward>`\\ \\(x\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.PixelShuffle.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Loads a given dictionary created by "
#~ ":func:`state_dict` into this module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`modules <megengine.module.PixelShuffle.modules>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`named_buffers "
#~ "<megengine.module.PixelShuffle.named_buffers>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key buffer "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the buffer."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`named_children "
#~ "<megengine.module.PixelShuffle.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable of key-submodule "
#~ "pairs for all the submodules that "
#~ "are direct attributes of this module,"
#~ " where 'key' is the attribute name"
#~ " of submodules."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`named_modules "
#~ "<megengine.module.PixelShuffle.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable of key-module "
#~ "pairs for all the modules within "
#~ "this module, including itself, where "
#~ "'key' is the dotted path from this"
#~ " module to the submodules."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.PixelShuffle.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key "
#~ ":class:`~.Parameter` pairs of the module, "
#~ "where ``key`` is the dotted path "
#~ "from this module to the "
#~ ":class:`~.Parameter`."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`named_tensors "
#~ "<megengine.module.PixelShuffle.named_tensors>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key tensor "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the tensor."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`parameters <megengine.module.PixelShuffle.parameters>`\\"
#~ " \\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Parameter` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.PixelShuffle.register_forward_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""

#~ msgid "Registers a hook to handle forward results."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.PixelShuffle.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""

#~ msgid "Registers a hook to handle forward inputs."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`replace_param "
#~ "<megengine.module.PixelShuffle.replace_param>`\\ \\(params\\,"
#~ " start\\_pos\\[\\, seen\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Replaces module's parameters with ``params``,"
#~ " used by :class:`~.ParamPack` to"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`state_dict <megengine.module.PixelShuffle.state_dict>`\\"
#~ " \\(\\[rst\\, prefix\\, keep\\_var\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`tensors <megengine.module.PixelShuffle.tensors>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Tensor` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`train <megengine.module.PixelShuffle.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``mode``."
#~ msgstr ""

#~ msgid ":obj:`zero_grad <megengine.module.PixelShuffle.zero_grad>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Sets all parameters' grads to zero"
#~ msgstr ""

