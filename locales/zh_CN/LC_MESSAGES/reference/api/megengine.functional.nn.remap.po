msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-01 21:02+0800\n"
"PO-Revision-Date: 2023-05-11 10:49\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/api/megengine.functional.nn.remap.po\n"
"X-Crowdin-File-ID: 9271\n"

#: ../../source/reference/api/megengine.functional.nn.remap.rst:2
msgid "megengine.functional.nn.remap"
msgstr ""

#: megengine.functional.vision.remap:1 of
msgid "Applies remap transformation to batched 2D images. Remap is an operation that relocates pixels in a image to another location in a new image."
msgstr "对一批 2D 图像使用重映射。重映射指的是将图像中的像素重新定位到新图像中另一个位置。"

#: megengine.functional.vision.remap:3 of
msgid "The input images are transformed to the output images by the tensor ``map_xy``. The output's H and W are same as ``map_xy``'s H and W."
msgstr "输入图像通过向量 ``map_xy`` 转换为输出图像。输出向量的 H 和 W 与 ``map_xy`` 的 H 和 W 相同"

#: megengine.functional.vision.remap of
msgid "参数"
msgstr ""

#: megengine.functional.vision.remap:7 of
msgid "input image, its shape represents ``[b, c, in_h, in_w]``."
msgstr "输入图像，其形状表示为 ``[b, c, in_h, in_w]``"

#: megengine.functional.vision.remap:9 of
msgid "transformation matrix, its shape shoule be ``[b, o_h, o_w, 2]``. The shape of output is determined by o_h and o_w. For each element in output, its value is determined by inp and ``map_xy``. ``map_xy[..., 0]`` and ``map_xy[..., 1]`` are the positions of the current element in inp, respectively. Therefore, their ranges are ``[0, in_w - 1]`` and ``[0, in_h - 1]``."
msgstr "转换矩阵，其形状应该是 ``[b, o_h, o_w, 2]``. 输出向量的形状由 o_h 和 o_w 来决定。对于输出中的每个元素，其值由 inp 和 ``map_xy`` 来决定， ``map_xy[..., 0]`` 以及 ``map_xy[..., 1]`` 分别是 inp 当前元素的位置。因此，结果的取值范围在 ``[0, in_w - 1]`` 以及 ``[0, in_h - 1]`` 之间。"

#: megengine.functional.vision.remap:14 of
msgid "pixel extrapolation method. Default: \"replicate\". Currently also support \"constant\", \"reflect\", \"reflect_101\", \"wrap\". \"replicate\": repeatedly fills the edge pixel values of the duplicate image, expanding the new boundary pixel values with the edge pixel values. \"constant\": fills the edges of the image with a fixed numeric value."
msgstr "像素填充方式。默认值为 \"replicate\"， 目前也支持 \"constant\", \"reflect\", \"reflect_101\", \"wrap\". \"replicate\" 表示重复填充图像的边缘像素值，来展开新的边界。\"constant\" 表示用固定的数值来填充图像的边缘。"

#: megengine.functional.vision.remap:19 of
msgid "value used in case of a constant border. Default: 0"
msgstr "边界填充值。 默认：0"

#: megengine.functional.vision.remap:21 of
msgid "interpolation methods. Default: \"linear\". Currently also support \"nearest\" mode."
msgstr "插值方法。默认值: \"linear\", 目前支持参数: \"linear\" 和 \"nearest\""

#: megengine.functional.vision.remap of
msgid "返回类型"
msgstr ""

#: megengine.functional.vision.remap:23 of
msgid ":py:class:`~megengine.tensor.Tensor`"
msgstr ""

#: megengine.functional.vision.remap of
msgid "返回"
msgstr ""

#: megengine.functional.vision.remap:24 of
msgid "output tensor. [b, c, o_h, o_w]"
msgstr "输出向量，形状为 [b, c, o_h, o_w]"

#: megengine.functional.vision.remap:27 of
msgid "实际案例"
msgstr "实际案例"

#~ msgid "batch, oh, ow, 2) transformation matrix"
#~ msgstr "变换矩阵。 变化矩阵的shape是[批数, 输出高度, 输出宽度]。"

#~ msgid ""
#~ "pixel extrapolation method. Default: "
#~ "\"replicate\". Currently also support "
#~ "\"constant\", \"reflect\", \"reflect_101\", "
#~ "\"wrap\"."
#~ msgstr ""
#~ "边界处理方法。 默认值是\"replicate\"，目前还支持 \"constant\", "
#~ "\"reflect\", \"reflect_101\", \"wrap\"的边界处理方法。"

#~ msgid "Outputs:"
#~ msgstr "输出："

#~ msgid "Applies remap transformation to batched 2D images."
#~ msgstr "对按批组织的二维图像进行重映射变换。"

#~ msgid "input image"
#~ msgstr "输入图像"

#~ msgid ""
#~ "transformation matrix, its shape represents"
#~ " [batch_size, H, W, 2]. map_xy's H"
#~ " and W are the same as output's"
#~ " H and W. For each output "
#~ "location output[n, h, w], the vector "
#~ "map_xy[n, h, w] specifies input pixel"
#~ " location x and y, which are "
#~ "used to interpolate the output value "
#~ "output[n, h, w]. In the case of"
#~ " 2D inputs, map_xy[n, h, w] specifies"
#~ " the x, y pixel locations for "
#~ "interpolating output[n, h, w], map_xy "
#~ "specifies the sampling pixel locations "
#~ "normalized by the inp spatial "
#~ "dimensions. Therefore, it should have "
#~ "most values in the range of [0,"
#~ " h - 1) and [0, w - 1)."
#~ msgstr ""

