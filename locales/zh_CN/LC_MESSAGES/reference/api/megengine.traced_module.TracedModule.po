msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-14 16:12+0800\n"
"PO-Revision-Date: 2022-02-22 23:27\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/zh_CN/LC_MESSAGES/reference/api/megengine.traced_module.TracedModule.po\n"
"X-Crowdin-File-ID: 7741\n"

#: ../../source/reference/api/megengine.traced_module.TracedModule.rst:5
msgid "TracedModule"
msgstr ""

#: megengine.traced_module.traced_module.TracedModule:1 of
msgid "``TracedModule`` is the Module created by tracing normal module."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule:3 of
msgid "It owns an argdef to graph(InternalGraph) map. The forward method of ``TracedModule`` will get a graph from ``argdef_graph_map`` according to the argdef of input ``args/kwargs`` and interpret it."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule:8 of
msgid "``TracedModule`` can only be created by :func:`~.trace_module`. See :func:`~.trace_module` for more details."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.clear_end_points:1 of
msgid "Clear the :attr:`~.TracedModule.end_points`."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.clear_watch_points:1 of
msgid "Clear the :attr:`~.TracedModule.watch_points` and :attr:`~.TracedModule.watch_node_value`."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.flatten:1 of
msgid "Get a new TracedModule, which eliminates ``GetAttr`` and has no hierarchy."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.flatten:3 of
msgid "Retruns:"
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.flatten:4 of
msgid "A new :class:`TracedModule`."
msgstr ""

#: megengine.traced_module.TracedModule.graph:1 of
msgid "Return the ``InternalGraph`` of this ``TracedModule``."
msgstr ""

#: megengine.traced_module.TracedModule.graph of
msgid "返回类型"
msgstr "返回类型"

#: megengine.traced_module.TracedModule.graph:3 of
msgid ":py:class:`~megengine.traced_module.traced_module.InternalGraph`"
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_end_points:1 of
msgid "Initialize the :attr:`~.TracedModule.end_points`."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_end_points:3 of
msgid "When all the ``nodes`` are generated, the Module will stop execution and return directly."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_end_points
#: megengine.traced_module.traced_module.TracedModule.set_watch_points of
msgid "参数"
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_end_points:6
#: megengine.traced_module.traced_module.TracedModule.set_watch_points:5 of
msgid "a list of ``Node``."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_end_points:8
#: megengine.traced_module.traced_module.TracedModule.set_watch_points:7 of
msgid "For example, the following code"
msgstr "例如，下面的代码"

#: megengine.traced_module.traced_module.TracedModule.set_end_points:30 of
msgid "Will get the following ``out``::"
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_watch_points:1 of
msgid "Initialize the :attr:`~.TracedModule.watch_points`."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_watch_points:3 of
msgid "You can call this function to get the ``Tensor/Module`` corresponding to a ``Node`` at runtime."
msgstr ""

#: megengine.traced_module.traced_module.TracedModule.set_watch_points:29 of
msgid "Will get the following ``watch_node_value``::"
msgstr ""

#~ msgid "Return the ``InternalGraph`` of this ``TracedModule``"
#~ msgstr ""

#~ msgid "megengine.traced\\_module.TracedModule"
#~ msgstr ""

#~ msgid "Attributes"
#~ msgstr "属性"

#~ msgid ""
#~ ":obj:`argdef_graph_map "
#~ "<megengine.traced_module.TracedModule.argdef_graph_map>`\\"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`argdef_outdef_map "
#~ "<megengine.traced_module.TracedModule.argdef_outdef_map>`\\"
#~ msgstr ""

#~ msgid ":obj:`graph <megengine.traced_module.TracedModule.graph>`\\"
#~ msgstr ""

#~ msgid "Methods"
#~ msgstr "方法"

#~ msgid ":obj:`apply <megengine.traced_module.TracedModule.apply>`\\ \\(fn\\)"
#~ msgstr ""

#~ msgid ""
#~ "Applies function ``fn`` to all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "对当前模块中的所有模块应用函数 ``fn``，包括当前模块本身。"

#~ msgid ""
#~ ":obj:`buffers <megengine.traced_module.TracedModule.buffers>`\\"
#~ " \\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the buffers of the module."
#~ msgstr "返回该模块中对于buffers的一个可迭代对象。"

#~ msgid ""
#~ ":obj:`children "
#~ "<megengine.traced_module.TracedModule.children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "submodules that are direct attributes of"
#~ " this module."
#~ msgstr "返回一个可迭代对象，可遍历所有属于当前模块的直接属性的子模块。"

#~ msgid ""
#~ ":obj:`clear_end_points "
#~ "<megengine.traced_module.TracedModule.clear_end_points>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`clear_watch_points "
#~ "<megengine.traced_module.TracedModule.clear_watch_points>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`disable_quantize "
#~ "<megengine.traced_module.TracedModule.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets ``module``'s ``quantize_disabled`` attribute"
#~ " and return ``module``."
#~ msgstr "设置 ``module`` 的 ``quantize_diabled`` 属性，并返回 ``module`` 。"

#~ msgid ":obj:`eval <megengine.traced_module.TracedModule.eval>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``False``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``False`` ，并将其切换为推理模式。"

#~ msgid ":obj:`flatten <megengine.traced_module.TracedModule.flatten>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`forward <megengine.traced_module.TracedModule.forward>`\\"
#~ " \\(\\*args\\, \\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.traced_module.TracedModule.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Loads a given dictionary created by "
#~ ":func:`state_dict` into this module."
#~ msgstr "加载一个参数字典，这个字典通常使用 :func:`state_dict` 得到。"

#~ msgid ""
#~ ":obj:`modules <megengine.traced_module.TracedModule.modules>`\\"
#~ " \\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "返回一个可迭代对象，可以遍历当前模块中的所有模块，包括其本身。"

#~ msgid ""
#~ ":obj:`named_buffers "
#~ "<megengine.traced_module.TracedModule.named_buffers>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key buffer "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the buffer."
#~ msgstr ""
#~ "返回可遍历模块中 key 与 buffer 的键值对的可迭代对象，其中 "
#~ "``key`` 为从该模块至 buffer 的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_children "
#~ "<megengine.traced_module.TracedModule.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable of key-submodule "
#~ "pairs for all the submodules that "
#~ "are direct attributes of this module,"
#~ " where 'key' is the attribute name"
#~ " of submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历属于当前模块的直接属性的所有子模块（submodule）与键（key）组成的”key-"
#~ "submodule”对，其中'key'是子模块对应的属性名。"

#~ msgid ""
#~ ":obj:`named_modules "
#~ "<megengine.traced_module.TracedModule.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable of key-module "
#~ "pairs for all the modules within "
#~ "this module, including itself, where "
#~ "'key' is the dotted path from this"
#~ " module to the submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历当前模块包括自身在内的所有其内部模块所组成的key-"
#~ "module键-模块对，其中'key'是从当前模块到各子模块的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_parameters "
#~ "<megengine.traced_module.TracedModule.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key "
#~ ":class:`~.Parameter` pairs of the module, "
#~ "where ``key`` is the dotted path "
#~ "from this module to the "
#~ ":class:`~.Parameter`."
#~ msgstr ""
#~ "返回一个可迭代对象，可以遍历当前模块中key与 :class:`~.Parameter` 组成的键值对。其中"
#~ "  ``key`` 是从模块到 :class:`~.Parameter` 的点路径（dotted"
#~ " path）。"

#~ msgid ""
#~ ":obj:`named_tensors "
#~ "<megengine.traced_module.TracedModule.named_tensors>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key tensor "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the tensor."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`parameters "
#~ "<megengine.traced_module.TracedModule.parameters>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Parameter` of the module."
#~ msgstr "返回一个可迭代对象，遍历当前模块中的所有 :class:`~.Parameter`"

#~ msgid ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.traced_module.TracedModule.register_forward_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""

#~ msgid "Registers a hook to handle forward results."
#~ msgstr "给模块输出注册一个回调函数。"

#~ msgid ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.traced_module.TracedModule.register_forward_pre_hook>`\\"
#~ " \\(hook\\)"
#~ msgstr ""

#~ msgid "Registers a hook to handle forward inputs."
#~ msgstr "给模块输入注册一个回调函数。"

#~ msgid ""
#~ ":obj:`replace_param "
#~ "<megengine.traced_module.TracedModule.replace_param>`\\ "
#~ "\\(params\\, start\\_pos\\[\\, seen\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Replaces module's parameters with ``params``,"
#~ " used by :class:`~.ParamPack` to"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`set_end_points "
#~ "<megengine.traced_module.TracedModule.set_end_points>`\\ "
#~ "\\(nodes\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`set_watch_points "
#~ "<megengine.traced_module.TracedModule.set_watch_points>`\\ "
#~ "\\(nodes\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`state_dict "
#~ "<megengine.traced_module.TracedModule.state_dict>`\\ "
#~ "\\(\\[rst\\, prefix\\, keep\\_var\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`tensors <megengine.traced_module.TracedModule.tensors>`\\"
#~ " \\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Tensor` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`train <megengine.traced_module.TracedModule.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``mode``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``mode``。"

#~ msgid ""
#~ ":obj:`zero_grad "
#~ "<megengine.traced_module.TracedModule.zero_grad>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Sets all parameters' grads to zero"
#~ msgstr "将所有参数的梯度置0。"

