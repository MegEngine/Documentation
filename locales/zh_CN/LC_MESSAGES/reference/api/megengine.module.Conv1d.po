
msgid ""
msgstr ""
"Project-Id-Version:  megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-22 01:14+0800\n"
"PO-Revision-Date: 2021-04-21 03:34+0000\n"
"Last-Translator: \n"
"Language: zh_Hans_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/reference/api/megengine.module.Conv1d.rst:2
msgid "megengine.module.Conv1d"
msgstr "megengine.module.Conv1d"

#: megengine.module.conv.Conv1d:1 of
msgid "基类：:class:`megengine.module.conv._ConvNd`"
msgstr "基类：:class:`megengine.module.conv._ConvNd`"

#: megengine.module.conv.Conv1d:1 of
msgid "Applies a 1D convolution over an input tensor."
msgstr "对输入张量进行一维卷积"

#: megengine.module.conv.Conv1d:3 of
msgid ""
"For instance, given an input of the size :math:`(N, C_{\\text{in}}, H)`, "
"this layer generates an output of the size :math:`(N, C_{\\text{out}}, "
"H_{\\text{out}})` through the process described as below:"
msgstr ""
"例如，给定形状为 :math:`(N, C_{\\text{in}}, H)`  的输入，该层生成形状为 :math:`(N, "
"C_{\\text{out}}, H_{\\text{out}})` 的输出，生成过程如下："

#: megengine.module.conv.Conv1d:8 of
#, fuzzy
msgid ""
"\\text{out}(N_i, C_{\\text{out}_j}) = \\text{bias}(C_{\\text{out}_j}) +\n"
"\\sum_{k = 0}^{C_{\\text{in}} - 1} \\text{weight}(C_{\\text{out}_j}, k) "
"\\star \\text{input}(N_i, k)\n"
"\n"
msgstr ""
"\\text{out}(N_i, C_{\\text{out}_j}) = \\text{bias}(C_{\\text{out}_j}) +\n"
"\\sum_{k = 0}^{C_{\\text{in}} - 1} \\text{weight}(C_{\\text{out}_j}, k) "
"\\star \\text{input}(N_i, k)"

#: megengine.module.conv.Conv1d:12 of
msgid ""
"where :math:`\\star` is the valid 1D cross-correlation operator, "
":math:`N` is batch size, :math:`C` denotes number of channels, and "
":math:`H` is length of 1D data element."
msgstr ""
"其中 :math:`\\star` 是有效的1D互相关运算; :math:`N` 是批大小; :math:`C` 表示通道数; :math:`H`"
" 是以像素为单位输入平面的高度。"

#: megengine.module.conv.Conv1d:17 of
msgid ""
"When `groups == in_channels` and `out_channels == K * in_channels`, where"
" K is a positive integer, this operation is also known as depthwise "
"convolution."
msgstr ""
"当 `groups == in_channels` 且 `out_channels == K * in_channels` ，其中 K "
"是正整数，该操作也被称为深度方向卷积（depthwise convolution）。"

#: megengine.module.conv.Conv1d:21 of
msgid ""
"In other words, for an input of size :math:`(N, C_{in}, H_{in})`, a "
"depthwise convolution with a depthwise multiplier `K`, can be constructed"
" by arguments :math:`(in\\_channels=C_{in}, out\\_channels=C_{in} \\times"
" K, ..., groups=C_{in})`."
msgstr ""
"换句话说，对于形状为 :math:`(N, C_{in}, H_{in})` 的输入，可通过参数 "
":math:`(in\\_channels=C_{in}, out\\_channels=C_{in} \\times K, ..., "
"groups=C_{in})` ，构造一个深度方向乘法器 `K`。"

#: megengine.module.conv.Conv1d of
msgid "参数"
msgstr ""

#: megengine.module.conv.Conv1d:26 of
msgid "number of input channels."
msgstr "输入数据中的通道数。"

#: megengine.module.conv.Conv1d:28 of
msgid "number of output channels."
msgstr "输出数据中的通道数。"

#: megengine.module.conv.Conv1d:30 of
msgid ""
"size of weight on spatial dimensions. If kernel_size is an :class:`int`, "
"the actual kernel size would be `(kernel_size, kernel_size)`. Default: 1"
msgstr ""
"在空域维度权重的尺寸。如果 kernel_size 是一个 :class:`int` ，则实际的卷积核尺寸是 `(kernel_size, "
"kernel_size)` 。默认：1"

#: megengine.module.conv.Conv1d:34 of
msgid "stride of the 1D convolution operation. Default: 1"
msgstr "一维卷积运算的步长。默认：1"

#: megengine.module.conv.Conv1d:36 of
msgid ""
"size of the paddings added to the input on both sides of its spatial "
"dimensions. Only zero-padding is supported. Default: 0"
msgstr "输入数据空域维度两侧的填充（padding）大小。仅支持填充0值。默认：0"

#: megengine.module.conv.Conv1d:39 of
msgid "dilation of the 1D convolution operation. Default: 1"
msgstr "一维卷积运算的空洞（dilation）。默认：1"

#: megengine.module.conv.Conv1d:41 of
msgid ""
"number of groups into which the input and output channels are divided, so"
" as to perform a \"grouped convolution\". When ``groups`` is not 1, "
"``in_channels`` and ``out_channels`` must be divisible by ``groups``, and"
" there would be an extra dimension at the beginning of the weight's "
"shape. Specifically, the shape of weight would be `(groups, out_channel "
"// groups, in_channels // groups, *kernel_size)`."
msgstr ""
"将输入与输出通道分组的数目，用于进行分组卷积（grouped convolution）。当 ``groups`` 不为1时， "
"``in_channels`` 和  ``out_channels`` 必须可被 ``groups`` "
"整除，并且在权重形状的开始附加一个额外的维度。具体来说，权重的形状会变为 `(groups, out_channel // groups, "
"in_channels // groups, *kernel_size)` 。 默认：1"

#: megengine.module.conv.Conv1d:48 of
msgid "whether to add a bias onto the result of convolution. Default: True"
msgstr "是否将偏置（bias）加入卷积的结果中。默认：True"

#: megengine.module.conv.Conv1d:51 of
msgid "Supports `CROSS_CORRELATION`. Default: `CROSS_CORRELATION`"
msgstr "支持 `CROSS_CORRELATION`。默认：`CROSS_CORRELATION`"

#: megengine.module.conv.Conv1d:54 of
msgid ""
"When set to \"DEFAULT\", no special requirements will be placed on the "
"precision of intermediate results. When set to \"FLOAT32\", \"Float32\" "
"would be used for accumulator and intermediate result, but only effective"
" when input and output are of float16 dtype."
msgstr ""
"若设定为 `DEFAULT` ，则对中间结果的精度没有特殊的要求。当设定为 `FLOAT32` 时，FLOAT32 "
"将作为累加器和中间结果的精度，但只有当输入和输出的 dtype 是 float16 时才生效。"

#: megengine.module.conv.Conv1d:59 of
msgid "Examples:"
msgstr "例如："

#: megengine.module.conv.Conv1d:72 of
msgid "Outputs:"
msgstr "输出："

#: ../../source/reference/api/megengine.module.Conv1d.rst:11
msgid "Methods"
msgstr "方法"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`__init__ <megengine.module.Conv1d.__init__>`\\ \\(in\\_channels\\, "
"out\\_channels\\, kernel\\_size\\)"
msgstr ""
":obj:`__init__ <megengine.module.Conv1d.__init__>`\\ \\(in\\_channels\\, "
"out\\_channels\\, kernel\\_size\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>
msgid "param name"
msgstr "参数名称"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "module's name, can be initialized by the ``kwargs`` parameter"
msgstr ""

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`apply <megengine.module.Conv1d.apply>`\\ \\(fn\\)"
msgstr ":obj:`apply <megengine.module.Conv1d.apply>`\\ \\(fn\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Applies function ``fn`` to all the modules within this module, including "
"itself."
msgstr "对当前模块中的所有模块应用函数 ``fn``，包括当前模块本身。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`buffers <megengine.module.Conv1d.buffers>`\\ \\(\\[recursive\\]\\)"
msgstr ":obj:`buffers <megengine.module.Conv1d.buffers>`\\ \\(\\[recursive\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Returns an iterable for the buffers of the module."
msgstr "返回该模块中对于buffers的一个可迭代对象。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`calc_conv <megengine.module.Conv1d.calc_conv>`\\ \\(inp\\, "
"weight\\, bias\\)"
msgstr ""
":obj:`calc_conv <megengine.module.Conv1d.calc_conv>`\\ \\(inp\\, "
"weight\\, bias\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`children <megengine.module.Conv1d.children>`\\ \\(\\*\\*kwargs\\)"
msgstr ":obj:`children <megengine.module.Conv1d.children>`\\ \\(\\*\\*kwargs\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Returns an iterable for all the submodules that are direct attributes of "
"this module."
msgstr "返回一个可迭代对象，可遍历所有属于当前模块的直接属性的子模块。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`disable_quantize <megengine.module.Conv1d.disable_quantize>`\\ "
"\\(\\[value\\]\\)"
msgstr ""
":obj:`disable_quantize <megengine.module.Conv1d.disable_quantize>`\\ "
"\\(\\[value\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Sets ``module``'s ``quantize_disabled`` attribute and return ``module``."
msgstr "设置 ``module`` 的 ``quantize_diabled`` 属性，并返回 ``module`` 。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`eval <megengine.module.Conv1d.eval>`\\ \\(\\)"
msgstr ":obj:`eval <megengine.module.Conv1d.eval>`\\ \\(\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Sets training mode of all the modules within this module (including "
"itself) to ``False``."
msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``False`` ，并将其切换为推理模式。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`forward <megengine.module.Conv1d.forward>`\\ \\(inp\\)"
msgstr ":obj:`forward <megengine.module.Conv1d.forward>`\\ \\(inp\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`load_state_dict <megengine.module.Conv1d.load_state_dict>`\\ "
"\\(state\\_dict\\[\\, strict\\]\\)"
msgstr ""
":obj:`load_state_dict <megengine.module.Conv1d.load_state_dict>`\\ "
"\\(state\\_dict\\[\\, strict\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Loads a given dictionary created by :func:`state_dict` into this module."
msgstr ""

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`modules <megengine.module.Conv1d.modules>`\\ \\(\\*\\*kwargs\\)"
msgstr ":obj:`modules <megengine.module.Conv1d.modules>`\\ \\(\\*\\*kwargs\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Returns an iterable for all the modules within this module, including "
"itself."
msgstr "返回一个可迭代对象，可以遍历当前模块中的所有模块，包括其本身。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`named_buffers <megengine.module.Conv1d.named_buffers>`\\ "
"\\(\\[prefix\\, recursive\\]\\)"
msgstr ""
":obj:`named_buffers <megengine.module.Conv1d.named_buffers>`\\ "
"\\(\\[prefix\\, recursive\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Returns an iterable for key buffer pairs of the module, where ``key`` is "
"the dotted path from this module to the buffer."
msgstr ""
"返回可遍历模块中 key 与 buffer 的键值对的可迭代对象，其中 ``key`` 为从该模块至 buffer 的点路径（dotted "
"path）。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`named_children <megengine.module.Conv1d.named_children>`\\ "
"\\(\\*\\*kwargs\\)"
msgstr ""
":obj:`named_children <megengine.module.Conv1d.named_children>`\\ "
"\\(\\*\\*kwargs\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Returns an iterable of key-submodule pairs for all the submodules that "
"are direct attributes of this module, where 'key' is the attribute name "
"of submodules."
msgstr ""
"返回可迭代对象，可以遍历属于当前模块的直接属性的所有子模块（submodule）与键（key）组成的”key-"
"submodule”对，其中'key'是子模块对应的属性名。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`named_modules <megengine.module.Conv1d.named_modules>`\\ "
"\\(\\[prefix\\]\\)"
msgstr ""
":obj:`named_modules <megengine.module.Conv1d.named_modules>`\\ "
"\\(\\[prefix\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Returns an iterable of key-module pairs for all the modules within this "
"module, including itself, where 'key' is the dotted path from this module"
" to the submodules."
msgstr ""
"返回可迭代对象，可以遍历当前模块包括自身在内的所有其内部模块所组成的key-"
"module键-模块对，其中'key'是从当前模块到各子模块的点路径（dotted path）。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`named_parameters <megengine.module.Conv1d.named_parameters>`\\ "
"\\(\\[prefix\\, recursive\\]\\)"
msgstr ""
":obj:`named_parameters <megengine.module.Conv1d.named_parameters>`\\ "
"\\(\\[prefix\\, recursive\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Returns an iterable for key :class:`~.Parameter` pairs of the module, "
"where ``key`` is the dotted path from this module to the "
":class:`~.Parameter`."
msgstr ""
"返回一个可迭代对象，可以遍历当前模块中key与 :class:`~.Parameter` 组成的键值对。其中  ``key`` 是从模块到 "
":class:`~.Parameter` 的点路径（dotted path）。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`parameters <megengine.module.Conv1d.parameters>`\\ "
"\\(\\[recursive\\]\\)"
msgstr ""
":obj:`parameters <megengine.module.Conv1d.parameters>`\\ "
"\\(\\[recursive\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Returns an iterable for the :class:`~.Parameter` of the module."
msgstr "返回一个可迭代对象，遍历当前模块中的所有 :class:`~.Parameter`"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`register_forward_hook "
"<megengine.module.Conv1d.register_forward_hook>`\\ \\(hook\\)"
msgstr ""
":obj:`register_forward_hook "
"<megengine.module.Conv1d.register_forward_hook>`\\ \\(hook\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Registers a hook to handle forward results."
msgstr ""

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`register_forward_pre_hook "
"<megengine.module.Conv1d.register_forward_pre_hook>`\\ \\(hook\\)"
msgstr ""
":obj:`register_forward_pre_hook "
"<megengine.module.Conv1d.register_forward_pre_hook>`\\ \\(hook\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Registers a hook to handle forward inputs."
msgstr ""

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`replace_param <megengine.module.Conv1d.replace_param>`\\ "
"\\(params\\, start\\_pos\\[\\, seen\\]\\)"
msgstr ""
":obj:`replace_param <megengine.module.Conv1d.replace_param>`\\ "
"\\(params\\, start\\_pos\\[\\, seen\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Replaces module's parameters with ``params``, used by "
":class:`~.ParamPack` to speedup multimachine training."
msgstr "用 `param` 替换模块的参数，被 :class:`~.ParamPack` 用来加速多机训练。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`reset_parameters <megengine.module.Conv1d.reset_parameters>`\\ "
"\\(\\)"
msgstr ""
":obj:`reset_parameters <megengine.module.Conv1d.reset_parameters>`\\ "
"\\(\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>
msgid "rtype"
msgstr ""

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":py:obj:`None`"
msgstr ":py:obj:`None`"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`state_dict <megengine.module.Conv1d.state_dict>`\\ \\(\\[rst\\, "
"prefix\\, keep\\_var\\]\\)"
msgstr ""
":obj:`state_dict <megengine.module.Conv1d.state_dict>`\\ \\(\\[rst\\, "
"prefix\\, keep\\_var\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
":obj:`train <megengine.module.Conv1d.train>`\\ \\(\\[mode\\, "
"recursive\\]\\)"
msgstr ""
":obj:`train <megengine.module.Conv1d.train>`\\ \\(\\[mode\\, "
"recursive\\]\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ""
"Sets training mode of all the modules within this module (including "
"itself) to ``mode``."
msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``mode``。"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid ":obj:`zero_grad <megengine.module.Conv1d.zero_grad>`\\ \\(\\)"
msgstr ":obj:`zero_grad <megengine.module.Conv1d.zero_grad>`\\ \\(\\)"

#: ../../source/reference/api/megengine.module.Conv1d.rst:35:<autosummary>:1
msgid "Sets all parameters' grads to zero"
msgstr "将所有参数的梯度置0。"

