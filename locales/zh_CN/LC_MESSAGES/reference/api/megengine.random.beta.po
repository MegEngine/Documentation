msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-20 12:44+0800\n"
"PO-Revision-Date: 2022-06-24 03:05\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /[MegEngine.Documentation] main/locales/zh_CN/LC_MESSAGES/reference/api/megengine.random.beta.po\n"
"X-Crowdin-File-ID: 7693\n"

#: ../../source/reference/api/megengine.random.beta.rst:2
msgid "megengine.random.beta"
msgstr "megengine.random.beta"

#: megengine.random.rng.RNG.beta:1 of
msgid "Random variable with Beta distribution :math:`\\operatorname{Beta}(\\alpha, \\beta)`."
msgstr "服从贝塔分布 :math:`\\operatorname{Beta}(\\alpha, \\beta)` 的随机变量。"

#: megengine.random.rng.RNG.beta:3 of
msgid "The corresponding probability density function is"
msgstr "对应的概率密度函数为"

#: megengine.random.rng.RNG.beta:5 of
msgid "p(x)=\\frac{1}{\\mathrm{~B}(\\alpha, \\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\n"
"\\quad \\text { for } \\alpha, \\beta>0,"
msgstr "p(x)=\\frac{1}{\\mathrm{~B}(\\alpha, \\beta)} x^{\\alpha-1}(1-x)^{\\beta-1}\n"
"\\quad \\text { for } \\alpha, \\beta>0,"

#: megengine.random.rng.RNG.beta:10 of
msgid "where :math:`\\mathrm{~B}(\\alpha, \\beta)` is the beta function,"
msgstr "其中 :math:`\\mathrm{~B}(\\alpha, \\beta)` 是 Beta 函数，"

#: megengine.random.rng.RNG.beta:12 of
msgid "\\mathrm{~B}(\\alpha, \\beta)=\\int_{0}^{1} t^{\\alpha-1}(1-t)^{\\beta-1} d t."
msgstr "\\mathrm{~B}(\\alpha, \\beta)=\\int_{0}^{1} t^{\\alpha-1}(1-t)^{\\beta-1} d t."

#: megengine.random.rng.RNG.beta of
msgid "参数"
msgstr "参数"

#: megengine.random.rng.RNG.beta:17 of
msgid "the alpha parameter of the distribution. Must be non-negative."
msgstr "分布的 alpha 参数。必须是非负数。"

#: megengine.random.rng.RNG.beta:19 of
msgid "the beta parameter of the distribution. Must be non-negative."
msgstr "分布的 beta 参数。必须是非负数。"

#: megengine.random.rng.RNG.beta:21 of
msgid "the size of output tensor. If alpha and beta are scalars and given size is, e.g., `(m, n)`, then the output shape is `(m, n)`. If alpha or beta is a Tensor and given size is, e.g., `(m, n)`, then the output shape is `(m, n) + broadcast(alpha, beta).shape`."
msgstr "输出向量的大小。如果 alpha 和 beta 是标量，例如给定大小为 `(m, n)`，则输出形状为 `(m, n)`。如果 alpha 或 beta 是一个向量，例如给定的大小是 `(m, n)` ，那么输出形状是 `(m, n) + broadcast(alpha, beta).shape`."

#: megengine.random.rng.RNG.beta of
msgid "返回"
msgstr "返回"

#: megengine.random.rng.RNG.beta:25 of
msgid "the output tensor."
msgstr "输出张量"

#: megengine.random.rng.RNG.beta:28 of
msgid "实际案例"
msgstr "实际案例"

#: megengine.random.rng.RNG.beta:47 of
msgid "Outputs:"
msgstr "输出："

#~ msgid ""
#~ "p(x)=\\frac{1}{\\mathrm{~B}(\\alpha, \\beta)} "
#~ "x^{\\alpha-1}(1-x)^{\\beta-1}\n"
#~ "\\quad \\text { for } \\alpha, \\beta>0,\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "\\mathrm{~B}(\\alpha, \\beta)=\\int_{0}^{1} "
#~ "t^{\\alpha-1}(1-t)^{\\beta-1} d t.\n"
#~ "\n"
#~ msgstr ""

#~ msgid ""
#~ "the size of output tensor. If "
#~ "alpha and beta are scalars and "
#~ "given size is, e.g., `(m, n)`, "
#~ "then the output shape is `(m, n)`."
#~ " If alpha or beta is a Tensor"
#~ " and given size is, e.g., `(m, "
#~ "n)`, then the output shape is `(m,"
#~ " n) + broadcast(alpha, beta).shape`. The"
#~ " broadcast rules are consistent with "
#~ "`numpy.broadcast`. Default: None"
#~ msgstr ""

#~ msgid "Examples:"
#~ msgstr ""

#~ msgid ""
#~ "p(x)=\\frac{1}{\\mathrm{~B}(\\alpha, \\beta)} "
#~ "x^{\\alpha-1}(1-x)^{\\beta-1}\n"
#~ "\\quad \\text { for } \\alpha, \\beta>0，"
#~ msgstr ""

#~ msgid ""
#~ "\\mathrm{~B}(\\alpha, \\beta)=\\int_{0}^{1} "
#~ "t^{\\alpha-1}(1-t)^{\\beta-1} d t 。"
#~ msgstr ""

