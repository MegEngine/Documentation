msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-21 10:50+0000\n"
"PO-Revision-Date: 2023-10-25 04:04\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/api/megengine.module.BatchNorm1d.po\n"
"X-Crowdin-File-ID: 9469\n"

#: ../../source/reference/api/megengine.module.BatchNorm1d.rst:5
msgid "BatchNorm1d"
msgstr "BatchNorm1d"

#: megengine.module.batchnorm.BatchNorm1d:1 of
msgid "Applies Batch Normalization over a 2D or 3D input."
msgstr "在2维或3维的输入上应用批归一化操作"

#: megengine.module.batchnorm.BatchNorm1d:3 of
msgid "y = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta"
msgstr "y = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta"

#: megengine.module.batchnorm.BatchNorm1d:7 of
msgid "The mean and standard-deviation are calculated per-dimension over the mini-batches and :math:`\\gamma` and :math:`\\beta` are learnable parameter vectors of size `C` (where `C` is the number of features or channels of the input). By default, the elements of :math:`\\gamma` are set to 1 and the elements of :math:`\\beta` are set to 0. The standard-deviation is calculated via the biased estimator, equivalent to `torch.var(input, unbiased=False)`."
msgstr "均值和标准差是在整个`mini-batch`上分通道计算的，:math:`\\gamma` and :math:`\\beta`是长度为`C`的可学习的向量（这里`C`是输入的通道数）。默认情况下，:math:`\\gamma`使用`1`初始化，:math:`\\beta`使用`0`初始化。标准差使用有偏估计进行计算，与`torch.var(input, unbiased=False)`等价"

#: megengine.module.batchnorm.BatchNorm1d:13 of
msgid "By default, during training this layer keeps running estimates of its computed mean and variance, which are then used for normalization during evaluation. The running estimates are kept with a default :attr:`momentum` of 0.9."
msgstr "默认在训练过程中，该层持续估计其计算的均值和方差，随后在评估过程中用于标准化。运行中的估计保持默认的 :attr:`momentum` 值 0.9。"

#: megengine.module.batchnorm.BatchNorm1d:18 of
msgid "If :attr:`track_running_stats` is set to ``False``, this layer then does not keep running estimates, and batch statistics are instead used during evaluation time as well."
msgstr "若:attr:`track_running_stats`被设置为``False``，就不会额外保存统计量，在推理时会使用推理数据的统计量"

#: megengine.module.batchnorm.BatchNorm1d:22 of
msgid "Because the Batch Normalization is done over the `C` dimension, computing statistics on `(N, L)` slices, it's common terminology to call this Temporal Batch Normalization."
msgstr ""

#: megengine.module.batchnorm.BatchNorm1d:27 of
msgid "The update formula for ``running_mean`` and ``running_var`` (taking ``running_mean`` as an example) is"
msgstr "``running_mean`` 和 ``running_var`` 的更新公式如下（以 ``running_mean`` 为例）："

#: megengine.module.batchnorm.BatchNorm1d:29 of
msgid "\\textrm{running_mean} = \\textrm{momentum} \\times \\textrm{running_mean} + (1 - \\textrm{momentum}) \\times \\textrm{batch_mean}"
msgstr "\\textrm{running_mean} = \\textrm{momentum} \\times \\textrm{running_mean} + (1 - \\textrm{momentum}) \\times \\textrm{batch_mean}"

#: megengine.module.batchnorm.BatchNorm1d:33 of
msgid "which could be defined differently in other frameworks. Most notably, ``momentum`` of 0.1 in PyTorch is equivalent to ``mementum`` of 0.9 here."
msgstr "可能细节上和其它框架部完全一致。值得注意的是，在 PyTorch 中的 ``momentum`` 如果为 0.1，则在 MegEngine 中对应 0.9。"

#: megengine.module.batchnorm.BatchNorm1d:38 of
msgid "Shape:"
msgstr "形状："

#: megengine.module.batchnorm.BatchNorm1d:37 of
msgid "Input: :math:`(N, C)` or :math:`(N, C, L)`, where :math:`N` is the batch size, :math:`C` is the number of features or channels, and :math:`L` is the sequence length"
msgstr ""

#: megengine.module.batchnorm.BatchNorm1d:39 of
msgid "Output: :math:`(N, C)` or :math:`(N, C, L)` (same shape as input)"
msgstr ""

#~ msgid "基类：:class:`megengine.module.batchnorm._BatchNorm`"
#~ msgstr "基类：:class:`megengine.module.batchnorm._BatchNorm`"

#~ msgid ""
#~ ":obj:`__init__ <megengine.module.BatchNorm1d.__init__>`\\ "
#~ "\\(num\\_features\\[\\, eps\\, momentum\\, ...\\]\\)"
#~ msgstr ""
#~ ":obj:`__init__ <megengine.module.BatchNorm1d.__init__>`\\ "
#~ "\\(num\\_features\\[\\, eps\\, momentum\\, ...\\]\\)"

#~ msgid "param name"
#~ msgstr "参数名称"

#~ msgid "module's name, can be initialized by the ``kwargs`` parameter"
#~ msgstr "模块名称，子类的 ``kwargs`` 将会保存和传递此关键字参数。"

#~ msgid "rtype"
#~ msgstr ""

#~ msgid ":py:obj:`None`"
#~ msgstr ""

#~ msgid "megengine.module.BatchNorm1d"
#~ msgstr "megengine.module.BatchNorm1d"

#~ msgid "Methods"
#~ msgstr "方法"

#~ msgid ":obj:`apply <megengine.module.BatchNorm1d.apply>`\\ \\(fn\\)"
#~ msgstr ":obj:`apply <megengine.module.BatchNorm1d.apply>`\\ \\(fn\\)"

#~ msgid ""
#~ "Applies function ``fn`` to all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "对当前模块中的所有模块应用函数 ``fn``，包括当前模块本身。"

#~ msgid ""
#~ ":obj:`buffers <megengine.module.BatchNorm1d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`buffers <megengine.module.BatchNorm1d.buffers>`\\ "
#~ "\\(\\[recursive\\]\\)"

#~ msgid "Returns an iterable for the buffers of the module."
#~ msgstr "返回该模块中对于buffers的一个可迭代对象。"

#~ msgid ""
#~ ":obj:`children <megengine.module.BatchNorm1d.children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`children <megengine.module.BatchNorm1d.children>`\\ "
#~ "\\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "submodules that are direct attributes of"
#~ " this module."
#~ msgstr "返回一个可迭代对象，可遍历所有属于当前模块的直接属性的子模块。"

#~ msgid ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.BatchNorm1d.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"
#~ msgstr ""
#~ ":obj:`disable_quantize "
#~ "<megengine.module.BatchNorm1d.disable_quantize>`\\ "
#~ "\\(\\[value\\]\\)"

#~ msgid ""
#~ "Sets ``module``'s ``quantize_disabled`` attribute"
#~ " and return ``module``."
#~ msgstr "设置 ``module`` 的 ``quantize_diabled`` 属性，并返回 ``module`` 。"

#~ msgid ":obj:`eval <megengine.module.BatchNorm1d.eval>`\\ \\(\\)"
#~ msgstr ":obj:`eval <megengine.module.BatchNorm1d.eval>`\\ \\(\\)"

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``False``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``False`` ，并将其切换为推理模式。"

#~ msgid ":obj:`forward <megengine.module.BatchNorm1d.forward>`\\ \\(inp\\)"
#~ msgstr ":obj:`forward <megengine.module.BatchNorm1d.forward>`\\ \\(inp\\)"

#~ msgid ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.BatchNorm1d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"
#~ msgstr ""
#~ ":obj:`load_state_dict "
#~ "<megengine.module.BatchNorm1d.load_state_dict>`\\ "
#~ "\\(state\\_dict\\[\\, strict\\]\\)"

#~ msgid ""
#~ "Loads a given dictionary created by "
#~ ":func:`state_dict` into this module."
#~ msgstr "加载一个参数字典，这个字典通常使用 :func:`state_dict` 得到。"

#~ msgid ""
#~ ":obj:`modules <megengine.module.BatchNorm1d.modules>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`modules <megengine.module.BatchNorm1d.modules>`\\ "
#~ "\\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable for all the "
#~ "modules within this module, including "
#~ "itself."
#~ msgstr "返回一个可迭代对象，可以遍历当前模块中的所有模块，包括其本身。"

#~ msgid ""
#~ ":obj:`named_buffers "
#~ "<megengine.module.BatchNorm1d.named_buffers>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`named_buffers "
#~ "<megengine.module.BatchNorm1d.named_buffers>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"

#~ msgid ""
#~ "Returns an iterable for key buffer "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the buffer."
#~ msgstr ""
#~ "返回可遍历模块中 key 与 buffer 的键值对的可迭代对象，其中 "
#~ "``key`` 为从该模块至 buffer 的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_children "
#~ "<megengine.module.BatchNorm1d.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"
#~ msgstr ""
#~ ":obj:`named_children "
#~ "<megengine.module.BatchNorm1d.named_children>`\\ "
#~ "\\(\\*\\*kwargs\\)"

#~ msgid ""
#~ "Returns an iterable of key-submodule "
#~ "pairs for all the submodules that "
#~ "are direct attributes of this module,"
#~ " where 'key' is the attribute name"
#~ " of submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历属于当前模块的直接属性的所有子模块（submodule）与键（key）组成的”key-"
#~ "submodule”对，其中'key'是子模块对应的属性名。"

#~ msgid ""
#~ ":obj:`named_modules "
#~ "<megengine.module.BatchNorm1d.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"
#~ msgstr ""
#~ ":obj:`named_modules "
#~ "<megengine.module.BatchNorm1d.named_modules>`\\ "
#~ "\\(\\[prefix\\]\\)"

#~ msgid ""
#~ "Returns an iterable of key-module "
#~ "pairs for all the modules within "
#~ "this module, including itself, where "
#~ "'key' is the dotted path from this"
#~ " module to the submodules."
#~ msgstr ""
#~ "返回可迭代对象，可以遍历当前模块包括自身在内的所有其内部模块所组成的key-"
#~ "module键-模块对，其中'key'是从当前模块到各子模块的点路径（dotted path）。"

#~ msgid ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.BatchNorm1d.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`named_parameters "
#~ "<megengine.module.BatchNorm1d.named_parameters>`\\ "
#~ "\\(\\[prefix\\, recursive\\]\\)"

#~ msgid ""
#~ "Returns an iterable for key "
#~ ":class:`~.Parameter` pairs of the module, "
#~ "where ``key`` is the dotted path "
#~ "from this module to the "
#~ ":class:`~.Parameter`."
#~ msgstr ""
#~ "返回一个可迭代对象，可以遍历当前模块中key与 :class:`~.Parameter` 组成的键值对。其中"
#~ "  ``key`` 是从模块到 :class:`~.Parameter` 的点路径（dotted"
#~ " path）。"

#~ msgid ""
#~ ":obj:`named_tensors "
#~ "<megengine.module.BatchNorm1d.named_tensors>`\\ \\(\\[prefix\\,"
#~ " recursive\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Returns an iterable for key tensor "
#~ "pairs of the module, where ``key`` "
#~ "is the dotted path from this "
#~ "module to the tensor."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`parameters <megengine.module.BatchNorm1d.parameters>`\\"
#~ " \\(\\[recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`parameters <megengine.module.BatchNorm1d.parameters>`\\"
#~ " \\(\\[recursive\\]\\)"

#~ msgid "Returns an iterable for the :class:`~.Parameter` of the module."
#~ msgstr "返回一个可迭代对象，遍历当前模块中的所有 :class:`~.Parameter`"

#~ msgid ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.BatchNorm1d.register_forward_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""
#~ ":obj:`register_forward_hook "
#~ "<megengine.module.BatchNorm1d.register_forward_hook>`\\ "
#~ "\\(hook\\)"

#~ msgid "Registers a hook to handle forward results."
#~ msgstr "给模块输出注册一个回调函数。"

#~ msgid ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.BatchNorm1d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"
#~ msgstr ""
#~ ":obj:`register_forward_pre_hook "
#~ "<megengine.module.BatchNorm1d.register_forward_pre_hook>`\\ "
#~ "\\(hook\\)"

#~ msgid "Registers a hook to handle forward inputs."
#~ msgstr "给模块输入注册一个回调函数。"

#~ msgid ""
#~ ":obj:`replace_param "
#~ "<megengine.module.BatchNorm1d.replace_param>`\\ \\(params\\, "
#~ "start\\_pos\\[\\, seen\\]\\)"
#~ msgstr ""
#~ ":obj:`replace_param "
#~ "<megengine.module.BatchNorm1d.replace_param>`\\ \\(params\\, "
#~ "start\\_pos\\[\\, seen\\]\\)"

#~ msgid ""
#~ "Replaces module's parameters with ``params``,"
#~ " used by :class:`~.ParamPack` to"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.BatchNorm1d.reset_parameters>`\\ \\(\\)"
#~ msgstr ""
#~ ":obj:`reset_parameters "
#~ "<megengine.module.BatchNorm1d.reset_parameters>`\\ \\(\\)"

#~ msgid ""
#~ ":obj:`reset_running_stats "
#~ "<megengine.module.BatchNorm1d.reset_running_stats>`\\ \\(\\)"
#~ msgstr ""
#~ ":obj:`reset_running_stats "
#~ "<megengine.module.BatchNorm1d.reset_running_stats>`\\ \\(\\)"

#~ msgid ""
#~ ":obj:`state_dict <megengine.module.BatchNorm1d.state_dict>`\\"
#~ " \\(\\[rst\\, prefix\\, keep\\_var\\]\\)"
#~ msgstr ""
#~ ":obj:`state_dict <megengine.module.BatchNorm1d.state_dict>`\\"
#~ " \\(\\[rst\\, prefix\\, keep\\_var\\]\\)"

#~ msgid ""
#~ ":obj:`tensors <megengine.module.BatchNorm1d.tensors>`\\ "
#~ "\\(\\[recursive\\]\\)"
#~ msgstr ""

#~ msgid "Returns an iterable for the :class:`~.Tensor` of the module."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`train <megengine.module.BatchNorm1d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"
#~ msgstr ""
#~ ":obj:`train <megengine.module.BatchNorm1d.train>`\\ "
#~ "\\(\\[mode\\, recursive\\]\\)"

#~ msgid ""
#~ "Sets training mode of all the "
#~ "modules within this module (including "
#~ "itself) to ``mode``."
#~ msgstr "当前模块中所有模块的 ``training`` 属性（包括自身）置为 ``mode``。"

#~ msgid ":obj:`zero_grad <megengine.module.BatchNorm1d.zero_grad>`\\ \\(\\)"
#~ msgstr ":obj:`zero_grad <megengine.module.BatchNorm1d.zero_grad>`\\ \\(\\)"

#~ msgid "Sets all parameters' grads to zero"
#~ msgstr "将所有参数的梯度置0。"

#~ msgid "Refer to :class:`~.BatchNorm2d` for more information."
#~ msgstr "参见 :class:`~.BatchNorm2d` 以获取更多信息。"

