msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-24 23:51+0800\n"
"PO-Revision-Date: 2023-04-21 09:33\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/megengine.po\n"
"X-Crowdin-File-ID: 9801\n"

#: ../../source/reference/megengine.rst:6
msgid "megengine"
msgstr ""

#: ../../source/reference/megengine.rst:14
msgid "``MGE`` 或 ``mge`` 是 ``MegEngine`` 的官方缩写，我们建议相关衍生库将其作为前缀。"
msgstr ""

#: ../../source/reference/megengine.rst:18
msgid "不要尝试 [ ``import megengine as torch`` ] 这是行不通的！ ( /ω＼)"
msgstr ""

#: ../../source/reference/megengine.rst:20
msgid "MegEngine 的部分 API 设计借鉴了 PyTorch_, 我们相信这对开发者而言会更加友好；"
msgstr ""

#: ../../source/reference/megengine.rst:21
msgid "但二者的底层设计完全不同，MegEngine is just MegEngine."
msgstr ""

#: ../../source/reference/megengine.rst:28
msgid "Tensor"
msgstr ""

#: ../../source/reference/megengine.rst:35
msgid "MegEngine 中提供了一种名为 “张量” （:class:`Tensor` ）的数据结构， 区别于物理学中的定义，其概念与 NumPy_ 中的 :class:`~numpy.ndarray` 更加相似， 即张量是一类多维数组，其中每个元素的数据类型和空间大小一致，而数据值可以不同。"
msgstr ""

#: ../../source/reference/megengine.rst:48:<autosummary>:1
msgid ":py:obj:`Tensor <megengine.Tensor>`"
msgstr ""

#: ../../source/reference/megengine.rst:48:<autosummary>:1
msgid "A tensor object represents a multidimensional, homogeneous array of fixed-size items."
msgstr "一个张量对象表示固定大小元素的多维同构数组。"

#: ../../source/reference/megengine.rst:48:<autosummary>:1
msgid ":py:obj:`Parameter <megengine.Parameter>`"
msgstr ""

#: ../../source/reference/megengine.rst:48:<autosummary>:1
msgid "A kind of Tensor that is to be considered a module parameter."
msgstr "一类表示模块参数的张量。"

#: ../../source/reference/megengine.rst:49
msgid "上面 Parameter 可以被看作是一种特殊的 Tensor, 通常用来表示神经网络中的参数。"
msgstr ""

#: ../../source/reference/megengine.rst:51
msgid "想要了解更多，请参考 :ref:`tensor-guide` 。"
msgstr ""

#: ../../source/reference/megengine.rst:54
msgid "Serialization"
msgstr ""

#: ../../source/reference/megengine.rst:61:<autosummary>:1
msgid ":py:obj:`save <megengine.save>`"
msgstr ""

#: ../../source/reference/megengine.rst:61:<autosummary>:1
msgid "Save an object to disk file."
msgstr "把对象保存成磁盘文件。"

#: ../../source/reference/megengine.rst:61:<autosummary>:1
msgid ":py:obj:`load <megengine.load>`"
msgstr ""

#: ../../source/reference/megengine.rst:61:<autosummary>:1
msgid "Load an object saved with :func:`~.megengine.save` from a file."
msgstr "从文件中加载一个用:func:`~.megengine.save`保存的对象。"

#: ../../source/reference/megengine.rst:65
msgid "Device"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`device.what_is_xpu <megengine.device.what_is_xpu>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Return the precise device type like ``cpu``, ``cuda`` and so on."
msgstr "返回确切的设备类型，比如 ``cpu``, ``cuda`` 等。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`is_cuda_available <megengine.is_cuda_available>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns whether cuda device is available on this system."
msgstr "cuda设备是否在当前机器可用。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`is_atlas_available <megengine.is_atlas_available>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns whether atlas device is available on this system."
msgstr "返回这个系统中是否有可用的 atlas 设备。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`is_cambricon_available <megengine.is_cambricon_available>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns whether cambricon device is available on this system."
msgstr "返回这个系统中是否有可用的 cambricon 设备。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`is_rocm_available <megengine.is_rocm_available>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns whether rocm device is available on this system."
msgstr "返回这个系统中是否有可用的 rocm 设备。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_device_count <megengine.get_device_count>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Gets number of devices installed on this system."
msgstr "获取当前系统中的设备数量。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_default_device <megengine.get_default_device>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Gets default computing node."
msgstr "查询默认的计算结点。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`set_default_device <megengine.set_default_device>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Sets default computing node."
msgstr "设置默认的计算节点。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_mem_status_bytes <megengine.get_mem_status_bytes>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Get total and free memory on the computing device in bytes."
msgstr "以字节为单位获取计算设备上的总内存和可用内存。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_cuda_device_property <megengine.get_cuda_device_property>`"
msgstr "py:obj:`get_cuda_device_property <megengine.get_cuda_device_property>`"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_cuda_compute_capability <megengine.get_cuda_compute_capability>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Gets compute capability of the specified device."
msgstr "获取指定设备的计算能力。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_allocated_memory <megengine.get_allocated_memory>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns the current memory occupied by tensors on the computing device in bytes."
msgstr "返回指定的计算设备上tensor占用的内存总量，单位是byte。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_reserved_memory <megengine.get_reserved_memory>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns the current memory managed by the caching allocator on the computing device in bytes."
msgstr "以字节为单位返回当前由计算设备中的缓存分配器管理的内存"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_max_reserved_memory <megengine.get_max_reserved_memory>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns the maximum memory managed by the caching allocator on the computing device in bytes."
msgstr "返回当前计算设备上分配器管理的内存容量的峰值，单位是byte。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_max_allocated_memory <megengine.get_max_allocated_memory>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Returns the maximum memory occupied by tensors on the computing device in bytes."
msgstr "返回指定计算设备上所有tensor的内存占用的峰值，单位是byte。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`reset_max_memory_stats <megengine.reset_max_memory_stats>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Resets the maximum stats on the computing device."
msgstr "重置内存使用信息"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`set_prealloc_config <megengine.set_prealloc_config>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Specifies how to pre-allocate from raw device allocator."
msgstr "对原始设备的内存分配器指定预先分配的方案。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`coalesce_free_memory <megengine.coalesce_free_memory>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "This function will try it best to free all consecutive free chunks back to operating system, small pieces may not be returned."
msgstr "这个函数会尽量将所有连续的空闲块释放回操作系统，小块可能不会被返回。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_cuda_version <megengine.get_cuda_version>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Gets the CUDA version used when compiling MegEngine."
msgstr "获取编译 MegEngine 时使用的 CUDA 版本。"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_cudnn_version <megengine.get_cudnn_version>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Get the Cudnn version used when compiling MegEngine."
msgstr "获取编译 MegEngine 时用到的 Cudnn 版本"

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid ":py:obj:`get_tensorrt_version <megengine.get_tensorrt_version>`"
msgstr ""

#: ../../source/reference/megengine.rst:91:<autosummary>:1
msgid "Get the TensorRT version used when compiling MegEngine."
msgstr "获取编译 MegEngine 时用到的 TensorRT 的版本"

#: ../../source/reference/megengine.rst:95
msgid "Logger"
msgstr ""

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid ":py:obj:`enable_debug_log <megengine.enable_debug_log>`"
msgstr ""

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid "Sets logging level to debug for all components."
msgstr "设置日志记录级别(logging level)以调试所有组件。"

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid ":py:obj:`get_logger <megengine.get_logger>`"
msgstr ""

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid "Gets megengine logger with given name."
msgstr "按照给定名称获取megengine日志。"

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid ":py:obj:`set_log_file <megengine.set_log_file>`"
msgstr ""

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid "Sets log output file."
msgstr "设置日志的输出文件。"

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid ":py:obj:`set_log_level <megengine.set_log_level>`"
msgstr ""

#: ../../source/reference/megengine.rst:104:<autosummary>:1
msgid "Sets default logging level."
msgstr "设置默认的日志记录级别。"

#: ../../source/reference/megengine.rst:108
msgid "Version"
msgstr ""

#~ msgid "MegEngine 的部分 API 设计借鉴了 PyTorch, 我们相信这对开发者而言会更加友好；"
#~ msgstr ""

#~ msgid ""
#~ "MegEngine 中提供了一种名为 “张量” （:class:`Tensor` "
#~ "）的数据结构， 区别于物理学中的定义，其概念与 NumPy_ 中的 "
#~ ":class:`~numpy.ndarray` 更加相似， "
#~ "即张量是一类多维数组，其中每个元素的数据类型和空间大小一致，仅数据值有所不同。"
#~ msgstr ""

#~ msgid ""
#~ "与 NumPy 的区别之处在于，MegEngine 还支持利用 GPU "
#~ "设备进行更加高效计算。 当 GPU 和 CPU 设备都可用时，MegEngine"
#~ " 将优先使用 GPU 作为默认计算设备，无需用户进行手动设定。"
#~ msgstr ""

#~ msgid "如果有查看/改变默认计算设备的需求，请参考 :mod:`megengine.device` 中提供的接口。"
#~ msgstr ""

#~ msgid "对于 Tensor 的各种操作，绝大部分都实现在 :mod:`megengine.functional` 中。"
#~ msgstr ""

#~ msgid ""
#~ "尽管 MegEngine 不是用来教你 `解魔方 <https://rubiks-"
#~ "cube-solver.com/>`_ 的... 😆 但尝试做一下 "
#~ ":ref:`Tensor 计算 <general-tensor-operations>`"
#~ " 吧，它比魔方还要更加神奇。"
#~ msgstr ""

#~ msgid "Tensor 举例：三阶魔方"
#~ msgstr ""

#~ msgid ""
#~ "我们可以借助上面这张魔方（ `图片来源 "
#~ "<https://commons.wikimedia.org/wiki/File:Rubiks_cube.jpg>`_ "
#~ "）来直观地理解 Tensor:"
#~ msgstr ""

#~ msgid "首先，我们假设这个魔方是“实心同质”的，是一个存在于现实世界中的 Tensor;"
#~ msgstr ""

#~ msgid "这个 Tensor 里面的每个元素的类型（:attr:`~Tensor.dtype` ）都是一致的（方方正正的形状、外加一样的做工）；"
#~ msgstr ""

#~ msgid ""
#~ "而且这是一个维度（:attr:`~Tensor.ndim` ）为 :math:`3` "
#~ "的结构，形状（:attr:`~Tensor.shape` ）为 :math:`(3, 3, "
#~ "3)` ;"
#~ msgstr ""

#~ msgid "对应地，该 Tensor 的总元素个数（:attr:`~Tensor.size` ）是 :math:`3*3*3=27`."
#~ msgstr ""

#~ msgid ""
#~ "如果你将每种颜色代表一个值，而每个魔方块的值可以用其具有的颜色值之和来表示（中间块只好为零了）， "
#~ "那么不同的魔方块就具有了各自的取值，就好像 Tensor 中的每个元素可以有自己的取值一样。 "
#~ "事实上，除了魔方以外，还有很多东西可以抽象成 Tensor 数据结构，意味着 MegEngine "
#~ "也许能派上用场。"
#~ msgstr ""

#~ msgid ""
#~ "尽管 MegEngine 不是用来教你 `解魔方 <https://rubiks-"
#~ "cube-solver.com/>`_ 的... 😆 但尝试做一下 "
#~ ":ref:`Tensor 计算 <standard-tensor-operations>`"
#~ " 吧，它比魔方还要更加神奇。"
#~ msgstr ""

#~ msgid ""
#~ "与 NumPy 的区别之处在于，MegEngine 还支持利用 GPU "
#~ "设备进行更加高效的计算。 当 GPU 和 CPU "
#~ "设备都可用时，MegEngine 将优先使用 GPU 作为默认计算设备，无需用户进行手动设定。"
#~ msgstr ""

#~ msgid "如果有查看/改变默认计算设备的需求，请参考 :ref:`device` 中提供的接口。"
#~ msgstr ""

#~ msgid "通过 :meth:`.Tensor.to` 和 :func:`.functional.copy` 可将 Tensor 拷贝到指定设备。"
#~ msgstr ""

#~ msgid "Tensor 类中还有其他的属性和方法，我们将在恰当的位置进行更具体的介绍："
#~ msgstr ""

#~ msgid "Tensor 数据类型"
#~ msgstr ""

#~ msgid "MegEngine 中使用 :class:`numpy.dtype` 来表示数据类型，目前支持的数据类型如下："
#~ msgstr ""

#~ msgid "数据类型"
#~ msgstr ""

#~ msgid "numpy.dtype"
#~ msgstr ""

#~ msgid "32-bit floating-point"
#~ msgstr ""

#~ msgid ":any:`numpy.float32` a alias of :class:`numpy.single`"
#~ msgstr ""

#~ msgid "16-bit floating-point"
#~ msgstr ""

#~ msgid ":any:`numpy.float16` a alias of :class:`numpy.half`"
#~ msgstr ""

#~ msgid "8-bit integer (unsigned)"
#~ msgstr ""

#~ msgid ":any:`numpy.uint8`"
#~ msgstr ""

#~ msgid "8-bit integer (signed)"
#~ msgstr ""

#~ msgid ":any:`numpy.int8`"
#~ msgstr ""

#~ msgid "16-bit integer (signed)"
#~ msgstr ""

#~ msgid ":any:`numpy.int16`"
#~ msgstr ""

#~ msgid "32-bit integer (signed)"
#~ msgstr ""

#~ msgid ":any:`numpy.int32`"
#~ msgstr ""

#~ msgid "Boolean"
#~ msgstr ""

#~ msgid ":any:`numpy.bool8` a alias of :class:`numpy.bool_`"
#~ msgstr ""

#~ msgid "要获取指定数据类型的 Tensor, 可以使用 :meth:`~Tensor.astype` 方法进行转化。"
#~ msgstr ""

#~ msgid "单精度浮点 ``float32`` 是 MegEngine 中默认的（也是最通用的）Tensor 数据类型。"
#~ msgstr ""

#~ msgid "我们会在 :mod:`megengine.quantization` 模块中提到对量化数据类型的支持。"
#~ msgstr ""

#~ msgid "并不是所有的已有算子都支持上述任意数据类型的计算，还有一些情况尚未实现。"
#~ msgstr ""

#~ msgid "Tensor 创建与处理"
#~ msgstr ""

#~ msgid "创建 Tensor 的方式有很多种，常见操作如下："
#~ msgstr ""

#~ msgid ""
#~ "如果想要使用已经存在的数据创建 Tensor, 可以将其传入 :class:`Tensor` "
#~ "的构造函数： 支持传入标量（Scalar）、Python :class:`list` 以及 "
#~ "NumPy :class:`~numpy.ndarray` （当然也包括 Tensor "
#~ "自己）；"
#~ msgstr ""

#~ msgid ""
#~ "对应地，Tensor 也支持通过 :meth:`~Tensor.item` , "
#~ ":meth:`~Tensor.tolist` 和 :meth:`~Tensor.numpy` "
#~ "变成其它类型。"
#~ msgstr ""

#~ msgid ""
#~ "如果想要根据某些规则生成特定的 Tensor, 请参考 "
#~ ":mod:`megengine.functional` 中的 :ref:`tensor-"
#~ "creation` 部分。"
#~ msgstr ""

#~ msgid ""
#~ "Tensor 中重载了 Python 中常见的运算符，支持直接进行 ``+`` "
#~ "``-`` ``*`` ``/`` 等操作。 但请注意，与 Tensor "
#~ "相关的绝大多数计算接口，都封装在 :mod:`megengine.functional` 模块中。"
#~ msgstr ""

#~ msgid ""
#~ "更多时候，我们希望能够将现实中的数据（或数据集）在 MegEngine 中进行处理。 "
#~ "一种普遍的方法是将其转化为 :class:`~numpy.ndarray` 后传入 "
#~ ":class:`Tensor` 来创建实例； 还可以利用 MegEngine "
#~ "中封装好的接口，方便进行一些预处理操作，参考 :mod:`megengine.data` 模块。"
#~ msgstr ""

#~ msgid ""
#~ "在 :mod:`megengine.core` 模块中实现了 MegEngine "
#~ "的核心功能，包括 Tensor 和 Operators 组成的计算图，自动求导机制等等。"
#~ " MegEngine 用户在日常使用中无需直接调用这个模块，因为里面的功能实现已经被其它常用模块进行了封装。 "
#~ "但出于方便 MegEngine 开发者检索的目的，我们也将 core 中的 "
#~ "API 列举在此处。"
#~ msgstr ""

#~ msgid "Core"
#~ msgstr ""

#~ msgid ""
#~ "在 :mod:`megengine.core` 子包中实现了 MegEngine "
#~ "的核心功能，包括 Tensor 和 Operators 组成的计算图，自动求导机制等等。"
#~ " MegEngine 用户在日常使用中无需直接调用它，因为里面的功能实现已经被其它面向用户的常用子包如进行了封装。 "
#~ "但出于方便 MegEngine 开发者检索的目的，我们也将 ``core`` 中的 "
#~ "API 列举在此处。"
#~ msgstr ""

#~ msgid "我们不承诺 core 模块中 API 的兼容性和稳定性。"
#~ msgstr ""

#~ msgid ""
#~ "任何 MegEngine 的用户都可以尝试成为我们的开发人员，就好像你理解了 Tensor "
#~ "和 Core 之后， 便可以尝试去理解 NVIDIA 的 "
#~ "TensorCore_ 了。冷笑话 +1 (￣▽￣)\""
#~ msgstr ""

#~ msgid ""
#~ "你可能在 MegEngine 源代码中经常会看到诸如 MegBrain, MGB "
#~ "等字样。 不用担心，MegBrain 是 MegEngine "
#~ "的内部代号，二者某种程度上是等价的。"
#~ msgstr ""

#~ msgid "模型保存与加载"
#~ msgstr ""

#~ msgid "设备相关"
#~ msgstr ""

#~ msgid "日志相关"
#~ msgstr ""

#~ msgid "查询版本信息"
#~ msgstr ""

#~ msgid ":obj:`save <megengine.save>`"
#~ msgstr ""

#~ msgid ":obj:`load <megengine.load>`"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`get_cuda_compute_capability "
#~ "<megengine.get_cuda_compute_capability>`"
#~ msgstr ""

#~ msgid ":obj:`get_allocated_memory <megengine.get_allocated_memory>`"
#~ msgstr ""

#~ msgid ":obj:`get_reserved_memory <megengine.get_reserved_memory>`"
#~ msgstr ""

#~ msgid ":obj:`get_max_reserved_memory <megengine.get_max_reserved_memory>`"
#~ msgstr ""

#~ msgid ":obj:`get_max_allocated_memory <megengine.get_max_allocated_memory>`"
#~ msgstr ""

#~ msgid ":obj:`reset_max_memory_stats <megengine.reset_max_memory_stats>`"
#~ msgstr ""

#~ msgid ":obj:`coalesce_free_memory <megengine.coalesce_free_memory>`"
#~ msgstr ""

#~ msgid ":obj:`enable_debug_log <megengine.enable_debug_log>`"
#~ msgstr ""

#~ msgid ":obj:`get_logger <megengine.get_logger>`"
#~ msgstr ""

#~ msgid ":obj:`set_log_file <megengine.set_log_file>`"
#~ msgstr ""

#~ msgid ":obj:`set_log_level <megengine.set_log_level>`"
#~ msgstr ""

#~ msgid ":py:obj:`DeviceType <megengine.DeviceType>`"
#~ msgstr ""

#~ msgid "Members:"
#~ msgstr ""

