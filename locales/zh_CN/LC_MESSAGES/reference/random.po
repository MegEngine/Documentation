msgid ""
msgstr ""
"Project-Id-Version: megengine\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-08 01:07+0000\n"
"PO-Revision-Date: 2024-01-08 01:26\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: megengine\n"
"X-Crowdin-Project-ID: 450980\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /dev/locales/zh_CN/LC_MESSAGES/reference/random.po\n"
"X-Crowdin-File-ID: 9811\n"

#: ../../source/reference/random.rst:6
msgid "megengine.random"
msgstr "megengine.random"

#: ../../source/reference/random.rst:13:<autosummary>:1
msgid ":py:obj:`RNG <megengine.random.RNG>`"
msgstr ":py:obj:`RNG <megengine.random.RNG>`"

#: ../../source/reference/random.rst:13:<autosummary>:1
msgid ":class:`RNG` exposes a number of methods for generating random numbers."
msgstr ":class:`RNG` 公开了一些生成随机数的方法。"

#: ../../source/reference/random.rst:21:<autosummary>:1
msgid ":py:obj:`seed <megengine.random.seed>`"
msgstr ":py:obj:`seed <megengine.random.seed>`"

#: ../../source/reference/random.rst:21:<autosummary>:1
msgid "Sets the seed for generating random numbers globally."
msgstr "设置全局生成随机数的种子。"

#: ../../source/reference/random.rst:21:<autosummary>:1
msgid ":py:obj:`permutation <megengine.random.permutation>`"
msgstr ":py:obj:`permutation <megengine.random.permutation>`"

#: ../../source/reference/random.rst:21:<autosummary>:1
msgid "Randomly permute a sequence, or return a permuted range."
msgstr "随机打乱一个序列，或者返回一个打乱后的范围。"

#: ../../source/reference/random.rst:21:<autosummary>:1
msgid ":py:obj:`shuffle <megengine.random.shuffle>`"
msgstr ":py:obj:`shuffle <megengine.random.shuffle>`"

#: ../../source/reference/random.rst:21:<autosummary>:1
msgid "Modify a sequence in-place by shuffling its contents."
msgstr "通过打乱序列的内容来原地修改序列。"

#: ../../source/reference/random.rst:23
msgid "分布（Distribution）"
msgstr "分布（Distribution）"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid ":py:obj:`normal <megengine.random.normal>`"
msgstr ":py:obj:`normal <megengine.random.normal>`"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid "Random variable with Gaussian distribution :math:`N(\\mu, \\sigma)`."
msgstr "服从高斯分布的随机变量 :math:`N(\\mu, \\sigma)`"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid ":py:obj:`uniform <megengine.random.uniform>`"
msgstr ":py:obj:`uniform <megengine.random.uniform>`"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid "Random variable with uniform distribution :math:`U(low, high)`."
msgstr "均匀分布 :math:`U(low, high)` 的随机变量。"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid ":py:obj:`beta <megengine.random.beta>`"
msgstr ":py:obj:`beta <megengine.random.beta>`"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid "Random variable with Beta distribution :math:`\\operatorname{Beta}(\\alpha, \\beta)`."
msgstr "服从贝塔分布 :math:`\\operatorname{Beta}(\\alpha, \\beta)` 的随机变量。"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid ":py:obj:`gamma <megengine.random.gamma>`"
msgstr ":py:obj:`gamma <megengine.random.gamma>`"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid "Random variable with Gamma distribution :math:`\\Gamma(k, \\theta)`."
msgstr "服从伽玛分布 :math:`\\Gamma(k, \\theta)` 的随机变量。"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid ":py:obj:`poisson <megengine.random.poisson>`"
msgstr ":py:obj:`poisson <megengine.random.poisson>`"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid "Random variable with poisson distribution :math:`\\operatorname{Poisson}(\\lambda)`."
msgstr "服从泊松分布 :math:`\\operatorname{Poisson}(\\lambda)` 的随机变量。"

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid ":py:obj:`exponential <megengine.random.exponential>`"
msgstr ""

#: ../../source/reference/random.rst:34:<autosummary>:1
msgid "Random variable with exponential distribution :math:`\\operatorname{Exponential}(\\lambda)`. The corresponding probability density function is .. math::     f\\left( x;\\lambda \\right) =\\lambda e^{-\\lambda x} for x > 0 and 0 elsewhere. where`rate = lambda`. :type rate: :py:data:`~typing.Union`\\[:py:class:`float`, :py:class:`~megengine.tensor.Tensor`] :param rate: the lambda parameter of the distribution. Must be non-negative. rate = 1 / scale of the distribution. :type size: :py:data:`~typing.Optional`\\[:py:class:`~typing.Iterable`\\[:py:class:`int`]] :param size: the size of output tensor. If scale is a scalar and given size is, e.g., `(m, n)`,              then the output shape is `(m, n)`. If scale is a Tensor with shape `(k, v)` and given              size is, e.g., `(m, n)`, then the output shape is `(m, n, k, v)`. Default: None."
msgstr ""

#~ msgid "随机（Random）"
#~ msgstr "随机（Random）"

#~ msgid "种子（Seed）"
#~ msgstr ""

#~ msgid ""
#~ "Generates a random permutation of "
#~ "integers from :math:`0` to :math:`n -"
#~ " 1`."
#~ msgstr ""

#~ msgid ":obj:`RNG <megengine.random.RNG>`"
#~ msgstr ":obj:`RNG <megengine.random.RNG>`"

