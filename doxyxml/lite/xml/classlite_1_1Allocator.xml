<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classlite_1_1Allocator" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>lite::Allocator</compoundname>
    <includes refid="network_8h" local="no">network.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlite_1_1Allocator_1a29c2cc7af00fcbe6c6e0cec75bc78e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual lite::Allocator::~Allocator</definition>
        <argsstring>()=default</argsstring>
        <name>~Allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/gitcore/MegBrain/lite/include/lite/network.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlite_1_1Allocator_1a6eb29f0ccc6317909983eb34ef726fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* lite::Allocator::allocate</definition>
        <argsstring>(LiteDeviceType device_type, int device_id, size_t size, size_t align)=0</argsstring>
        <name>allocate</name>
        <param>
          <type>LiteDeviceType</type>
          <declname>device_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>align</declname>
        </param>
        <briefdescription>
<para>allocate memory of size in the given device with the given align </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the device type the memory will allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the device id the memory will allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte size of memory will be allocated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para>the align size require when allocate the memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/gitcore/MegBrain/lite/include/lite/network.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlite_1_1Allocator_1a54531d5c3e198db5fcb6aa1acea9bc81" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void lite::Allocator::free</definition>
        <argsstring>(LiteDeviceType device_type, int device_id, void *ptr)=0</argsstring>
        <name>free</name>
        <param>
          <type>LiteDeviceType</type>
          <declname>device_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>free the memory pointed by ptr in the given device </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the device type the memory will allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the device id the memory will allocate from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pointer to be free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/data/gitcore/MegBrain/lite/include/lite/network.h" line="213" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A user-implemented allocator interface, user can register an allocator to the megengine, then all the runtime memory will allocate by this allocator. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/data/gitcore/MegBrain/lite/include/lite/network.h" line="193" column="1" bodyfile="/data/gitcore/MegBrain/lite/include/lite/network.h" bodystart="193" bodyend="214"/>
    <listofallmembers>
      <member refid="classlite_1_1Allocator_1a6eb29f0ccc6317909983eb34ef726fe0" prot="public" virt="pure-virtual"><scope>lite::Allocator</scope><name>allocate</name></member>
      <member refid="classlite_1_1Allocator_1a54531d5c3e198db5fcb6aa1acea9bc81" prot="public" virt="pure-virtual"><scope>lite::Allocator</scope><name>free</name></member>
      <member refid="classlite_1_1Allocator_1a29c2cc7af00fcbe6c6e0cec75bc78e66" prot="public" virt="virtual"><scope>lite::Allocator</scope><name>~Allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
